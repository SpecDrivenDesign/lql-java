# Below is a set of 250 success-path test cases that do NOT use any library functions.
# Each test case includes:
#  - description
#  - context
#  - expression
#  - expectedResult
#
# All expressions are valid, produce a result (no errors), and do not rely on library calls.
# They demonstrate numeric, string, boolean, null, array/object literals, comparisons,
# boolean logic, arithmetic, optional chaining, and moreâ€”without calling time, math,
# string, array, regex, cond, or type libraries.

- description: "Test #1: Basic integer equality"
  context:
    a: 10
  expression: "$a == 10"
  expectedResult: true

- description: "Test #2: Negative integer equality"
  context:
    x: -5
  expression: "$x == -5"
  expectedResult: true

- description: "Test #3: Zero integer equality"
  context:
    num: 0
  expression: "$num == 0"
  expectedResult: true

- description: "Test #4: Positive integer inequality"
  context:
    val: 100
  expression: "$val != 50"
  expectedResult: true

- description: "Test #5: Simple addition"
  context:
    x: 2
    y: 3
  expression: "$x + $y"
  expectedResult: 5

- description: "Test #6: Simple subtraction"
  context:
    x: 10
    y: 7
  expression: "$x - $y"
  expectedResult: 3

- description: "Test #7: Simple multiplication"
  context:
    a: 6
    b: 5
  expression: "$a * $b"
  expectedResult: 30

- description: "Test #8: Simple division"
  context:
    numerator: 20
    denominator: 4
  expression: "$numerator / $denominator"
  expectedResult: 5

- description: "Test #9: Mixed addition and subtraction"
  context:
    a: 10
    b: 3
    c: 2
  expression: "$a + $b - $c"
  expectedResult: 11

- description: "Test #10: Parenthesized arithmetic"
  context:
    x: 4
    y: 2
    z: 10
  expression: "($x + $y) * $z"
  expectedResult: 60

- description: "Test #11: Integer comparison less than"
  context:
    n: 5
  expression: "$n < 10"
  expectedResult: true

- description: "Test #12: Integer comparison greater than"
  context:
    n: 10
  expression: "$n > 2"
  expectedResult: true

- description: "Test #13: Integer comparison <= boundary"
  context:
    val: 5
  expression: "$val <= 5"
  expectedResult: true

- description: "Test #14: Integer comparison >= boundary"
  context:
    score: 99
  expression: "$score >= 99"
  expectedResult: true

- description: "Test #15: Simple equality check with negative integers"
  context:
    neg: -42
  expression: "$neg == -42"
  expectedResult: true

- description: "Test #16: Unary minus on a context reference"
  context:
    base: 8
  expression: "-$base"
  expectedResult: -8

- description: "Test #17: Double unary minus"
  context:
    val: 5
  expression: "-(-$val)"
  expectedResult: 5

- description: "Test #18: Float literal equality"
  context: {}
  expression: "3.14 == 3.14"
  expectedResult: true

- description: "Test #19: Float literal negative"
  context: {}
  expression: "-2.5 == -2.5"
  expectedResult: true

- description: "Test #20: Float exponential notation equality"
  context: {}
  expression: "1e3 == 1000"
  expectedResult: true

- description: "Test #21: Float comparison less than"
  context:
    val: 2.718
  expression: "$val < 3.0"
  expectedResult: true

- description: "Test #22: Float comparison greater than or equal"
  context:
    val: 3.14159
  expression: "$val >= 3.14"
  expectedResult: true

- description: "Test #23: Mixed float addition"
  context:
    x: 1.5
    y: 2.5
  expression: "$x + $y"
  expectedResult: 4.0

- description: "Test #24: Mixed float subtraction"
  context:
    a: 10.75
    b: 0.75
  expression: "$a - $b"
  expectedResult: 10.0

- description: "Test #25: Float multiplication"
  context:
    a: 1.25
    b: 4.0
  expression: "$a * $b"
  expectedResult: 5.0

- description: "Test #26: Float division"
  context:
    a: 6.6
    b: 3.3
  expression: "$a / $b"
  expectedResult: 2.0

- description: "Test #27: Multiple float operations with parentheses"
  context:
    x: 2.0
    y: 3.0
    z: 4.0
  expression: "($x + $y) / $z"
  expectedResult: 1.25

- description: "Test #28: Boolean literal true"
  context: {}
  expression: "true == true"
  expectedResult: true

- description: "Test #29: Boolean literal false"
  context: {}
  expression: "false == false"
  expectedResult: true

- description: "Test #30: Boolean equality from context"
  context:
    flag: true
  expression: "$flag == true"
  expectedResult: true

- description: "Test #31: Boolean inequality from context"
  context:
    active: false
  expression: "$active != true"
  expectedResult: true

- description: "Test #32: Simple AND with true/true"
  context:
    a: true
    b: true
  expression: "$a && $b"
  expectedResult: true

- description: "Test #33: Simple AND with true/false"
  context:
    a: true
    b: false
  expression: "$a && $b"
  expectedResult: false

- description: "Test #34: Simple OR with false/false"
  context:
    x: false
    y: false
  expression: "$x || $y"
  expectedResult: false

- description: "Test #35: Simple OR with true/false"
  context:
    x: true
    y: false
  expression: "$x || $y"
  expectedResult: true

- description: "Test #36: NOT operator on true"
  context:
    val: true
  expression: "NOT $val"
  expectedResult: false

- description: "Test #37: NOT operator on false"
  context:
    val: false
  expression: "NOT $val"
  expectedResult: true

- description: "Test #38: Symbolic ! operator on false"
  context:
    val: false
  expression: "!$val"
  expectedResult: true

- description: "Test #39: Combined boolean logic (AND then OR)"
  context:
    a: true
    b: false
    c: true
  expression: "$a && $b || $c"
  expectedResult: true

- description: "Test #40: Combined boolean logic with parentheses"
  context:
    p: false
    q: false
    r: true
  expression: "($p || $q) && $r"
  expectedResult: false

- description: "Test #41: Checking null literal"
  context: {}
  expression: "null == null"
  expectedResult: true

- description: "Test #42: Compare non-null with null"
  context:
    val: 10
  expression: "$val == null"
  expectedResult: false

- description: "Test #43: Compare boolean with null"
  context:
    flag: true
  expression: "$flag != null"
  expectedResult: true

- description: "Test #44: Compare string with null"
  context:
    str: "test"
  expression: "$str != null"
  expectedResult: true

- description: "Test #45: String equality with context"
  context:
    name: "Alice"
  expression: "$name == \"Alice\""
  expectedResult: true

- description: "Test #46: String inequality"
  context:
    name: "Bob"
  expression: "$name != \"Alice\""
  expectedResult: true

- description: "Test #47: String comparison <"
  context:
    userName: "Alpha"
  expression: "$userName < \"Beta\""
  expectedResult: true

- description: "Test #48: String comparison >"
  context:
    color: "Yellow"
  expression: "$color > \"Red\""
  expectedResult: true

- description: "Test #49: String comparison <= with same string"
  context:
    fruit: "Apple"
  expression: "$fruit <= \"Apple\""
  expectedResult: true

- description: "Test #50: String comparison >= with same string"
  context:
    fruit: "Banana"
  expression: "$fruit >= \"Banana\""
  expectedResult: true

- description: "Test #51: Simple object literal equality check"
  context: {}
  expression: "{val: 123}.val == 123"
  expectedResult: true

- description: "Test #52: Object literal with quoted key"
  context: {}
  expression: "{\"my-key\": 42}['my-key'] == 42"
  expectedResult: true

- description: "Test #53: Object literal multiple fields, check one"
  context: {}
  expression: "{a:1, b:2}.b == 2"
  expectedResult: true

- description: "Test #54: Nested object literal, direct field check"
  context: {}
  expression: "{outer: {inner: 10}}.outer.inner == 10"
  expectedResult: true

- description: "Test #55: Object literal arithmetic in value"
  context: {}
  expression: "{x: (2+3)}.x == 5"
  expectedResult: true

- description: "Test #56: Object literal referencing another field inside"
  context: {}
  expression: "{num: 8, double: (8 * 2)}.double == 16"
  expectedResult: true

- description: "Test #57: Inline array literal simple check"
  context: {}
  expression: "[100, 200, 300][0] == 100"
  expectedResult: true

- description: "Test #58: Inline array literal last element check"
  context: {}
  expression: "[1,2,3][2] == 3"
  expectedResult: true

- description: "Test #59: Inline array with arithmetic"
  context: {}
  expression: "[1+2, 4*3][1] == 12"
  expectedResult: true

- description: "Test #60: Nested arrays"
  context: {}
  expression: "[[1,2],[3,4]][1][0] == 3"
  expectedResult: true

- description: "Test #61: Nested object inside array"
  context: {}
  expression: "[{val: 5}, {val:10}][1].val == 10"
  expectedResult: true

- description: "Test #62: Array inside object literal"
  context: {}
  expression: "{arr: [7,8,9]}.arr[2] == 9"
  expectedResult: true

- description: "Test #63: Context-based array indexing"
  context:
    items: [5, 10, 15]
  expression: "$items[1] == 10"
  expectedResult: true

- description: "Test #64: Context-based object indexing with bracket notation"
  context:
    obj:
      key: "value"
  expression: "$obj['key'] == \"value\""
  expectedResult: true

- description: "Test #65: Context-based object indexing with dot notation"
  context:
    user:
      name: "Charlie"
  expression: "$user.name == \"Charlie\""
  expectedResult: true

- description: "Test #66: Nested context access"
  context:
    outer:
      inner:
        val: 42
  expression: "$outer.inner.val == 42"
  expectedResult: true

- description: "Test #67: Multiple numeric additions"
  context:
    a: 1
    b: 2
    c: 3
    d: 4
  expression: "$a + $b + $c + $d"
  expectedResult: 10

- description: "Test #68: Boolean logic with multiple AND"
  context:
    x: true
    y: true
    z: true
  expression: "$x && $y && $z"
  expectedResult: true

- description: "Test #69: Boolean logic with multiple OR"
  context:
    x: false
    y: false
    z: true
  expression: "$x || $y || $z"
  expectedResult: true

- description: "Test #70: Comparison chain using parentheses"
  context:
    n: 5
  expression: "($n > 1) && ($n < 10)"
  expectedResult: true

- description: "Test #71: Null in context, equality check"
  context:
    val: null
  expression: "$val == null"
  expectedResult: true

- description: "Test #72: Null in context, inequality check"
  context:
    val: null
  expression: "$val != 5"
  expectedResult: true

- description: "Test #73: Non-null in context vs null"
  context:
    val: 0
  expression: "$val != null"
  expectedResult: true

- description: "Test #74: Compare strings in context with <"
  context:
    s1: "Apple"
    s2: "Banana"
  expression: "$s1 < $s2"
  expectedResult: true

- description: "Test #75: Compare strings in context with >"
  context:
    left: "Zebra"
    right: "Yak"
  expression: "$left > $right"
  expectedResult: true

- description: "Test #76: Compare same string references"
  context:
    word: "Same"
  expression: "$word == \"Same\""
  expectedResult: true

- description: "Test #77: Compare numeric context fields with >="
  context:
    x: 10
    y: 10
  expression: "$x >= $y"
  expectedResult: true

- description: "Test #78: Compare numeric context fields with <="
  context:
    x: 5
    y: 7
  expression: "$x <= $y"
  expectedResult: true

- description: "Test #79: Floating addition in context"
  context:
    a: 1.1
    b: 2.2
  expression: "$a + $b"
  expectedResult: 3.3

- description: "Test #80: Floating multiplication in context"
  context:
    x: 1.5
    y: 2.0
  expression: "$x * $y"
  expectedResult: 3.0

- description: "Test #81: Multiple float arithmetic"
  context:
    p: 2.5
    q: 2.0
    r: 1.5
  expression: "($p * $q) - $r"
  expectedResult: 3.5

- description: "Test #82: Complex parentheses with mixed int/float references"
  context:
    i: 2
    f: 3.5
  expression: "(type.float($i + 10) - $f) * 2.0"
  expectedResult: 17.0

- description: "Test #83: Boolean context, AND with literal"
  context:
    check: true
  expression: "$check && true"
  expectedResult: true

- description: "Test #84: Boolean context, OR with literal"
  context:
    check: false
  expression: "$check || true"
  expectedResult: true

- description: "Test #85: Simple nested object field retrieval"
  context:
    data:
      nested:
        val: 99
  expression: "$data.nested.val"
  expectedResult: 99

- description: "Test #86: Nested array indexing"
  context:
    data:
      arrOfArrs:
        - [10, 20]
        - [30, 40]
  expression: "$data.arrOfArrs[1][1]"
  expectedResult: 40

- description: "Test #87: Double bracket notation"
  context:
    alpha:
      beta: "Gamma"
  expression: "$alpha['beta'] == \"Gamma\""
  expectedResult: true

- description: "Test #88: Mixed bracket and dot notation"
  context:
    outer:
      innerArray: [1,2,3]
  expression: "$outer.innerArray[2] == 3"
  expectedResult: true

- description: "Test #89: Optional chaining with existing field"
  context:
    user:
      info:
        name: "Chris"
  expression: "$user?.info?.name == \"Chris\""
  expectedResult: true

- description: "Test #90: Optional chaining with array index (valid index)"
  context:
    nums: [10,20,30]
  expression: "$nums?[1] == 20"
  expectedResult: true

- description: "Test #91: Optional chaining deeply nested object"
  context:
    a:
      b:
        c:
          d: 100
  expression: "$a?.b?.c?.d == 100"
  expectedResult: true

- description: "Test #92: Optional chaining on array of objects"
  context:
    items:
      - {id: 1, val: 10}
      - {id: 2, val: 20}
  expression: "$items?[0]?.val == 10"
  expectedResult: true

- description: "Test #93: Inline object with optional chaining (no real effect but valid)"
  context: {}
  expression: "{inner: {val: 7}}?.inner?.val == 7"
  expectedResult: true

- description: "Test #94: Inline array with optional chaining"
  context: {}
  expression: "[[5,6],[7,8]]?[1]?[0] == 7"
  expectedResult: true

- description: "Test #95: Boolean logic with parentheses around OR"
  context:
    flagA: false
    flagB: true
  expression: "($flagA || $flagB) && true"
  expectedResult: true

- description: "Test #96: Nested parentheses with arithmetic"
  context:
    x: 2
    y: 3
    z: 4
  expression: "(($x + $y) * ($z - 1))"
  expectedResult: 15

- description: "Test #97: Simple equality with string from context"
  context:
    greeting: "Hello"
  expression: "$greeting == \"Hello\""
  expectedResult: true

- description: "Test #98: Compare two numeric context fields"
  context:
    a: 8
    b: 2
  expression: "$a / $b == 4"
  expectedResult: true

- description: "Test #99: Nested object 2 levels"
  context:
    level1:
      level2:
        x: 50
  expression: "$level1.level2.x == 50"
  expectedResult: true

- description: "Test #100: Access array from nested object"
  context:
    config:
      list: [1,2,3,4]
  expression: "$config.list[3] == 4"
  expectedResult: true

- description: "Test #101: Inline array in expression, simple index"
  context: {}
  expression: "[9,8,7][1] == 8"
  expectedResult: true

- description: "Test #102: Inline object with 3 fields, check one"
  context: {}
  expression: "{one:1, two:2, three:3}.three == 3"
  expectedResult: true

- description: "Test #103: Inline object with nested array"
  context: {}
  expression: "{arr:[10,20]}['arr'][0] == 10"
  expectedResult: true

- description: "Test #104: Arithmetic chain with negative result"
  context:
    base: 10
    sub: 15
  expression: "$base - $sub"
  expectedResult: -5

- description: "Test #105: Arithmetic chain multiple steps"
  context:
    n1: 2
    n2: 4
    n3: 8
  expression: "$n1 * $n2 + $n3"
  expectedResult: 16

- description: "Test #106: Float literal with exponent (positive) comparison"
  context: {}
  expression: "1.0e2 == 100"
  expectedResult: true

- description: "Test #107: Float literal with exponent (negative) comparison"
  context: {}
  expression: "3.14E-2 == 0.0314"
  expectedResult: true

- description: "Test #108: Float literal with exponent (plus sign) comparison"
  context: {}
  expression: "1E+1 == 10"
  expectedResult: true

- description: "Test #109: Mixed sign numeric literal addition"
  context: {}
  expression: "-5 + 10"
  expectedResult: 5

- description: "Test #110: Double negative literal addition"
  context: {}
  expression: "-3 + -7"
  expectedResult: -10

- description: "Test #111: Boolean AND chain in context"
  context:
    b1: true
    b2: true
    b3: false
  expression: "$b1 && $b2 && $b3 == false"
  expectedResult: true

- description: "Test #112: Boolean OR chain in context"
  context:
    b1: false
    b2: false
    b3: true
  expression: "$b1 || $b2 || $b3 == true"
  expectedResult: true

- description: "Test #113: Check nested object with optional chaining"
  context:
    top:
      middle:
        bottom: "end"
  expression: "$top?.middle?.bottom == \"end\""
  expectedResult: true

- description: "Test #114: Arithmetic with parentheses inside bracket indexing"
  context:
    arr: [10, 20, 30, 40]
  expression: "$arr[(2+1)] == 40"
  expectedResult: true

- description: "Test #115: Check array length indirectly"
  # We'll do a success check on the last index, not an actual length function
  context:
    numbers: [5,5,5]
  expression: "$numbers[2] == 5"
  expectedResult: true

- description: "Test #116: Compare two string fields in context"
  context:
    s1: "Cat"
    s2: "Dog"
  expression: "$s1 < $s2"
  expectedResult: true

- description: "Test #117: Strict equality for the same string field"
  context:
    word: "Test"
  expression: "$word == \"Test\""
  expectedResult: true

- description: "Test #118: Large integer literal equality"
  context: {}
  expression: "999999999999 == 999999999999"
  expectedResult: true

- description: "Test #119: Large negative integer literal equality"
  context: {}
  expression: "-999999999999 == -999999999999"
  expectedResult: true

- description: "Test #120: Intermediate large integer addition"
  context:
    base: 999999999990
  expression: "$base + 10 == 1000000000000"
  expectedResult: true

- description: "Test #121: Combine booleans with arithmetic comparison"
  context:
    age: 18
  expression: "($age >= 18) && (true == true)"
  expectedResult: true

- description: "Test #122: Combine string comparisons and booleans"
  context:
    city: "London"
  expression: "($city == \"London\") && (\"A\" < \"B\")"
  expectedResult: true

- description: "Test #123: Nested parentheses with boolean ops"
  context:
    v1: false
    v2: true
  expression: "(($v1 && $v2) || !$v1) == true"
  expectedResult: true

- description: "Test #124: Triple nested object"
  context:
    a1:
      a2:
        a3:
          val: 123
  expression: "$a1.a2.a3.val == 123"
  expectedResult: true

- description: "Test #125: Triple nested array"
  context:
    arr3: [[[1,2],[3,4]], [[5,6],[7,8]]]
  expression: "$arr3[1][0][1] == 6"
  expectedResult: true

- description: "Test #126: Checking a string is not equal to a different string"
  context:
    greeting: "Hi"
  expression: "$greeting != \"Hello\""
  expectedResult: true

- description: "Test #127: Check boolean context is false"
  context:
    running: false
  expression: "$running == false"
  expectedResult: true

- description: "Test #128: Float vs int comparison"
  context: {}
  expression: "3.0 == 3"
  expectedResult: true

- description: "Test #129: More float vs int comparison, inequality"
  context: {}
  expression: "3.5 != 3"
  expectedResult: true

- description: "Test #130: Chained arithmetic with float and int"
  context:
    i: 5
    f: 2.0
  expression: "type.float($i + 3) / $f"
  expectedResult: 4.0

- description: "Test #131: Negative float literal comparison"
  context: {}
  expression: "-0.5 < 0"
  expectedResult: true

- description: "Test #132: Subtraction chain with floats"
  context:
    a: 10.5
    b: 2.5
    c: 1.0
  expression: "$a - $b - $c"
  expectedResult: 7.0

- description: "Test #133: AND with parenthesized comparison"
  context:
    x: 20
  expression: "( $x < 30 ) && ( 10 < 50 )"
  expectedResult: true

- description: "Test #134: OR with nested parentheses"
  context:
    a: false
    b: false
    c: true
  expression: "($a || ($b || $c))"
  expectedResult: true

- description: "Test #135: Null field in nested object, but not accessed directly"
  context:
    root:
      a: null
      b: 5
  expression: "$root.b == 5"
  expectedResult: true

- description: "Test #136: Access a different field than the null one"
  context:
    user:
      name: "Aaron"
      middle: null
  expression: "$user.name == \"Aaron\""
  expectedResult: true

- description: "Test #137: Optional chaining skipping a null branch"
  context:
    obj:
      sub: null
  expression: "$obj?.sub?.field == null"
  expectedResult: true

- description: "Test #138: Optional chaining on array index (valid) and subfield"
  context:
    data:
      arr:
        - {val: 1}
        - {val: 2}
  expression: "$data?.arr?[1]?.val == 2"
  expectedResult: true

- description: "Test #139: Mixed boolean AND numeric expression with parentheses"
  context:
    n: 5
  expression: "(true && ($n == 5))"
  expectedResult: true

- description: "Test #140: Double dot notation"
  context:
    a:
      b:
        c: 9
  expression: "$a.b.c == 9"
  expectedResult: true

- description: "Test #141: Double bracket notation"
  context:
    map:
      "some key": 42
  expression: "$map[\"some key\"] == 42"
  expectedResult: true

- description: "Test #142: Combine string relational ops and numeric equality"
  context:
    s1: "Car"
    s2: "House"
    x: 10
  expression: "($s1 < $s2) && ($x == 10)"
  expectedResult: true

- description: "Test #143: Compare two float fields in context"
  context:
    f1: 2.2
    f2: 2.2
  expression: "$f1 == $f2"
  expectedResult: true

- description: "Test #144: Compare float fields for inequality"
  context:
    f1: 1.23
    f2: 1.24
  expression: "$f1 != $f2"
  expectedResult: true

- description: "Test #145: Access second dimension in nested array context"
  context:
    matrix:
      - [1,2]
      - [3,4]
  expression: "$matrix[1][0] == 3"
  expectedResult: true

- description: "Test #146: Large float literal equality"
  context: {}
  expression: "1234567.890123 == 1234567.890123"
  expectedResult: true

- description: "Test #147: Negative float literal with exponent"
  context: {}
  expression: "-1.2E1 == -12"
  expectedResult: true

- description: "Test #148: XOR-like logic with OR/AND (just ensuring result is correct)"
  context:
    b1: true
    b2: false
  expression: "($b1 && !$b2) || (!$b1 && $b2)"
  expectedResult: true

- description: "Test #149: Check array of strings indexing"
  context:
    colors: ["Red","Green","Blue"]
  expression: "$colors[2] == \"Blue\""
  expectedResult: true

- description: "Test #150: Check numeric array from context using bracket"
  context:
    numbers: [10,20,30,40]
  expression: "$numbers[3] == 40"
  expectedResult: true

- description: "Test #151: Triple-boolean AND"
  context:
    b1: true
    b2: true
    b3: true
  expression: "$b1 && $b2 && $b3"
  expectedResult: true

- description: "Test #152: Triple-boolean OR with all false"
  context:
    b1: false
    b2: false
    b3: false
  expression: "$b1 || $b2 || $b3"
  expectedResult: false

- description: "Test #153: Checking 1 < 2 < 3 with parentheses"
  context: {}
  expression: "(1 < 2) && (2 < 3)"
  expectedResult: true

- description: "Test #154: Chained additions and subtractions"
  context:
    a: 100
    b: 20
    c: 5
  expression: "$a + $b - $c == 115"
  expectedResult: true

- description: "Test #155: (int + int) / int"
  context:
    x: 8
    y: 4
    z: 2
  expression: "($x + $y) / $z == 6"
  expectedResult: true

- description: "Test #156: (float + int) * int"
  context:
    f: 2.5
    i1: 2
    i2: 2
  expression: "($f + type.float($i1)) * type.float($i2) == 9.0"
  expectedResult: true

- description: "Test #157: (float - float) < float"
  context:
    a: 5.5
    b: 1.5
  expression: "($a - $b) < 4.2"
  expectedResult: true

- description: "Test #158: Combine string eq with bool eq"
  context:
    str: "Ok"
    flag: true
  expression: "($str == \"Ok\") && ($flag == true)"
  expectedResult: true

- description: "Test #159: Large exponent float comparison"
  context: {}
  expression: "1e6 == 1000000"
  expectedResult: true

- description: "Test #160: Negative exponent float comparison"
  context: {}
  expression: "1e-3 == 0.001"
  expectedResult: true

- description: "Test #161: Object inside object, bracket notation"
  context:
    top:
      nested:
        key: "value"
  expression: "$top['nested']['key'] == \"value\""
  expectedResult: true

- description: "Test #162: Optional chaining with array of arrays"
  context:
    matrix:
      - [1, 2]
      - [3, 4]
  expression: "$matrix?[0]?[1] == 2"
  expectedResult: true

- description: "Test #163: Optional chaining on non-null object"
  context:
    user:
      details:
        status: "active"
  expression: "$user?.details?.status == \"active\""
  expectedResult: true

- description: "Test #164: Simple comparison with parentheses"
  context:
    n: 5
  expression: "( $n == 5 )"
  expectedResult: true

- description: "Test #165: Nested parentheses with numeric ops"
  context: {}
  expression: "((1+2)*(3+4)) == 21"
  expectedResult: true

- description: "Test #166: Accessing object literal in expression"
  context: {}
  expression: "({p: 10}).p == 10"
  expectedResult: true

- description: "Test #167: Nested object literals in expression"
  context: {}
  expression: "({a: {b: 2}}).a.b == 2"
  expectedResult: true

- description: "Test #168: Large nested array literal in expression"
  context: {}
  expression: "[[1,2],[3,4],[5,6]][2][0] == 5"
  expectedResult: true

- description: "Test #169: Mixed boolean expressions with equality"
  context:
    boo: true
  expression: "( $boo == true ) && ( false == false )"
  expectedResult: true

- description: "Test #170: Another object literal with multiple keys"
  context: {}
  expression: "{one:1,two:2,three:3}.two == 2"
  expectedResult: true

- description: "Test #171: Bracket object literal key access"
  context: {}
  expression: "{'my special':42}['my special'] == 42"
  expectedResult: true

- description: "Test #172: Combining int and float in expression carefully (no library conversion!)"
  context:
    i: 3
    f: 3.0
  expression: "$i == $f"
  expectedResult: true

- description: "Test #173: Subexpression in brackets"
  context:
    arr: [0, 10, 20]
  expression: "$arr[(1+1)] == 20"
  expectedResult: true

- description: "Test #174: Compare two negative floats"
  context:
    a: -1.1
    b: -2.2
  expression: "$a > $b"
  expectedResult: true

- description: "Test #175: 0.0 float equality"
  context:
    zero: 0.0
  expression: "$zero == 0"
  expectedResult: true

- description: "Test #176: Nested object with array, retrieve array element"
  context:
    top:
      arr: ["x","y","z"]
  expression: "$top.arr[1] == \"y\""
  expectedResult: true

- description: "Test #177: Optional chaining array index on valid array"
  context:
    data:
      items: [100, 200]
  expression: "$data?.items?[0] == 100"
  expectedResult: true

- description: "Test #178: Not operator on comparison"
  context:
    x: 10
  expression: "!( $x == 5 )"
  expectedResult: true

- description: "Test #179: Not operator on a boolean context"
  context:
    b: false
  expression: "!$b"
  expectedResult: true

- description: "Test #180: Double NOT operator"
  context:
    val: true
  expression: "!!$val"
  expectedResult: true

- description: "Test #181: Complex parentheses with OR and AND"
  context:
    c1: false
    c2: true
    c3: true
  expression: "( ($c1 && $c2) || $c3 )"
  expectedResult: true

- description: "Test #182: Arithmetic with three float references"
  context:
    f1: 1.1
    f2: 2.2
    f3: 3.3
  expression: "$f1 + $f2 + $f3"
  expectedResult: 6.6

- description: "Test #183: Negative float from context"
  context:
    val: -4.5
  expression: "$val == -4.5"
  expectedResult: true

- description: "Test #184: Compare float with integer context"
  context:
    intVal: 5
  expression: "5.0 == $intVal"
  expectedResult: true

- description: "Test #185: Check boolean is false via parentheses"
  context:
    check: false
  expression: "($check == false)"
  expectedResult: true

- description: "Test #186: Triple OR all true"
  context:
    a: true
    b: true
    c: true
  expression: "$a || $b || $c"
  expectedResult: true

- description: "Test #187: Checking a nested object via bracket notation"
  context:
    nest:
      sub:
        "sub-key": 123
  expression: "$nest['sub']['sub-key'] == 123"
  expectedResult: true

- description: "Test #188: Inline nested array literal, multi-level index"
  context: {}
  expression: "[[10],[[20,30]]][1][0][0] == 20"
  expectedResult: true

- description: "Test #189: Arithmetic: multiply then add"
  context:
    base: 5
  expression: "$base * 2 + 1 == 11"
  expectedResult: true

- description: "Test #190: Sub and add chain with parentheses"
  context:
    n: 10
  expression: "($n - 2) + 5 == 13"
  expectedResult: true

- description: "Test #191: Compare same field with itself"
  context:
    val: 55
  expression: "$val == $val"
  expectedResult: true

- description: "Test #192: Compare string field with itself"
  context:
    txt: "Hello"
  expression: "$txt == $txt"
  expectedResult: true

- description: "Test #193: Optional chaining on an existing array index"
  context:
    arr: [7,8,9]
  expression: "$arr?[2] == 9"
  expectedResult: true

- description: "Test #194: Deeply nested optional chaining, all present"
  context:
    root:
      level1:
        level2:
          val: 999
  expression: "$root?.level1?.level2?.val == 999"
  expectedResult: true

- description: "Test #195: Object literal in parentheses, field check"
  context: {}
  expression: "({k: 1}).k == 1"
  expectedResult: true

- description: "Test #196: More nested object literal in parentheses"
  context: {}
  expression: "({outer:{inner:{x: 1}}}).outer.inner.x == 1"
  expectedResult: true

- description: "Test #197: Inline array inside inline object"
  context: {}
  expression: "{data:[1,2,3]}.data[1] == 2"
  expectedResult: true

- description: "Test #198: Boolean expression comparing numeric"
  context:
    varX: 8
  expression: "$varX < 10 && $varX > 5"
  expectedResult: true

- description: "Test #199: Complex chain of comparisons"
  context:
    w: 1
    x: 2
    y: 3
    z: 4
  expression: "($w < $x) && ($x < $y) && ($y < $z)"
  expectedResult: true

- description: "Test #200: Inline object with nested array containing object"
  context: {}
  expression: "{list:[{val:1},{val:2}]}['list'][1].val == 2"
  expectedResult: true

- description: "Test #201: Optional chaining on inline object (present field)"
  context: {}
  expression: "{inner:{val:10}}?.inner?.val == 10"
  expectedResult: true

- description: "Test #202: Optional chaining array literal (present index)"
  context: {}
  expression: "[5,6,7]?[2] == 7"
  expectedResult: true

- description: "Test #203: Not operator on a comparison with context"
  context:
    a: 3
    b: 4
  expression: "NOT ($a >= $b)"
  expectedResult: true

- description: "Test #204: Symbolic ! on a sub-comparison"
  context:
    a: 5
    b: 5
  expression: "!( $a != $b )"
  expectedResult: true

- description: "Test #205: Add, multiply, compare"
  context:
    p: 4
    q: 5
  expression: "($p + 1) * $q == 25"
  expectedResult: true

- description: "Test #206: Dot notation after bracket notation"
  context:
    obj:
      items:
        - {value: 10}
        - {value: 20}
  expression: "$obj.items[0].value == 10"
  expectedResult: true

- description: "Test #207: Mixed numeric chain"
  context:
    a: 2
    b: 4.0
    c: 1
  expression: "(type.float($a) * $b) - type.float($c) == 7.0"
  expectedResult: true

- description: "Test #208: Unary minus on bracket expression"
  context:
    arr: [10, 20]
  expression: "-$arr[0] == -10"
  expectedResult: true

- description: "Test #209: Double optional chaining on array"
  context:
    outerArr:
      - [5,6]
      - [7,8]
  expression: "$outerArr?[1]?[0] == 7"
  expectedResult: true

- description: "Test #210: Comparing two boolean fields from context"
  context:
    b1: true
    b2: true
  expression: "$b1 == $b2"
  expectedResult: true

- description: "Test #211: Nested arrays with dot notation unused"
  context:
    nested: 123
  expression: "123 == $nested"
  expectedResult: true

- description: "Test #212: Triple nested arrays inline"
  context: {}
  expression: "[[[1],[2]],[[3],[4]]][1][0][0] == 3"
  expectedResult: true

- description: "Test #213: Check boolean false with parentheses"
  context:
    flag: false
  expression: "( $flag ) == false"
  expectedResult: true

- description: "Test #214: Compare string literal to context with bracket notation"
  context:
    data:
      keyName: "alpha"
  expression: "$data['keyName'] == \"alpha\""
  expectedResult: true

- description: "Test #215: Nested optional chaining on 3-level object"
  context:
    triple:
      sub1:
        sub2:
          val: 77
  expression: "$triple?.sub1?.sub2?.val == 77"
  expectedResult: true

- description: "Test #216: Large negative float equality"
  context: {}
  expression: "-12345.6789 == -12345.6789"
  expectedResult: true

- description: "Test #217: Check array of boolean context"
  context:
    bools: [true, false, true]
  expression: "$bools[1] == false"
  expectedResult: true

- description: "Test #218: Compare float literal with context float"
  context:
    f: 0.001
  expression: "1e-3 == $f"
  expectedResult: true

- description: "Test #219: Chained optional array index with object inside"
  context:
    items:
      - { info: "A" }
      - { info: "B" }
  expression: "$items?[1]?.info == \"B\""
  expectedResult: true

- description: "Test #220: Nested parentheses with multiple comparisons"
  context:
    val: 10
  expression: "( ($val > 0) && ($val < 20) )"
  expectedResult: true

- description: "Test #221: Compare string < context string"
  context:
    sA: "Alpha"
    sB: "Beta"
  expression: "$sA < $sB"
  expectedResult: true

- description: "Test #222: Compare string > context string"
  context:
    one: "Hello"
    two: "Hallo"
  expression: "$one > $two"
  expectedResult: true

- description: "Test #223: Full boolean chain"
  context:
    b1: true
    b2: false
    b3: true
  expression: "$b1 && $b3 || $b2"
  expectedResult: true

- description: "Test #224: Not of a multi-comparison"
  context:
    a: 1
    b: 2
    c: 3
  expression: "!(($a < $b) && ($b < $c))"
  expectedResult: false

- description: "Test #225: Null check inside parentheses"
  context:
    item: null
  expression: "( $item == null )"
  expectedResult: true

- description: "Test #226: Non-null check inside parentheses"
  context:
    item: 7
  expression: "( $item != null )"
  expectedResult: true

- description: "Test #227: Compare negative int to positive int"
  context:
    neg: -5
    pos: 1
  expression: "$neg < $pos"
  expectedResult: true

- description: "Test #228: Compare negative float to negative float"
  context:
    f1: -3.3
    f2: -3.4
  expression: "$f1 > $f2"
  expectedResult: true

- description: "Test #229: Object literal with bool field"
  context: {}
  expression: "{active:true}.active == true"
  expectedResult: true

- description: "Test #230: Object literal with null field"
  context: {}
  expression: "{val:null}.val == null"
  expectedResult: true

- description: "Test #231: Array literal with null inside"
  context: {}
  expression: "[1,null,3][0] == 1"
  expectedResult: true

- description: "Test #232: Check second element in array with null inside"
  context: {}
  expression: "[1,null,3][1] == null"
  expectedResult: true

- description: "Test #233: Optional chaining on inline object with null field"
  context: {}
  expression: "{sub:null}?.sub == null"
  expectedResult: true

- description: "Test #234: Optional chaining on inline array with null element"
  context: {}
  expression: "[10,null]?[1] == null"
  expectedResult: true

- description: "Test #235: Boolean equality with parentheses"
  context:
    check: true
  expression: "( $check ) == true"
  expectedResult: true

- description: "Test #236: Double unary minus on float"
  context:
    val: 3.14
  expression: "-(-$val)"
  expectedResult: 3.14

- description: "Test #237: Checking arithmetic inside optional chaining object"
  context:
    embed:
      obj:
        x: 2
        y: 3
  expression: "$embed?.obj?.x + $embed?.obj?.y == 5"
  expectedResult: true

- description: "Test #238: Combine multiple booleans from context with AND"
  context:
    bA: true
    bB: true
    bC: true
  expression: "$bA && $bB && $bC"
  expectedResult: true

- description: "Test #239: Combine multiple booleans from context with OR"
  context:
    bA: false
    bB: false
    bC: true
  expression: "$bA || $bB || $bC"
  expectedResult: true

- description: "Test #240: Mixed boolean ops with explicit parentheses"
  context:
    b1: true
    b2: false
    b3: true
  expression: "($b1 && $b3) || ($b2 && $b3)"
  expectedResult: true

- description: "Test #241: Optional chaining on nested arrays, no missing index"
  context:
    bigArr:
      - [1,2,3]
      - [4,5,6]
  expression: "$bigArr?[1]?[2] == 6"
  expectedResult: true

- description: "Test #242: Compare two large float context fields"
  context:
    big1: 123456.789
    big2: 123456.789
  expression: "$big1 == $big2"
  expectedResult: true

- description: "Test #243: Arithmetic with zero"
  context:
    val: 10
  expression: "$val - 0 == 10"
  expectedResult: true

- description: "Test #244: Compare negative exponent float literal to context"
  context:
    small: 0.001
  expression: "1E-3 == $small"
  expectedResult: true

- description: "Test #245: Triple nested optional chaining on arrays"
  context:
    tripleArr:
      -
        -
          - 99
  expression: "$tripleArr?[0]?[0]?[0] == 99"
  expectedResult: true

- description: "Test #246: Object inside array inside object"
  context:
    outer:
      items:
        - { val: 1 }
        - { val: 2 }
  expression: "$outer.items[1].val == 2"
  expectedResult: true

- description: "Test #247: Large chain of additions in expression"
  context:
    one: 1
    two: 2
    three: 3
    four: 4
    five: 5
  expression: "$one + $two + $three + $four + $five == 15"
  expectedResult: true

- description: "Test #248: Large chain of booleans in expression"
  context:
    f1: true
    f2: true
    f3: false
    f4: true
  expression: "$f1 && $f2 && $f4 && !$f3"
  expectedResult: true

- description: "Test #249: Nested object references in arithmetic"
  context:
    data:
      first: 2
      second: 4
  expression: "($data.first * $data.second) == 8"
  expectedResult: true

- description: "Test #250: Final check - complex expression with parentheses, no library"
  context:
    x: 2
    y: 2
    b: true
  expression: "( ($x + $y) == 4 ) && ( $b || false )"
  expectedResult: true

# 250 Positive Path Test Cases Using the math.* Library
# -----------------------------------------------------
# Each test case follows the DSL's YAML format:
#  - description (string)
#  - context (object)
#  - expression (string)
#  - expectedResult (any)
#
# All of these are success-path (no error) tests demonstrating correct usage
# of math.abs, math.floor, math.sqrt, math.pow, math.round, math.ceil,
# math.sum, math.min, math.max, and math.avg. Each function has 25 tests,
# totaling 250 unique test cases.

################################################################################
# 1 - 25: math.abs
################################################################################
- description: "Math #1: math.abs with negative integer literal"
  context: {}
  expression: "math.abs(-5)"
  expectedResult: 5

- description: "Math #2: math.abs with zero literal"
  context: {}
  expression: "math.abs(0)"
  expectedResult: 0

- description: "Math #3: math.abs with positive integer literal"
  context: {}
  expression: "math.abs(7)"
  expectedResult: 7

- description: "Math #4: math.abs with negative float literal"
  context: {}
  expression: "math.abs(-3.14)"
  expectedResult: 3.14

- description: "Math #5: math.abs with positive float literal"
  context: {}
  expression: "math.abs(2.718)"
  expectedResult: 2.718

- description: "Math #6: math.abs with context integer"
  context:
    val: -42
  expression: "math.abs($val)"
  expectedResult: 42

- description: "Math #7: math.abs with context float"
  context:
    fval: -0.5
  expression: "math.abs($fval)"
  expectedResult: 0.5

- description: "Math #8: math.abs on small expression"
  context: {}
  expression: "math.abs(1 - 3)"
  expectedResult: 2

- description: "Math #9: math.abs on float expression"
  context: {}
  expression: "math.abs(1.5 - 3.0)"
  expectedResult: 1.5

- description: "Math #10: math.abs on integer from context array"
  context:
    arr: [ -100, 200 ]
  expression: "math.abs($arr[0])"
  expectedResult: 100

- description: "Math #11: math.abs on result of nested expression"
  context: {}
  expression: "math.abs((2*2) - 10)"
  expectedResult: 6

- description: "Math #12: math.abs with large negative integer"
  context: {}
  expression: "math.abs(-999999999999)"
  expectedResult: 999999999999

- description: "Math #13: math.abs with large positive integer"
  context: {}
  expression: "math.abs(888888888888)"
  expectedResult: 888888888888

- description: "Math #14: math.abs on multiplication result"
  context: {}
  expression: "math.abs(-4 * 5)"
  expectedResult: 20

- description: "Math #15: math.abs with context negative float"
  context:
    x: -3.999
  expression: "math.abs($x)"
  expectedResult: 3.999

- description: "Math #16: math.abs on bracket expression"
  context:
    nums: [ 7, -9, 11 ]
  expression: "math.abs($nums[1])"
  expectedResult: 9

- description: "Math #17: math.abs with parentheses around literal"
  context: {}
  expression: "math.abs((-12))"
  expectedResult: 12

- description: "Math #18: math.abs of negative exponent float"
  context: {}
  expression: "math.abs(-1.2E2)"
  expectedResult: 120.0

- description: "Math #19: math.abs of small negative float"
  context: {}
  expression: "math.abs(-0.0001)"
  expectedResult: 0.0001

- description: "Math #20: math.abs with unary minus on context"
  context:
    val: 10
  expression: "math.abs(-$val)"
  expectedResult: 10

- description: "Math #21: math.abs on result of division"
  context: {}
  expression: "math.abs(10 / -2)"
  expectedResult: 5

- description: "Math #22: math.abs on subexpression in parentheses"
  context:
    a: 5
    b: 9
  expression: "math.abs(($a - $b) * 2)"
  expectedResult: 8

- description: "Math #23: math.abs on float from subexpression"
  context:
    f1: 5.5
    f2: 10.1
  expression: "math.abs($f1 - $f2)"
  expectedResult: 4.6

- description: "Math #24: math.abs zero from subexpression"
  context:
    n: 4
  expression: "math.abs($n - 4)"
  expectedResult: 0

- description: "Math #25: math.abs around an already positive number"
  context:
    val: 33
  expression: "math.abs($val)"
  expectedResult: 33


################################################################################
# 26 - 50: math.floor
################################################################################
- description: "Math #26: math.floor on positive float literal"
  context: {}
  expression: "math.floor(3.99)"
  expectedResult: 3

- description: "Math #27: math.floor on negative float literal"
  context: {}
  expression: "math.floor(-1.2)"
  expectedResult: -2

- description: "Math #28: math.floor on integer literal"
  context: {}
  expression: "math.floor(5)"
  expectedResult: 5

- description: "Math #29: math.floor on zero float"
  context: {}
  expression: "math.floor(0.0)"
  expectedResult: 0

- description: "Math #30: math.floor on positive exponent float"
  context: {}
  expression: "math.floor(1.23E1)"
  expectedResult: 12

- description: "Math #31: math.floor with context float"
  context:
    val: 3.14
  expression: "math.floor($val)"
  expectedResult: 3

- description: "Math #32: math.floor with negative context float"
  context:
    val: -2.7
  expression: "math.floor($val)"
  expectedResult: -3

- description: "Math #33: math.floor on subexpression"
  context: {}
  expression: "math.floor(5.6 + 2.2)"
  expectedResult: 7

- description: "Math #34: math.floor after multiplication"
  context:
    f1: 1.5
    f2: 2.5
  expression: "math.floor($f1 * $f2)"
  expectedResult: 3

- description: "Math #35: math.floor on bracket array element"
  context:
    arr: [3.99, 4.1]
  expression: "math.floor($arr[0])"
  expectedResult: 3

- description: "Math #36: math.floor large positive float"
  context: {}
  expression: "math.floor(12345.6789)"
  expectedResult: 12345

- description: "Math #37: math.floor large negative float"
  context: {}
  expression: "math.floor(-999.999)"
  expectedResult: -1000

- description: "Math #38: math.floor zero from expression"
  context: {}
  expression: "math.floor(2.0 - 2.0)"
  expectedResult: 0

- description: "Math #39: math.floor with exponent negative float"
  context: {}
  expression: "math.floor(3.456E-1)"
  expectedResult: 0

- description: "Math #40: math.floor on subexpression with parentheses"
  context:
    x: 10.8
    y: 5.3
  expression: "math.floor(($x - $y) * 2.0)"
  expectedResult: 11

- description: "Math #41: math.floor round borderline positive"
  context: {}
  expression: "math.floor(5.0000001)"
  expectedResult: 5

- description: "Math #42: math.floor round borderline negative"
  context: {}
  expression: "math.floor(-5.0000001)"
  expectedResult: -6

- description: "Math #43: math.floor subexpression negative result"
  context: {}
  expression: "math.floor(2.3 - 5.7)"
  expectedResult: -4

- description: "Math #44: math.floor of fraction from division"
  context: {}
  expression: "math.floor(7.0 / 2.0)"
  expectedResult: 3

- description: "Math #45: math.floor on product float"
  context:
    f1: 4.5
    f2: 2.2
  expression: "math.floor($f1 * $f2)"
  expectedResult: 9

- description: "Math #46: math.floor positive integer context"
  context:
    num: 8
  expression: "math.floor($num)"
  expectedResult: 8

- description: "Math #47: math.floor negative result context"
  context:
    a: 3.3
    b: 7.9
  expression: "math.floor($a - $b)"
  expectedResult: -5

- description: "Math #48: math.floor exponent float result"
  context:
    val: 1.9999e1
  expression: "math.floor($val)"
  expectedResult: 19

- description: "Math #49: math.floor bracket expression"
  context:
    data: [ 5.999, -4.1 ]
  expression: "math.floor($data[1])"
  expectedResult: -5

- description: "Math #50: math.floor on literal fraction close to next integer"
  context: {}
  expression: "math.floor(9.9999999)"
  expectedResult: 9


################################################################################
# 51 - 75: math.sqrt
################################################################################
- description: "Math #51: math.sqrt of perfect square integer"
  context: {}
  expression: "math.sqrt(16)"
  expectedResult: 4

- description: "Math #52: math.sqrt of another perfect square"
  context: {}
  expression: "math.sqrt(81)"
  expectedResult: 9

- description: "Math #53: math.sqrt on float literal"
  context: {}
  expression: "math.sqrt(2.25)"
  expectedResult: 1.5

- description: "Math #54: math.sqrt small float"
  context: {}
  expression: "math.sqrt(0.0625)"
  expectedResult: 0.25

- description: "Math #55: math.sqrt large perfect square"
  context: {}
  expression: "math.sqrt(10000)"
  expectedResult: 100

- description: "Math #56: math.sqrt with context integer"
  context:
    val: 36
  expression: "math.sqrt($val)"
  expectedResult: 6

- description: "Math #57: math.sqrt with context float"
  context:
    f: 9.0
  expression: "math.sqrt($f)"
  expectedResult: 3

- description: "Math #58: math.sqrt on subexpression"
  context: {}
  expression: "math.sqrt(4 * 9)"
  expectedResult: 6

- description: "Math #59: math.sqrt bracket reference"
  context:
    arr: [25, 0]
  expression: "math.sqrt($arr[0])"
  expectedResult: 5

- description: "Math #60: math.sqrt after division"
  context: {}
  expression: "math.sqrt(36 / 4)"
  expectedResult: 3

- description: "Math #61: math.sqrt on expression with parentheses"
  context:
    x: 2
    y: 8
  expression: "math.sqrt(($x + $y) * 4)"
  expectedResult: 6.324555320336759

- description: "Math #62: math.sqrt of 1"
  context: {}
  expression: "math.sqrt(1)"
  expectedResult: 1

- description: "Math #63: math.sqrt of 0"
  context: {}
  expression: "math.sqrt(0)"
  expectedResult: 0

- description: "Math #64: math.sqrt small decimal fraction"
  context: {}
  expression: "math.sqrt(0.0009)"
  expectedResult: 0.03

- description: "Math #65: math.sqrt on an exponent float literal"
  context: {}
  expression: "math.sqrt(1.0e2)"
  expectedResult: 10

- description: "Math #66: math.sqrt subexpression difference"
  context:
    a: 20
    b: 4
  expression: "math.sqrt($a + $b)"
  expectedResult: 4.898979485566356

- description: "Math #67: math.sqrt with parentheses around input"
  context: {}
  expression: "math.sqrt((49))"
  expectedResult: 7

- description: "Math #68: math.sqrt with float that yields fraction"
  context: {}
  expression: "math.sqrt(2)"
  expectedResult: 1.4142135623  # Approximations might vary; success path implies ~1.4142

# For clarity in a real test harness, the comparison might allow a small epsilon.
# We'll just show the approximate value to indicate the expected match.

- description: "Math #69: math.sqrt of 50.0 subexpression"
  context: {}
  expression: "math.sqrt(25.0 * 2.0)"
  expectedResult: 7.0710678118  # ~7.0711

- description: "Math #70: math.sqrt with bracket context"
  context:
    data: [ 9.0, 16.0 ]
  expression: "math.sqrt($data[1])"
  expectedResult: 4

- description: "Math #71: math.sqrt from context single float"
  context:
    val: 49.0
  expression: "math.sqrt($val)"
  expectedResult: 7

- description: "Math #72: math.sqrt partial fraction result"
  context:
    x: 8.41
  expression: "math.sqrt($x)"
  expectedResult: 2.9

- description: "Math #73: math.sqrt bigger float"
  context: {}
  expression: "math.sqrt(225.0)"
  expectedResult: 15

- description: "Math #74: math.sqrt of 6.25"
  context: {}
  expression: "math.sqrt(6.25)"
  expectedResult: 2.5

- description: "Math #75: math.sqrt small subexpression"
  context: {}
  expression: "math.sqrt(0.09 * 1.0)"
  expectedResult: 0.3


################################################################################
# 76 - 100: math.pow
################################################################################
- description: "Math #76: math.pow small integer exponent"
  context: {}
  expression: "math.pow(2, 3)"
  expectedResult: 8

- description: "Math #77: math.pow zero power integer"
  context: {}
  expression: "math.pow(5, 0)"
  expectedResult: 1

- description: "Math #78: math.pow base 10 exponent 2"
  context: {}
  expression: "math.pow(10, 2)"
  expectedResult: 100

- description: "Math #79: math.pow negative base integer exponent"
  context: {}
  expression: "math.pow(-2, 3)"
  expectedResult: -8

- description: "Math #80: math.pow negative base even exponent"
  context: {}
  expression: "math.pow(-3, 2)"
  expectedResult: 9

- description: "Math #81: math.pow float base integer exponent"
  context: {}
  expression: "math.pow(1.5, 2)"
  expectedResult: 2.25

- description: "Math #82: math.pow integer base float exponent"
  context: {}
  expression: "math.pow(9, 0.5)"
  expectedResult: 3

- description: "Math #83: math.pow float base float exponent"
  context: {}
  expression: "math.pow(2.0, 3.5)"
  expectedResult: 11.313708499  # ~ 2^(3.5)

- description: "Math #84: math.pow exponent negative"
  context: {}
  expression: "math.pow(2, -1)"
  expectedResult: 0.5

- description: "Math #85: math.pow with context"
  context:
    base: 4
    exp: 3
  expression: "math.pow($base, $exp)"
  expectedResult: 64

- description: "Math #86: math.pow subexpression base"
  context: {}
  expression: "math.pow((2+3), 2)"
  expectedResult: 25

- description: "Math #87: math.pow subexpression exponent"
  context:
    e: 2
  expression: "math.pow(5, $e)"
  expectedResult: 25

- description: "Math #88: math.pow with bracket context"
  context:
    arr: [2, 4]
  expression: "math.pow($arr[0], $arr[1])"
  expectedResult: 16

- description: "Math #89: math.pow large exponent"
  context: {}
  expression: "math.pow(2, 10)"
  expectedResult: 1024

- description: "Math #90: math.pow negative exponent float result"
  context: {}
  expression: "math.pow(10, -2)"
  expectedResult: 0.01

- description: "Math #91: math.pow fraction base, fraction exponent"
  context: {}
  expression: "math.pow(0.25, 0.5)"
  expectedResult: 0.5

- description: "Math #92: math.pow big integer base small exponent"
  context: {}
  expression: "math.pow(1000, 1)"
  expectedResult: 1000

- description: "Math #93: math.pow zero base positive exponent"
  context: {}
  expression: "math.pow(0, 5)"
  expectedResult: 0

- description: "Math #94: math.pow multiply in exponent"
  context:
    e: 1.0
  expression: "math.pow(2, $e * 3.0)"
  expectedResult: 8

- description: "Math #95: math.pow subexpression both arguments"
  context:
    x: 2
    y: 4
  expression: "math.pow($x + 1, $y - 1)"
  expectedResult: 27

- description: "Math #96: math.pow large float exponent"
  context:
    exponent: 3.0
  expression: "math.pow(1.1, $exponent)"
  expectedResult: 1.331

- description: "Math #97: math.pow negative float base, integer exponent (odd)"
  context: {}
  expression: "math.pow(-1.5, 3)"
  expectedResult: -3.375

- description: "Math #98: math.pow negative float base, integer exponent (even)"
  context: {}
  expression: "math.pow(-2.0, 2)"
  expectedResult: 4

- description: "Math #99: math.pow subexpression in parentheses"
  context: {}
  expression: "math.pow((3+2), 2)"
  expectedResult: 25

- description: "Math #100: math.pow exponent zero with float base"
  context: {}
  expression: "math.pow(2.75, 0)"
  expectedResult: 1


################################################################################
# 101 - 125: math.round
################################################################################
- description: "Math #101: math.round on positive float .49"
  context: {}
  expression: "math.round(3.49)"
  expectedResult: 3

- description: "Math #102: math.round on positive float .50"
  context: {}
  expression: "math.round(2.50)"
  expectedResult: 3

- description: "Math #103: math.round on negative float .49"
  context: {}
  expression: "math.round(-1.49)"
  expectedResult: -1

- description: "Math #104: math.round on negative float .50"
  context: {}
  expression: "math.round(-2.5)"
  expectedResult: -3

- description: "Math #105: math.round integer literal"
  context: {}
  expression: "math.round(5)"
  expectedResult: 5

- description: "Math #106: math.round float exponent"
  context: {}
  expression: "math.round(1.2e1)"
  expectedResult: 12

- description: "Math #107: math.round small positive float"
  context: {}
  expression: "math.round(0.4)"
  expectedResult: 0

- description: "Math #108: math.round borderline .9999"
  context: {}
  expression: "math.round(3.9999)"
  expectedResult: 4

- description: "Math #109: math.round big negative decimal"
  context: {}
  expression: "math.round(-99.9)"
  expectedResult: -100

- description: "Math #110: math.round with context float"
  context:
    val: 2.2
  expression: "math.round($val)"
  expectedResult: 2

- description: "Math #111: math.round bracket array"
  context:
    arr: [ 3.2, 4.7 ]
  expression: "math.round($arr[1])"
  expectedResult: 5

- description: "Math #112: math.round subexpression sum"
  context: {}
  expression: "math.round(1.3 + 2.4)"
  expectedResult: 4

- description: "Math #113: math.round subexpression difference"
  context: {}
  expression: "math.round(5.9 - 1.4)"
  expectedResult: 5

- description: "Math #114: math.round product"
  context:
    a: 2.6
    b: 2.6
  expression: "math.round($a * $b)"
  expectedResult: 7  # 2.6*2.6=6.76 => round=7

- description: "Math #115: math.round division"
  context: {}
  expression: "math.round(10.0 / 4.0)"
  expectedResult: 3  # 2.5 => round to 3

- description: "Math #116: math.round negative borderline"
  context: {}
  expression: "math.round(-3.9999)"
  expectedResult: -4

- description: "Math #117: math.round zero from expression"
  context:
    x: 5.4
    y: 5.4
  expression: "math.round($x - $y)"
  expectedResult: 0

- description: "Math #118: math.round no decimal"
  context: {}
  expression: "math.round(9.0)"
  expectedResult: 9

- description: "Math #119: math.round with parentheses"
  context: {}
  expression: "math.round((4.51))"
  expectedResult: 5

- description: "Math #120: math.round with negative exponent float"
  context: {}
  expression: "math.round(2.49e-1)"
  expectedResult: 0  # => 0.249 => round(0.249)=0

- description: "Math #121: math.round exponent > 1"
  context: {}
  expression: "math.round(3.25e1)"
  expectedResult: 33

- description: "Math #122: math.round big positive float"
  context: {}
  expression: "math.round(12345.6789)"
  expectedResult: 12346

- description: "Math #123: math.round big negative float"
  context: {}
  expression: "math.round(-54321.3214)"
  expectedResult: -54321

- description: "Math #124: math.round bracket context sub"
  context:
    data: [ 1.1, 2.9 ]
  expression: "math.round($data[1])"
  expectedResult: 3

- description: "Math #125: math.round subexpression multiple ops"
  context:
    a: 1.4
    b: 1.4
    c: 1.4
  expression: "math.round($a + $b + $c)"
  expectedResult: 4  # 1.4+1.4+1.4=4.2 => round=4


################################################################################
# 126 - 150: math.ceil
################################################################################
- description: "Math #126: math.ceil on positive float .01"
  context: {}
  expression: "math.ceil(3.01)"
  expectedResult: 4

- description: "Math #127: math.ceil on positive float .99"
  context: {}
  expression: "math.ceil(2.99)"
  expectedResult: 3

- description: "Math #128: math.ceil on negative float .01"
  context: {}
  expression: "math.ceil(-1.01)"
  expectedResult: -1

- description: "Math #129: math.ceil on negative float .99"
  context: {}
  expression: "math.ceil(-3.99)"
  expectedResult: -3

- description: "Math #130: math.ceil integer literal"
  context: {}
  expression: "math.ceil(10)"
  expectedResult: 10

- description: "Math #131: math.ceil zero float"
  context: {}
  expression: "math.ceil(0.0)"
  expectedResult: 0

- description: "Math #132: math.ceil small fraction < 1"
  context: {}
  expression: "math.ceil(0.1)"
  expectedResult: 1

- description: "Math #133: math.ceil negative fraction -0.4"
  context: {}
  expression: "math.ceil(-0.4)"
  expectedResult: 0

- description: "Math #134: math.ceil exponent float"
  context: {}
  expression: "math.ceil(1.23e1)"
  expectedResult: 13

- description: "Math #135: math.ceil with context float"
  context:
    val: 2.01
  expression: "math.ceil($val)"
  expectedResult: 3

- description: "Math #136: math.ceil bracket array float"
  context:
    arr: [ -2.2, 3.9 ]
  expression: "math.ceil($arr[1])"
  expectedResult: 4

- description: "Math #137: math.ceil negative bracket array"
  context:
    arr: [ -3.7 ]
  expression: "math.ceil($arr[0])"
  expectedResult: -3

- description: "Math #138: math.ceil subexpression sum"
  context: {}
  expression: "math.ceil(5.1 + 3.2)"
  expectedResult: 9

- description: "Math #139: math.ceil subexpression difference negative"
  context: {}
  expression: "math.ceil(-5.1 + 1.0)"
  expectedResult: -4

- description: "Math #140: math.ceil product"
  context:
    a: 1.1
    b: 3.0
  expression: "math.ceil($a * $b)"
  expectedResult: 4  # 3.3 => ceil=4

- description: "Math #141: math.ceil division"
  context: {}
  expression: "math.ceil(7.0 / 2.0)"
  expectedResult: 4

- description: "Math #142: math.ceil borderline .0001"
  context: {}
  expression: "math.ceil(2.0001)"
  expectedResult: 3

- description: "Math #143: math.ceil borderline negative"
  context: {}
  expression: "math.ceil(-2.0001)"
  expectedResult: -2

- description: "Math #144: math.ceil subexpression parentheses"
  context:
    x: 9.7
    y: 0.3
  expression: "math.ceil(($x + $y))"
  expectedResult: 10

- description: "Math #145: math.ceil subexpression bigger negative"
  context:
    a: -3.4
    b: -2.2
  expression: "math.ceil($a + $b)"
  expectedResult: -5  # sum ~ -5.6 => ceil=-5

- description: "Math #146: math.ceil of exponent float"
  context: {}
  expression: "math.ceil(2.999e0)"
  expectedResult: 3

- description: "Math #147: math.ceil large float"
  context: {}
  expression: "math.ceil(12345.00001)"
  expectedResult: 12346

- description: "Math #148: math.ceil negative large float"
  context: {}
  expression: "math.ceil(-9999.99)"
  expectedResult: -9999

- description: "Math #149: math.ceil from context integer"
  context:
    num: 5
  expression: "math.ceil($num)"
  expectedResult: 5

- description: "Math #150: math.ceil subexpression multiple steps"
  context:
    f1: 2.3
    f2: 3.7
    f3: 1.1
  expression: "math.ceil($f1 + $f2 - $f3)"
  expectedResult: 5  # => 2.3+3.7=6.0 => 6.0-1.1=4.9 => ceil=5


################################################################################
# 151 - 175: math.sum
################################################################################
# Recall: math.sum(arr[, subfield, defaultVal]) => numeric

- description: "Math #151: math.sum of integer array"
  context:
    arr: [1, 2, 3]
  expression: "math.sum($arr)"
  expectedResult: 6

- description: "Math #152: math.sum of float array"
  context:
    floats: [1.5, 2.5, 3.0]
  expression: "math.sum($floats)"
  expectedResult: 7.0

- description: "Math #153: math.sum single element array"
  context:
    single: [10]
  expression: "math.sum($single)"
  expectedResult: 10


- description: "Math #155: math.sum array of negative ints"
  context:
    negs: [-1, -2, -3]
  expression: "math.sum($negs)"
  expectedResult: -6

- description: "Math #156: math.sum array of negative floats"
  context:
    f: [-1.5, -2.0, -0.5]
  expression: "math.sum($f)"
  expectedResult: -4.0

- description: "Math #157: math.sum subfield usage"
  context:
    items:
      - { price: 10 }
      - { price: 20 }
      - { price: 5 }
  expression: "math.sum($items, 'price')"
  expectedResult: 35

- description: "Math #158: math.sum subfield usage with defaultVal on non-empty"
  context:
    stuff:
      - { val: 2 }
      - { val: 3 }
  expression: "math.sum($stuff, 'val', 0)"
  expectedResult: 5

- description: "Math #159: math.sum subfield float usage"
  context:
    rows:
      - {x: 1.5}
      - {x: 2.5}
      - {x: 3.0}
  expression: "math.sum($rows, 'x')"
  expectedResult: 7.0

- description: "Math #160: math.sum subfield with some negative"
  context:
    data:
      - {n: -5}
      - {n: 10}
  expression: "math.sum($data, 'n')"
  expectedResult: 5

- description: "Math #161: math.sum just verifying multiple items"
  context:
    many: [10, 10, 10, 10]
  expression: "math.sum($many)"
  expectedResult: 40

- description: "Math #162: math.sum large integers"
  context:
    bigs: [1000000, 2000000, 3000000]
  expression: "math.sum($bigs)"
  expectedResult: 6000000

- description: "Math #163: math.sum large floats"
  context:
    fls: [1000.5, 2000.5]
  expression: "math.sum($fls)"
  expectedResult: 3001.0

- description: "Math #164: math.sum subfield in bracket object array"
  context:
    arr:
      - {score: 3}
      - {score: 7}
  expression: "math.sum($arr, 'score')"
  expectedResult: 10

- description: "Math #165: math.sum partial negative partial positive"
  context:
    mix: [ -10, 20, -5, 5 ]
  expression: "math.sum($mix)"
  expectedResult: 10

- description: "Math #166: math.sum subfield with all floats"
  context:
    metrics:
      - { val: 1.1 }
      - { val: 2.2 }
      - { val: 3.3 }
  expression: "math.sum($metrics, 'val')"
  expectedResult: 6.6


- description: "Math #167: math.sum array direct context"
  context:
    arrayVal: [2, 2, 6]
  expression: "math.sum($arrayVal)"
  expectedResult: 10

- description: "Math #168: math.sum subfield with defaultVal if not needed"
  context:
    ob:
      - { key: 5 }
      - { key: 5 }
  expression: "math.sum($ob, 'key', 0)"
  expectedResult: 10

- description: "Math #169: math.sum single negative float element"
  context:
    arr: [ -3.14 ]
  expression: "math.sum($arr)"
  expectedResult: -3.14

- description: "Math #171: math.sum subfield partial example"
  context:
    products:
      - { cost: 2.99 }
      - { cost: 3.01 }
  expression: "math.sum($products, 'cost')"
  expectedResult: 6.0

- description: "Math #173: math.sum multiple negative integers"
  context:
    vals: [-10, -20, -30]
  expression: "math.sum($vals)"
  expectedResult: -60

- description: "Math #174: math.sum large array of small numbers"
  context:
    smalls: [0.1, 0.2, 0.3, 0.4]
  expression: "math.sum($smalls)"
  expectedResult: 1.0

- description: "Math #175: math.sum subfield in deeper object array"
  context:
    data:
      items:
        - { price: 1 }
        - { price: 4 }
        - { price: 5 }
  expression: "math.sum($data.items, 'price')"
  expectedResult: 10


################################################################################
# 176 - 200: math.min
################################################################################
# math.min(arr[, subfield, defaultVal]) => numeric

- description: "Math #176: math.min simple int array"
  context:
    nums: [1, 2, 3]
  expression: "math.min($nums)"
  expectedResult: 1

- description: "Math #177: math.min negative ints"
  context:
    vals: [-3, -5, -1]
  expression: "math.min($vals)"
  expectedResult: -5

- description: "Math #178: math.min single-element array"
  context:
    single: [42]
  expression: "math.min($single)"
  expectedResult: 42

- description: "Math #179: math.min float array"
  context:
    floats: [1.1, 0.9, 2.2]
  expression: "math.min($floats)"
  expectedResult: 0.9

- description: "Math #181: math.min subfield usage"
  context:
    items:
      - { price: 10 }
      - { price: 20 }
      - { price: 5 }
  expression: "math.min($items, 'price')"
  expectedResult: 5

- description: "Math #182: math.min subfield float usage"
  context:
    rows:
      - {x: 3.5}
      - {x: 2.1}
      - {x: 4.0}
  expression: "math.min($rows, 'x')"
  expectedResult: 2.1

- description: "Math #183: math.min negative float array"
  context:
    arr: [-1.1, -2.2, -3.3]
  expression: "math.min($arr)"
  expectedResult: -3.3

- description: "Math #184: math.min array with mix of positive and negative"
  context:
    mix: [-5, 10, 0]
  expression: "math.min($mix)"
  expectedResult: -5

- description: "Math #185: math.min subfield with negative values"
  context:
    data:
      - { val: -10 }
      - { val: -3 }
      - { val: -20 }
  expression: "math.min($data, 'val')"
  expectedResult: -20

- description: "Math #186: math.min subfield using defaultVal in empty array"
  context: {}
  expression: "math.min([], 'score', 999)"
  expectedResult: 999

- description: "Math #187: math.min large integer array"
  context:
    bigs: [1000, 2000, 500]
  expression: "math.min($bigs)"
  expectedResult: 500

- description: "Math #188: math.min large float array"
  context:
    fls: [10.5, 2.5, 20.1]
  expression: "math.min($fls)"
  expectedResult: 2.5

- description: "Math #189: math.min single negative float element"
  context:
    arr: [-3.14]
  expression: "math.min($arr)"
  expectedResult: -3.14

- description: "Math #190: math.min subfield partial usage"
  context:
    objects:
      - { key: 10 }
      - { key: 0 }
      - { key: 5 }
  expression: "math.min($objects, 'key')"
  expectedResult: 0

- description: "Math #191: math.min from context array referencing bracket"
  context:
    arr: [5, -1, 3]
  expression: "math.min($arr)"
  expectedResult: -1


- description: "Math #193: math.min multiple negative floats"
  context:
    negativeFloats: [-1.5, -2.5, -2.6]
  expression: "math.min($negativeFloats)"
  expectedResult: -2.6

- description: "Math #195: math.min subfield all positive"
  context:
    arr:
      - { n: 10 }
      - { n: 20 }
  expression: "math.min($arr, 'n')"
  expectedResult: 10

- description: "Math #196: math.min subfield partial negative partial positive"
  context:
    arr:
      - { cost: -5 }
      - { cost: 10 }
  expression: "math.min($arr, 'cost')"
  expectedResult: -5

- description: "Math #197: math.min big negative among positives"
  context:
    arr: [ 999, 1000, -10000 ]
  expression: "math.min($arr)"
  expectedResult: -10000

- description: "Math #199: math.min float array with small numbers"
  context:
    smalls: [0.1, 0.01, 0.001]
  expression: "math.min($smalls)"
  expectedResult: 0.001

- description: "Math #200: math.min subfield in deeper object array"
  context:
    data:
      items:
        - { v: 1 }
        - { v: -1 }
        - { v: 2 }
  expression: "math.min($data.items, 'v')"
  expectedResult: -1


################################################################################
# 201 - 225: math.max
################################################################################
# math.max(arr[, subfield, defaultVal]) => numeric

- description: "Math #201: math.max simple int array"
  context:
    nums: [1, 2, 3]
  expression: "math.max($nums)"
  expectedResult: 3

- description: "Math #202: math.max negative ints"
  context:
    vals: [-3, -5, -1]
  expression: "math.max($vals)"
  expectedResult: -1

- description: "Math #203: math.max single-element array"
  context:
    single: [42]
  expression: "math.max($single)"
  expectedResult: 42

- description: "Math #204: math.max float array"
  context:
    floats: [1.1, 0.9, 2.2]
  expression: "math.max($floats)"
  expectedResult: 2.2

- description: "Math #206: math.max subfield usage"
  context:
    items:
      - { cost: 10 }
      - { cost: 20 }
      - { cost: 5 }
  expression: "math.max($items, 'cost')"
  expectedResult: 20

- description: "Math #207: math.max subfield float usage"
  context:
    rows:
      - { val: 3.5 }
      - { val: 2.1 }
      - { val: 4.0 }
  expression: "math.max($rows, 'val')"
  expectedResult: 4.0

- description: "Math #208: math.max negative float array"
  context:
    arr: [-1.1, -2.2, -0.9]
  expression: "math.max($arr)"
  expectedResult: -0.9

- description: "Math #209: math.max array with mix of positive and negative"
  context:
    mix: [-5, 10, 0]
  expression: "math.max($mix)"
  expectedResult: 10

- description: "Math #210: math.max subfield with negative values"
  context:
    data:
      - { val: -10 }
      - { val: -3 }
      - { val: -20 }
  expression: "math.max($data, 'val')"
  expectedResult: -3

- description: "Math #211: math.max subfield usage with defaultVal on empty array"
  context: {}
  expression: "math.max([], 'x', -999)"
  expectedResult: -999

- description: "Math #212: math.max large integer array"
  context:
    bigs: [1000, 2000, 500]
  expression: "math.max($bigs)"
  expectedResult: 2000

- description: "Math #213: math.max large float array"
  context:
    fls: [10.5, 2.5, 20.1]
  expression: "math.max($fls)"
  expectedResult: 20.1

- description: "Math #214: math.max single negative float element"
  context:
    arr: [-3.14]
  expression: "math.max($arr)"
  expectedResult: -3.14

- description: "Math #215: math.max subfield partial usage"
  context:
    objects:
      - { key: 10 }
      - { key: 0 }
      - { key: 5 }
  expression: "math.max($objects, 'key')"
  expectedResult: 10

- description: "Math #216: math.max from context array referencing bracket"
  context:
    arr: [5, -1, 3]
  expression: "math.max($arr)"
  expectedResult: 5

- description: "Math #218: math.max multiple negative floats"
  context:
    negativeFloats: [-1.5, -2.5, -0.5]
  expression: "math.max($negativeFloats)"
  expectedResult: -0.5

- description: "Math #220: math.max subfield all positive"
  context:
    arr:
      - { n: 10 }
      - { n: 20 }
  expression: "math.max($arr, 'n')"
  expectedResult: 20

- description: "Math #221: math.max subfield partial negative partial positive"
  context:
    arr:
      - { cost: -5 }
      - { cost: 10 }
  expression: "math.max($arr, 'cost')"
  expectedResult: 10

- description: "Math #222: math.max big negative among positives"
  context:
    arr: [ 999, 1000, -10000 ]
  expression: "math.max($arr)"
  expectedResult: 1000


- description: "Math #224: math.max float array with small numbers"
  context:
    smalls: [0.1, 0.01, 0.5]
  expression: "math.max($smalls)"
  expectedResult: 0.5

- description: "Math #225: math.max subfield in deeper object array"
  context:
    data:
      items:
        - { v: 1 }
        - { v: -1 }
        - { v: 2 }
  expression: "math.max($data.items, 'v')"
  expectedResult: 2


################################################################################
# 226 - 250: math.avg
################################################################################
# math.avg(arr[, subfield, defaultVal]) => numeric

- description: "Math #226: math.avg simple int array"
  context:
    nums: [2, 4, 6]
  expression: "math.avg($nums)"
  expectedResult: 4

- description: "Math #227: math.avg negative ints"
  context:
    vals: [-3, -5, -1]
  expression: "math.avg($vals)"
  expectedResult: -3  # (-3+-5+-1)/3 = -9/3 = -3

- description: "Math #228: math.avg single-element array"
  context:
    single: [42]
  expression: "math.avg($single)"
  expectedResult: 42

- description: "Math #229: math.avg float array"
  context:
    floats: [1.0, 2.0, 3.0]
  expression: "math.avg($floats)"
  expectedResult: 2.0


- description: "Math #231: math.avg subfield usage"
  context:
    items:
      - { cost: 10 }
      - { cost: 20 }
      - { cost: 30 }
  expression: "math.avg($items, 'cost')"
  expectedResult: 20

- description: "Math #232: math.avg subfield float usage"
  context:
    rows:
      - { val: 2.0 }
      - { val: 4.0 }
      - { val: 6.0 }
  expression: "math.avg($rows, 'val')"
  expectedResult: 4.0

- description: "Math #233: math.avg negative float array"
  context:
    arr: [-1.5, -2.5, -3.5]
  expression: "math.avg($arr)"
  expectedResult: -2.5

- description: "Math #234: math.avg array with mix of positive and negative"
  context:
    mix: [-5, 5, 15]
  expression: "math.avg($mix)"
  expectedResult: 5  # (-5+5+15)=15 => 15/3=5

- description: "Math #235: math.avg subfield with negative values"
  context:
    data:
      - { num: -10 }
      - { num: -2 }
  expression: "math.avg($data, 'num')"
  expectedResult: -6  # average => -12/2=-6

- description: "Math #236: math.avg subfield usage with defaultVal not triggered"
  context:
    arr:
      - { x: 5 }
      - { x: 15 }
  expression: "math.avg($arr, 'x', 1000)"
  expectedResult: 10

- description: "Math #237: math.avg large integer array"
  context:
    bigs: [100, 200, 300]
  expression: "math.avg($bigs)"
  expectedResult: 200

- description: "Math #238: math.avg large float array"
  context:
    fls: [10.5, 20.5, 30.0]
  expression: "math.avg($fls)"
  expectedResult: 20.3333333333  # ~61/3 => 20.3333

- description: "Math #239: math.avg single negative float element"
  context:
    arr: [-3.14]
  expression: "math.avg($arr)"
  expectedResult: -3.14

- description: "Math #240: math.avg subfield partial usage"
  context:
    objects:
      - { key: 10 }
      - { key: 0 }
      - { key: 5 }
  expression: "math.avg($objects, 'key')"
  expectedResult: 5  # (10+0+5)=15 =>15/3=5

- description: "Math #241: math.avg from context array referencing bracket"
  context:
    arr: [5, -1, 3]
  expression: "math.avg($arr)"
  expectedResult: 2.333333333333333


- description: "Math #243: math.avg multiple negative floats"
  context:
    negativeFloats: [-1.5, -2.5, -0.5]
  expression: "math.avg($negativeFloats)"
  expectedResult: -1.5  # => -4.5/3=-1.5


- description: "Math #245: math.avg subfield all positive"
  context:
    arr:
      - { n: 10 }
      - { n: 20 }
  expression: "math.avg($arr, 'n')"
  expectedResult: 15  # => (10+20)/2=15

- description: "Math #246: math.avg subfield partial negative partial positive"
  context:
    arr:
      - { cost: -10 }
      - { cost: 0 }
      - { cost: 10 }
  expression: "math.avg($arr, 'cost')"
  expectedResult: 0  # => -10+0+10=0 => /3=0

- description: "Math #247: math.avg big negative among positives"
  context:
    arr: [1000, -1000]
  expression: "math.avg($arr)"
  expectedResult: 0


- description: "Math #249: math.avg float array with small numbers"
  context:
    smalls: [0.1, 0.01, 0.29]
  expression: "math.avg($smalls)"
  expectedResult: 0.1333333333  # => (0.1+0.01+0.29)=0.4 =>0.4/3=0.1333

- description: "Math #250: math.avg subfield in deeper object array"
  context:
    data:
      items:
        - { v: 1 }
        - { v: 3 }
        - { v: 5 }
  expression: "math.avg($data.items, 'v')"
  expectedResult: 3  # =>(1+3+5)=9 =>9/3=3

# 250 Positive Path Test Cases Using the string.* Library

################################################################################
# string.toLower (20 Test Cases)
################################################################################
- description: "String.toLower #1: Lowercase fully uppercase literal"
  context: {}
  expression: "string.toLower(\"HELLO\")"
  expectedResult: "hello"

- description: "String.toLower #2: Lowercase mixed case literal"
  context: {}
  expression: "string.toLower(\"HeLLo\")"
  expectedResult: "hello"

- description: "String.toLower #3: Lowercase context string"
  context:
    s: "WORLD"
  expression: "string.toLower($s)"
  expectedResult: "world"

- description: "String.toLower #4: Lowercase string with numbers"
  context: {}
  expression: "string.toLower(\"ABC123\")"
  expectedResult: "abc123"

- description: "String.toLower #5: Lowercase string with symbols"
  context: {}
  expression: "string.toLower(\"Hello-World!\")"
  expectedResult: "hello-world!"

- description: "String.toLower #6: Lowercase string with whitespace"
  context: {}
  expression: "string.toLower(\"  MIXED Case \")"
  expectedResult: "  mixed case "

- description: "String.toLower #7: Lowercase string with unicode"
  context: {}
  expression: "string.toLower(\"ÃœBER\")"
  expectedResult: "Ã¼ber"

- description: "String.toLower #8: Lowercase already lowercase"
  context: {}
  expression: "string.toLower(\"test\")"
  expectedResult: "test"

- description: "String.toLower #9: Lowercase empty string"
  context: {}
  expression: "string.toLower(\"\")"
  expectedResult: ""

- description: "String.toLower #10: Lowercase string with punctuation"
  context: {}
  expression: "string.toLower(\"HELLO, WORLD!\")"
  expectedResult: "hello, world!"

- description: "String.toLower #11: Lowercase alphanumeric mix"
  context: {}
  expression: "string.toLower(\"123ABC\")"
  expectedResult: "123abc"

- description: "String.toLower #12: Lowercase dynamic context string"
  context:
    name: "MiXeD"
  expression: "string.toLower($name)"
  expectedResult: "mixed"

- description: "String.toLower #13: Lowercase multiple words"
  context: {}
  expression: "string.toLower(\"Foo Bar Baz\")"
  expectedResult: "foo bar baz"

- description: "String.toLower #14: Lowercase alphanumeric with symbols"
  context: {}
  expression: "string.toLower(\"A1B2C3\")"
  expectedResult: "a1b2c3"

- description: "String.toLower #15: Lowercase with leading/trailing spaces"
  context: {}
  expression: "string.toLower(\"  SPACES  \")"
  expectedResult: "  spaces  "

- description: "String.toLower #16: Lowercase string with underscore"
  context: {}
  expression: "string.toLower(\"Test_Case\")"
  expectedResult: "test_case"

- description: "String.toLower #17: Lowercase string with hyphen"
  context: {}
  expression: "string.toLower(\"UP-Down\")"
  expectedResult: "up-down"

- description: "String.toLower #18: Lowercase string with period"
  context: {}
  expression: "string.toLower(\"SENTENCE.END\")"
  expectedResult: "sentence.end"

- description: "String.toLower #19: Lowercase string with exclamation"
  context: {}
  expression: "string.toLower(\"WOW!\")"
  expectedResult: "wow!"

- description: "String.toLower #20: Lowercase dynamic context value"
  context:
    word: "UPPERCASE"
  expression: "string.toLower($word)"
  expectedResult: "uppercase"

################################################################################
# string.toUpper (20 Test Cases)
################################################################################
- description: "String.toUpper #1: Uppercase fully lowercase literal"
  context: {}
  expression: "string.toUpper(\"hello\")"
  expectedResult: "HELLO"

- description: "String.toUpper #2: Uppercase mixed case literal"
  context: {}
  expression: "string.toUpper(\"HeLLo\")"
  expectedResult: "HELLO"

- description: "String.toUpper #3: Uppercase context string"
  context:
    s: "world"
  expression: "string.toUpper($s)"
  expectedResult: "WORLD"

- description: "String.toUpper #4: Uppercase alphanumeric string"
  context: {}
  expression: "string.toUpper(\"abc123\")"
  expectedResult: "ABC123"

- description: "String.toUpper #5: Uppercase string with symbols"
  context: {}
  expression: "string.toUpper(\"Hello-World!\")"
  expectedResult: "HELLO-WORLD!"

- description: "String.toUpper #6: Uppercase string with whitespace"
  context: {}
  expression: "string.toUpper(\"  mixed case \")"
  expectedResult: "  MIXED CASE "

- description: "String.toUpper #7: Uppercase unicode string"
  context: {}
  expression: "string.toUpper(\"Ã¼ber\")"
  expectedResult: "ÃœBER"

- description: "String.toUpper #8: Uppercase already uppercase"
  context: {}
  expression: "string.toUpper(\"TEST\")"
  expectedResult: "TEST"

- description: "String.toUpper #9: Uppercase empty string"
  context: {}
  expression: "string.toUpper(\"\")"
  expectedResult: ""

- description: "String.toUpper #10: Uppercase string with punctuation"
  context: {}
  expression: "string.toUpper(\"hello, world!\")"
  expectedResult: "HELLO, WORLD!"

- description: "String.toUpper #11: Uppercase alphanumeric mix"
  context: {}
  expression: "string.toUpper(\"123abc\")"
  expectedResult: "123ABC"

- description: "String.toUpper #12: Uppercase dynamic context string"
  context:
    name: "mixed"
  expression: "string.toUpper($name)"
  expectedResult: "MIXED"

- description: "String.toUpper #13: Uppercase multiple words"
  context: {}
  expression: "string.toUpper(\"foo bar baz\")"
  expectedResult: "FOO BAR BAZ"

- description: "String.toUpper #14: Uppercase alphanumeric with symbols"
  context: {}
  expression: "string.toUpper(\"a1b2c3\")"
  expectedResult: "A1B2C3"

- description: "String.toUpper #15: Uppercase with leading/trailing spaces"
  context: {}
  expression: "string.toUpper(\"  spaces  \")"
  expectedResult: "  SPACES  "

- description: "String.toUpper #16: Uppercase string with underscore"
  context: {}
  expression: "string.toUpper(\"test_case\")"
  expectedResult: "TEST_CASE"

- description: "String.toUpper #17: Uppercase string with hyphen"
  context: {}
  expression: "string.toUpper(\"up-down\")"
  expectedResult: "UP-DOWN"

- description: "String.toUpper #18: Uppercase string with period"
  context: {}
  expression: "string.toUpper(\"sentence.end\")"
  expectedResult: "SENTENCE.END"

- description: "String.toUpper #19: Uppercase string with exclamation"
  context: {}
  expression: "string.toUpper(\"wow!\")"
  expectedResult: "WOW!"

- description: "String.toUpper #20: Uppercase dynamic context value"
  context:
    word: "lowercase"
  expression: "string.toUpper($word)"
  expectedResult: "LOWERCASE"

################################################################################
# string.trim (20 Test Cases)
################################################################################
- description: "String.trim #1: Trim spaces from both ends"
  context: {}
  expression: "string.trim(\"  hello  \")"
  expectedResult: "hello"

- description: "String.trim #2: Trim tabs and spaces"
  context: {}
  expression: "string.trim(\"\tworld  \")"
  expectedResult: "world"

- description: "String.trim #3: Already trimmed string"
  context: {}
  expression: "string.trim(\"world\")"
  expectedResult: "world"

- description: "String.trim #4: Only whitespace string"
  context: {}
  expression: "string.trim(\"   \")"
  expectedResult: ""

- description: "String.trim #5: Trim mixed spaces"
  context: {}
  expression: "string.trim(\"  hello world  \")"
  expectedResult: "hello world"

- description: "String.trim #6: Trim leading spaces only"
  context: {}
  expression: "string.trim(\"   start\")"
  expectedResult: "start"

- description: "String.trim #7: Trim trailing spaces only"
  context: {}
  expression: "string.trim(\"end   \")"
  expectedResult: "end"

- description: "String.trim #8: Trim newlines"
  context: {}
  expression: "string.trim(\"\nhello\n\")"
  expectedResult: "hello"

- description: "String.trim #9: Trim tabs"
  context: {}
  expression: "string.trim(\"\ttrim\t\")"
  expectedResult: "trim"

- description: "String.trim #10: Trim combination of spaces and newline"
  context: {}
  expression: "string.trim(\" \\t hello world \\n\")"
  expectedResult: "hello world"

- description: "String.trim #11: Trim empty string"
  context: {}
  expression: "string.trim(\"\")"
  expectedResult: ""

- description: "String.trim #12: Trim with internal spaces preserved"
  context: {}
  expression: "string.trim(\"  hello   world  \")"
  expectedResult: "hello   world"

- description: "String.trim #13: Trim dynamic context string"
  context:
    s: "  test  "
  expression: "string.trim($s)"
  expectedResult: "test"

- description: "String.trim #14: Trim string with newline in middle"
  context: {}
  expression: "string.trim(\"  line1\\nline2  \")"
  expectedResult: |-
    line1
    line2

- description: "String.trim #15: Trim string without extra whitespace"
  context: {}
  expression: "string.trim(\"clean\")"
  expectedResult: "clean"

- description: "String.trim #16: Trim string with punctuation"
  context: {}
  expression: "string.trim(\"  !@#$  \")"
  expectedResult: "!@#$"

- description: "String.trim #17: Trim string with numbers"
  context: {}
  expression: "string.trim(\"  12345  \")"
  expectedResult: "12345"

- description: "String.trim #18: Trim mixed alphanumeric"
  context: {}
  expression: "string.trim(\"   Abc 123   \")"
  expectedResult: "Abc 123"

- description: "String.trim #19: Trim string with unicode"
  context: {}
  expression: "string.trim(\"  ÃœBER  \")"
  expectedResult: "ÃœBER"

- description: "String.trim #20: Trim string with multiple lines"
  context: {}
  expression: "string.trim(\"\nLine1\nLine2\n\")"
  expectedResult: |-
    Line1
    Line2

################################################################################
# string.startsWith (22 Test Cases)
################################################################################
- description: "String.startsWith #1: Literal starts with matching prefix"
  context: {}
  expression: "string.startsWith(\"Hello\", \"He\")"
  expectedResult: true

- description: "String.startsWith #2: Case-sensitive failure"
  context: {}
  expression: "string.startsWith(\"Hello\", \"hel\")"
  expectedResult: false

- description: "String.startsWith #3: Context string starts with prefix"
  context:
    s: "world"
  expression: "string.startsWith($s, \"wor\")"
  expectedResult: true

- description: "String.startsWith #4: Simple positive test"
  context: {}
  expression: "string.startsWith(\"foobar\", \"foo\")"
  expectedResult: true

- description: "String.startsWith #5: Simple negative test"
  context: {}
  expression: "string.startsWith(\"foobar\", \"bar\")"
  expectedResult: false

- description: "String.startsWith #6: Numeric string starts with digits"
  context: {}
  expression: "string.startsWith(\"12345\", \"123\")"
  expectedResult: true

- description: "String.startsWith #7: Starts with empty prefix"
  context: {}
  expression: "string.startsWith(\"test\", \"\")"
  expectedResult: true

- description: "String.startsWith #8: Empty string starts with empty prefix"
  context: {}
  expression: "string.startsWith(\"\", \"\")"
  expectedResult: true

- description: "String.startsWith #9: Word test positive"
  context: {}
  expression: "string.startsWith(\"apple\", \"app\")"
  expectedResult: true

- description: "String.startsWith #10: Word test negative due to case"
  context: {}
  expression: "string.startsWith(\"apple\", \"Apple\")"
  expectedResult: false

- description: "String.startsWith #11: Another positive test"
  context: {}
  expression: "string.startsWith(\"banana\", \"ban\")"
  expectedResult: true

- description: "String.startsWith #12: Starts with prefix in mixed case"
  context: {}
  expression: "string.startsWith(\"OpenAI\", \"Open\")"
  expectedResult: true

- description: "String.startsWith #13: Mixed case negative"
  context: {}
  expression: "string.startsWith(\"OpenAI\", \"open\")"
  expectedResult: false

- description: "String.startsWith #14: Short prefix positive"
  context: {}
  expression: "string.startsWith(\"example\", \"ex\")"
  expectedResult: true

- description: "String.startsWith #15: Longer prefix positive"
  context: {}
  expression: "string.startsWith(\"example\", \"exam\")"
  expectedResult: true

- description: "String.startsWith #16: Negative test for mid-string"
  context: {}
  expression: "string.startsWith(\"example\", \"ample\")"
  expectedResult: false

- description: "String.startsWith #17: Two-word string positive"
  context: {}
  expression: "string.startsWith(\"test case\", \"test\")"
  expectedResult: true

- description: "String.startsWith #18: Two-word string negative"
  context: {}
  expression: "string.startsWith(\"test case\", \"case\")"
  expectedResult: false

- description: "String.startsWith #19: String with leading spaces"
  context: {}
  expression: "string.startsWith(\"  leading\", \"  l\")"
  expectedResult: true

- description: "String.startsWith #20: Check prefix in word with no spaces"
  context: {}
  expression: "string.startsWith(\"trailing  \", \"trai\")"
  expectedResult: true

- description: "String.startsWith #21: Uppercase test positive"
  context: {}
  expression: "string.startsWith(\"UPPERCASE\", \"UPP\")"
  expectedResult: true

- description: "String.startsWith #22: Negative due to case sensitivity"
  context: {}
  expression: "string.startsWith(\"lowercase\", \"LOW\")"
  expectedResult: false

################################################################################
# string.endsWith (22 Test Cases)
################################################################################
- description: "String.endsWith #1: Literal ends with matching suffix"
  context: {}
  expression: "string.endsWith(\"Hello\", \"lo\")"
  expectedResult: true

- description: "String.endsWith #2: Case-sensitive failure"
  context: {}
  expression: "string.endsWith(\"Hello\", \"LO\")"
  expectedResult: false

- description: "String.endsWith #3: Context string ends with suffix"
  context:
    s: "world"
  expression: "string.endsWith($s, \"ld\")"
  expectedResult: true

- description: "String.endsWith #4: Simple positive test"
  context: {}
  expression: "string.endsWith(\"foobar\", \"bar\")"
  expectedResult: true

- description: "String.endsWith #5: Simple negative test"
  context: {}
  expression: "string.endsWith(\"foobar\", \"foo\")"
  expectedResult: false

- description: "String.endsWith #6: Numeric string ends with digits"
  context: {}
  expression: "string.endsWith(\"12345\", \"345\")"
  expectedResult: true

- description: "String.endsWith #7: Ends with empty string"
  context: {}
  expression: "string.endsWith(\"test\", \"\")"
  expectedResult: true

- description: "String.endsWith #8: Empty string ends with empty string"
  context: {}
  expression: "string.endsWith(\"\", \"\")"
  expectedResult: true

- description: "String.endsWith #9: Word test positive"
  context: {}
  expression: "string.endsWith(\"apple\", \"ple\")"
  expectedResult: true

- description: "String.endsWith #10: Word test negative due to case"
  context: {}
  expression: "string.endsWith(\"apple\", \"Apple\")"
  expectedResult: false

- description: "String.endsWith #11: Another positive test"
  context: {}
  expression: "string.endsWith(\"banana\", \"ana\")"
  expectedResult: true

- description: "String.endsWith #12: Ends with suffix in mixed case"
  context: {}
  expression: "string.endsWith(\"OpenAI\", \"AI\")"
  expectedResult: true

- description: "String.endsWith #13: Mixed case negative"
  context: {}
  expression: "string.endsWith(\"OpenAI\", \"ai\")"
  expectedResult: false

- description: "String.endsWith #14: Suffix short test"
  context: {}
  expression: "string.endsWith(\"example\", \"ple\")"
  expectedResult: true

- description: "String.endsWith #15: Longer suffix positive"
  context: {}
  expression: "string.endsWith(\"example\", \"ample\")"
  expectedResult: true

- description: "String.endsWith #16: Negative test for non-suffix"
  context: {}
  expression: "string.endsWith(\"example\", \"exam\")"
  expectedResult: false

- description: "String.endsWith #17: Two-word string positive"
  context: {}
  expression: "string.endsWith(\"test case\", \"case\")"
  expectedResult: true

- description: "String.endsWith #18: Two-word string negative"
  context: {}
  expression: "string.endsWith(\"test case\", \"test\")"
  expectedResult: false

- description: "String.endsWith #19: String with trailing spaces"
  context: {}
  expression: "string.endsWith(\"  trailing\", \"ing\")"
  expectedResult: true

- description: "String.endsWith #20: String with trailing spaces check"
  context: {}
  expression: "string.endsWith(\"leading  \", \"  \")"
  expectedResult: true

- description: "String.endsWith #21: Uppercase test positive"
  context: {}
  expression: "string.endsWith(\"UPPERCASE\", \"CASE\")"
  expectedResult: true

- description: "String.endsWith #22: Lowercase test positive"
  context: {}
  expression: "string.endsWith(\"lowercase\", \"case\")"
  expectedResult: true

################################################################################
# string.contains (22 Test Cases)
################################################################################
- description: "String.contains #1: Contains substring positive"
  context: {}
  expression: "string.contains(\"Hello world\", \"world\")"
  expectedResult: true

- description: "String.contains #2: Contains substring case-sensitive failure"
  context: {}
  expression: "string.contains(\"Hello world\", \"WORLD\")"
  expectedResult: false

- description: "String.contains #3: Context string contains substring"
  context:
    s: "abcdef"
  expression: "string.contains($s, \"cd\")"
  expectedResult: true

- description: "String.contains #4: Contains mid-string substring"
  context: {}
  expression: "string.contains(\"foobar\", \"oba\")"
  expectedResult: true

- description: "String.contains #5: Contains substring at end"
  context: {}
  expression: "string.contains(\"foobar\", \"bar\")"
  expectedResult: true

- description: "String.contains #6: Does not contain substring"
  context: {}
  expression: "string.contains(\"foobar\", \"baz\")"
  expectedResult: false

- description: "String.contains #7: Numeric string contains digits"
  context: {}
  expression: "string.contains(\"12345\", \"234\")"
  expectedResult: true

- description: "String.contains #8: Contains empty substring"
  context: {}
  expression: "string.contains(\"test\", \"\")"
  expectedResult: true

- description: "String.contains #9: Empty string contains empty substring"
  context: {}
  expression: "string.contains(\"\", \"\")"
  expectedResult: true

- description: "String.contains #10: Contains middle of word"
  context: {}
  expression: "string.contains(\"apple\", \"ppl\")"
  expectedResult: true

- description: "String.contains #11: Contains ending substring"
  context: {}
  expression: "string.contains(\"apple\", \"le\")"
  expectedResult: true

- description: "String.contains #12: Contains repeated substring"
  context: {}
  expression: "string.contains(\"banana\", \"nan\")"
  expectedResult: true

- description: "String.contains #13: Contains substring in mixed case"
  context: {}
  expression: "string.contains(\"OpenAI\", \"pen\")"
  expectedResult: true

- description: "String.contains #14: Contains substring negative due to case"
  context: {}
  expression: "string.contains(\"OpenAI\", \"open\")"
  expectedResult: false

- description: "String.contains #15: Contains internal substring"
  context: {}
  expression: "string.contains(\"example\", \"amp\")"
  expectedResult: true

- description: "String.contains #16: Contains substring negative (case)"
  context: {}
  expression: "string.contains(\"example\", \"Exa\")"
  expectedResult: false

- description: "String.contains #17: Contains substring in two-word string"
  context: {}
  expression: "string.contains(\"test case\", \"case\")"
  expectedResult: true

- description: "String.contains #18: Contains substring negative in two-word string"
  context: {}
  expression: "string.contains(\"test case\", \"Test\")"
  expectedResult: false

- description: "String.contains #19: Contains check with extra spaces"
  context: {}
  expression: "string.contains(\"   spaced   \", \"space\")"
  expectedResult: true

- description: "String.contains #20: Contains substring within word"
  context: {}
  expression: "string.contains(\"concatenation\", \"cat\")"
  expectedResult: true

- description: "String.contains #21: Contains ending substring"
  context: {}
  expression: "string.contains(\"string\", \"ing\")"
  expectedResult: true

- description: "String.contains #22: Contains overlapping substring"
  context: {}
  expression: "string.contains(\"nothing\", \"thing\")"
  expectedResult: true

################################################################################
# string.replace (22 Test Cases)
################################################################################
- description: "String.replace #1: Replace all occurrences"
  context: {}
  expression: "string.replace(\"abcabc\", \"a\", \"x\")"
  expectedResult: "xbcxbc"

- description: "String.replace #2: Replace first occurrence with limit"
  context: {}
  expression: "string.replace(\"abcabc\", \"a\", \"x\", 1)"
  expectedResult: "xbcabc"

- description: "String.replace #3: Replace substring 'world' with 'there'"
  context: {}
  expression: "string.replace(\"hello world\", \"world\", \"there\")"
  expectedResult: "hello there"

- description: "String.replace #4: Replace substring not present"
  context: {}
  expression: "string.replace(\"test\", \"z\", \"y\")"
  expectedResult: "test"

- description: "String.replace #5: Replace multiple occurrences"
  context: {}
  expression: "string.replace(\"aaa\", \"a\", \"b\")"
  expectedResult: "bbb"

- description: "String.replace #6: Replace with empty string"
  context: {}
  expression: "string.replace(\"foobar\", \"bar\", \"\")"
  expectedResult: "foo"

- description: "String.replace #7: Replace with limit greater than occurrences"
  context: {}
  expression: "string.replace(\"abab\", \"ab\", \"cd\", 3)"
  expectedResult: "cdcd"

- description: "String.replace #8: Replace with limit 1"
  context: {}
  expression: "string.replace(\"abab\", \"ab\", \"cd\", 1)"
  expectedResult: "cdab"

- description: "String.replace #9: Replace at beginning"
  context: {}
  expression: "string.replace(\"hello\", \"he\", \"hi\")"
  expectedResult: "hillo"

- description: "String.replace #10: Replace at end"
  context: {}
  expression: "string.replace(\"world\", \"ld\", \"rld\")"
  expectedResult: "worrld"

- description: "String.replace #11: Replace multiple words"
  context: {}
  expression: "string.replace(\"foo bar baz\", \"bar\", \"qux\")"
  expectedResult: "foo qux baz"

- description: "String.replace #12: Replace using context string"
  context:
    s: "Hello World"
  expression: "string.replace($s, \"World\", \"There\")"
  expectedResult: "Hello There"

- description: "String.replace #14: Replace with limit in context"
  context:
    text: "ababab"
  expression: "string.replace($text, \"ab\", \"xy\", 2)"
  expectedResult: "xyxyab"

- description: "String.replace #15: Replace on empty string"
  context: {}
  expression: "string.replace(\"\", \"a\", \"b\")"
  expectedResult: ""

- description: "String.replace #16: Replace entire string"
  context: {}
  expression: "string.replace(\"foo\", \"foo\", \"bar\")"
  expectedResult: "bar"

- description: "String.replace #17: Replace all occurrences without limit"
  context: {}
  expression: "string.replace(\"abab\", \"ab\", \"cd\")"
  expectedResult: "cdcd"

- description: "String.replace #18: Replace special character"
  context: {}
  expression: "string.replace(\"hello! world?\", \"!\", \",\")"
  expectedResult: "hello, world?"

- description: "String.replace #19: Replace space with hyphen"
  context: {}
  expression: "string.replace(\"a b c\", \" \", \"-\")"
  expectedResult: "a-b-c"

- description: "String.replace #20: Replace with limit 0 (no replacements)"
  context: {}
  expression: "string.replace(\"banana\", \"a\", \"o\", 0)"
  expectedResult: "banana"

- description: "String.replace #22: Replace substring with punctuation"
  context: {}
  expression: "string.replace(\"Hello, world!\", \", world\", \"\")"
  expectedResult: "Hello!"

################################################################################
# string.split (22 Test Cases)
################################################################################
- description: "String.split #1: Split comma-separated values"
  context: {}
  expression: "string.split(\"a,b,c\", \",\")"
  expectedResult: [ "a", "b", "c" ]

- description: "String.split #2: Split by space"
  context: {}
  expression: "string.split(\"hello world\", \" \")"
  expectedResult: [ "hello", "world" ]

- description: "String.split #3: Split by semicolon"
  context: {}
  expression: "string.split(\"one;two;three\", \";\")"
  expectedResult: [ "one", "two", "three" ]

- description: "String.split #4: Split string with no delimiter present"
  context: {}
  expression: "string.split(\"nosplit\", \",\")"
  expectedResult: [ "nosplit" ]

- description: "String.split #5: Split empty string"
  context: {}
  expression: "string.split(\"\", \",\")"
  expectedResult: [ "" ]

- description: "String.split #6: Split with consecutive delimiters"
  context: {}
  expression: "string.split(\"a,,b\", \",\")"
  expectedResult: [ "a", "", "b" ]

- description: "String.split #7: Split string with multiple spaces"
  context: {}
  expression: "string.split(\"a  b\", \" \")"
  expectedResult: [ "a", "", "b" ]

- description: "String.split #8: Split using context string"
  context:
    s: "apple,orange,banana"
  expression: "string.split($s, \",\")"
  expectedResult: [ "apple", "orange", "banana" ]

- description: "String.split #9: Split with delimiter not found"
  context: {}
  expression: "string.split(\"abc\", \"x\")"
  expectedResult: [ "abc" ]

- description: "String.split #10: Split with special character delimiter"
  context: {}
  expression: "string.split(\"a|b|c\", \"|\")"
  expectedResult: [ "a", "b", "c" ]

- description: "String.split #11: Split with space delimiter in longer sentence"
  context: {}
  expression: "string.split(\"hello world test\", \" \")"
  expectedResult: [ "hello", "world", "test" ]

- description: "String.split #12: Split with longer delimiter"
  context: {}
  expression: "string.split(\"one--two--three\", \"--\")"
  expectedResult: [ "one", "two", "three" ]

- description: "String.split #13: Split with delimiter at beginning"
  context: {}
  expression: "string.split(\",start,mid,end\", \",\")"
  expectedResult: [ "", "start", "mid", "end" ]

- description: "String.split #14: Split with delimiter at end"
  context: {}
  expression: "string.split(\"start,mid,end,\", \",\")"
  expectedResult: [ "start", "mid", "end", "" ]

- description: "String.split #15: Split with consecutive delimiters"
  context: {}
  expression: "string.split(\"a,,b,,c\", \",\")"
  expectedResult: [ "a", "", "b", "", "c" ]

- description: "String.split #16: Split with unicode delimiter"
  context: {}
  expression: "string.split(\"Î±Î²Î³Î±Î²\", \"Î²\")"
  expectedResult: [ "Î±", "Î³Î±", "" ]

- description: "String.split #17: Split using context with spaces"
  context:
    text: "one two three"
  expression: "string.split($text, \" \")"
  expectedResult: [ "one", "two", "three" ]

- description: "String.split #18: Split with hyphen delimiter"
  context: {}
  expression: "string.split(\"hello-world\", \"-\")"
  expectedResult: [ "hello", "world" ]

- description: "String.split #19: Split with delimiter not in string"
  context: {}
  expression: "string.split(\"abcdef\", \"z\")"
  expectedResult: [ "abcdef" ]

- description: "String.split #20: Split with punctuation delimiter"
  context: {}
  expression: "string.split(\"a,b;c\", \";\")"
  expectedResult: [ "a,b", "c" ]

- description: "String.split #21: Split with tab delimiter"
  context: {}
  expression: "string.split(\"a\tb\tc\", \"\\t\")"
  expectedResult: [ "a", "b", "c" ]

- description: "String.split #22: Split with delimiter as longer string"
  context: {}
  expression: "string.split(\"red--green--blue\", \"--\")"
  expectedResult: [ "red", "green", "blue" ]

################################################################################
# string.join (20 Test Cases)
################################################################################
- description: "String.join #1: Join with space"
  context: {}
  expression: "string.join([\"Hello\", \"World\"], \" \")"
  expectedResult: "Hello World"

- description: "String.join #2: Join with hyphen"
  context: {}
  expression: "string.join([\"a\", \"b\", \"c\"], \"-\")"
  expectedResult: "a-b-c"

- description: "String.join #3: Join with comma and space"
  context: {}
  expression: "string.join([\"one\", \"two\", \"three\"], \", \")"
  expectedResult: "one, two, three"

- description: "String.join #4: Join with empty separator"
  context: {}
  expression: "string.join([\"a\", \"b\", \"c\"], \"\")"
  expectedResult: "abc"

- description: "String.join #5: Join using context array"
  context:
    arr: ["foo", "bar"]
  expression: "string.join($arr, \" \")"
  expectedResult: "foo bar"

- description: "String.join #6: Join single element array"
  context: {}
  expression: "string.join([\"single\"], \", \")"
  expectedResult: "single"

- description: "String.join #7: Join array of empty strings"
  context: {}
  expression: "string.join([\"\", \"\"], \"x\")"
  expectedResult: "x"

- description: "String.join #8: Join with exclamation separator"
  context: {}
  expression: "string.join([\"a\", \"b\", \"c\"], \"!\")"
  expectedResult: "a!b!c"

- description: "String.join #9: Join with comma separator"
  context: {}
  expression: "string.join([\"Hello\", \"world!\"], \", \")"
  expectedResult: "Hello, world!"

- description: "String.join #10: Join numeric strings with plus"
  context: {}
  expression: "string.join([\"1\", \"2\", \"3\"], \"+\")"
  expectedResult: "1+2+3"

- description: "String.join #11: Join with whitespace separator"
  context: {}
  expression: "string.join([\"  a\", \"b  \"], \" \")"
  expectedResult: "  a b  "

- description: "String.join #12: Join empty array"
  context: {}
  expression: "string.join([], \"-\")"
  expectedResult: ""

- description: "String.join #13: Join multiple words"
  context: {}
  expression: "string.join([\"This\", \"is\", \"a\", \"test\"], \" \")"
  expectedResult: "This is a test"

- description: "String.join #14: Join with comma delimiter"
  context: {}
  expression: "string.join([\"x\", \"y\", \"z\"], \",\")"
  expectedResult: "x,y,z"

- description: "String.join #15: Join mixed case words"
  context: {}
  expression: "string.join([\"Hello\", \"world\"], \" \")"
  expectedResult: "Hello world"

- description: "String.join #16: Join with symbol separator"
  context: {}
  expression: "string.join([\"A\", \"B\", \"C\"], \"*\")"
  expectedResult: "A*B*C"

- description: "String.join #17: Join with long separator"
  context: {}
  expression: "string.join([\"start\", \"end\"], \" -> \")"
  expectedResult: "start -> end"

- description: "String.join #18: Join using context array"
  context:
    words: ["join", "these"]
  expression: "string.join($words, \" \")"
  expectedResult: "join these"

- description: "String.join #20: Join array with empty strings interleaved"
  context: {}
  expression: "string.join([\"\", \"nonempty\", \"\"], \"-\")"
  expectedResult: "-nonempty-"

################################################################################
# string.substring (20 Test Cases)
################################################################################
- description: "String.substring #1: Substring from beginning"
  context: {}
  expression: "string.substring(\"Hello World\", 0, 5)"
  expectedResult: "Hello"

- description: "String.substring #2: Substring from middle"
  context: {}
  expression: "string.substring(\"Hello World\", 6, 5)"
  expectedResult: "World"

- description: "String.substring #3: Substring from middle of abcdef"
  context: {}
  expression: "string.substring(\"abcdef\", 2, 3)"
  expectedResult: "cde"

- description: "String.substring #4: Entire string substring"
  context: {}
  expression: "string.substring(\"abcdef\", 0, 6)"
  expectedResult: "abcdef"

- description: "String.substring #5: Substring last character"
  context: {}
  expression: "string.substring(\"abcdef\", 5, 1)"
  expectedResult: "f"

- description: "String.substring #6: Substring from 'substring'"
  context: {}
  expression: "string.substring(\"substring\", 3, 4)"
  expectedResult: "stri"

- description: "String.substring #7: Substring from 'Test'"
  context: {}
  expression: "string.substring(\"Test\", 1, 2)"
  expectedResult: "es"

- description: "String.substring #8: Substring using context string"
  context:
    s: "ContextString"
  expression: "string.substring($s, 7, 6)"
  expectedResult: "String"

- description: "String.substring #9: Substring from numeric string"
  context: {}
  expression: "string.substring(\"1234567890\", 4, 3)"
  expectedResult: "567"

- description: "String.substring #10: Substring zero length"
  context: {}
  expression: "string.substring(\"EdgeCase\", 0, 0)"
  expectedResult: ""

- description: "String.substring #11: Substring 'Case' from 'EdgeCase'"
  context: {}
  expression: "string.substring(\"EdgeCase\", 4, 4)"
  expectedResult: "Case"

- description: "String.substring #12: Substring unicode characters"
  context: {}
  expression: "string.substring(\"UnicodeÃœÃŸ\", 7, 2)"
  expectedResult: "ÃœÃŸ"

- description: "String.substring #13: Substring middle of 'hello'"
  context: {}
  expression: "string.substring(\"hello\", 1, 3)"
  expectedResult: "ell"

- description: "String.substring #14: Substring from 'TestString'"
  context: {}
  expression: "string.substring(\"TestString\", 4, 6)"
  expectedResult: "String"

- description: "String.substring #15: Substring from 'LongerExample'"
  context: {}
  expression: "string.substring(\"LongerExample\", 6, 3)"
  expectedResult: "Exa"

- description: "String.substring #16: Substring from 'data'"
  context: {}
  expression: "string.substring(\"data\", 2, 2)"
  expectedResult: "ta"

- description: "String.substring #17: Substring from 'repeat'"
  context: {}
  expression: "string.substring(\"repeat\", 0, 3)"
  expectedResult: "rep"

- description: "String.substring #18: Substring two-word string"
  context: {}
  expression: "string.substring(\"multiple words\", 9, 5)"
  expectedResult: "words"

- description: "String.substring #19: Substring from 'Check'"
  context: {}
  expression: "string.substring(\"Check\", 2, 2)"
  expectedResult: "ec"

- description: "String.substring #20: Substring from 'FinalTest'"
  context: {}
  expression: "string.substring(\"FinalTest\", 5, 4)"
  expectedResult: "Test"

################################################################################
# string.indexOf (20 Test Cases)
################################################################################
- description: "String.indexOf #1: Find 'World' in 'Hello World'"
  context: {}
  expression: "string.indexOf(\"Hello World\", \"World\")"
  expectedResult: 6

- description: "String.indexOf #2: Find 'Hello' in 'Hello World'"
  context: {}
  expression: "string.indexOf(\"Hello World\", \"Hello\")"
  expectedResult: 0

- description: "String.indexOf #3: Find 'cd' in 'abcdef'"
  context: {}
  expression: "string.indexOf(\"abcdef\", \"cd\")"
  expectedResult: 2

- description: "String.indexOf #4: Find non-existent substring"
  context: {}
  expression: "string.indexOf(\"abcdef\", \"g\")"
  expectedResult: -1

- description: "String.indexOf #5: Find 'na' in 'banana'"
  context: {}
  expression: "string.indexOf(\"banana\", \"na\")"
  expectedResult: 2

- description: "String.indexOf #6: Find 'na' in 'banana' starting from index 3"
  context: {}
  expression: "string.indexOf(\"banana\", \"na\", 3)"
  expectedResult: 4

- description: "String.indexOf #7: Find 'st' in 'test'"
  context: {}
  expression: "string.indexOf(\"test\", \"st\")"
  expectedResult: 2

- description: "String.indexOf #8: Find 'amp' in 'example'"
  context: {}
  expression: "string.indexOf(\"example\", \"amp\")"
  expectedResult: 2

- description: "String.indexOf #9: Case sensitive search failure"
  context: {}
  expression: "string.indexOf(\"example\", \"Exa\")"
  expectedResult: -1

- description: "String.indexOf #10: Find 'e' in 'repeat'"
  context: {}
  expression: "string.indexOf(\"repeat\", \"e\")"
  expectedResult: 1

- description: "String.indexOf #11: Find '123' in '123123' starting at index 1"
  context: {}
  expression: "string.indexOf(\"123123\", \"123\", 1)"
  expectedResult: 3

- description: "String.indexOf #12: Find first 'l' in 'hello'"
  context: {}
  expression: "string.indexOf(\"hello\", \"l\")"
  expectedResult: 2

- description: "String.indexOf #13: Find 'l' in 'hello' starting at index 3"
  context: {}
  expression: "string.indexOf(\"hello\", \"l\", 3)"
  expectedResult: 3

- description: "String.indexOf #14: Find 'e' in 'edge'"
  context: {}
  expression: "string.indexOf(\"edge\", \"e\")"
  expectedResult: 0

- description: "String.indexOf #15: Find 'e' in 'edge' starting at index 1"
  context: {}
  expression: "string.indexOf(\"edge\", \"e\", 1)"
  expectedResult: 3

- description: "String.indexOf #16: Find 'ing' in 'string'"
  context: {}
  expression: "string.indexOf(\"string\", \"ing\")"
  expectedResult: 3

- description: "String.indexOf #17: Find 'issi' in 'mississippi'"
  context: {}
  expression: "string.indexOf(\"mississippi\", \"issi\")"
  expectedResult: 1

- description: "String.indexOf #18: Find 'issi' in 'mississippi' starting at index 2"
  context: {}
  expression: "string.indexOf(\"mississippi\", \"issi\", 2)"
  expectedResult: 4

- description: "String.indexOf #19: Find 'ai' in 'openai'"
  context: {}
  expression: "string.indexOf(\"openai\", \"ai\")"
  expectedResult: 4

- description: "String.indexOf #20: Find non-existent 'z' in 'openai'"
  context: {}
  expression: "string.indexOf(\"openai\", \"z\")"
  expectedResult: -1

################################################################################
# string.concat (20 Test Cases)
################################################################################
- description: "String.concat #1: Concatenate 'Hello', ' ', 'World'"
  context: {}
  expression: "string.concat(\"Hello\", \" \", \"World\")"
  expectedResult: "Hello World"

- description: "String.concat #2: Concatenate 'foo' and 'bar'"
  context: {}
  expression: "string.concat(\"foo\", \"bar\")"
  expectedResult: "foobar"

- description: "String.concat #3: Concatenate 'a', 'b', 'c'"
  context: {}
  expression: "string.concat(\"a\", \"b\", \"c\")"
  expectedResult: "abc"

- description: "String.concat #4: Concatenate 'Test' and empty string"
  context: {}
  expression: "string.concat(\"Test\", \"\")"
  expectedResult: "Test"

- description: "String.concat #5: Concatenate two empty strings"
  context: {}
  expression: "string.concat(\"\", \"\")"
  expectedResult: ""

- description: "String.concat #6: Concatenate context strings with space"
  context:
    a: "Hello"
    b: "There"
  expression: "string.concat($a, \" \", $b)"
  expectedResult: "Hello There"

- description: "String.concat #7: Concatenate numeric strings"
  context: {}
  expression: "string.concat(\"123\", \"456\")"
  expectedResult: "123456"

- description: "String.concat #8: Concatenate same word twice"
  context: {}
  expression: "string.concat(\"Repeat\", \"Repeat\")"
  expectedResult: "RepeatRepeat"

- description: "String.concat #9: Concatenate two parts to form a word"
  context: {}
  expression: "string.concat(\"Concat\", \"enation\")"
  expectedResult: "Concatenation"

- description: "String.concat #10: Concatenate with mixed case"
  context: {}
  expression: "string.concat(\"UPPER\", \"lower\")"
  expectedResult: "UPPERlower"

- description: "String.concat #11: Concatenate mixed words"
  context: {}
  expression: "string.concat(\"Mixed\", \"CASE\")"
  expectedResult: "MixedCASE"

- description: "String.concat #12: Concatenate multiple strings with hyphen"
  context: {}
  expression: "string.concat(\"first\", \"-\", \"second\", \"-\", \"third\")"
  expectedResult: "first-second-third"

- description: "String.concat #13: Concatenate with punctuation"
  context: {}
  expression: "string.concat(\"Hello\", \", \", \"world\", \"!\")"
  expectedResult: "Hello, world!"

- description: "String.concat #14: Concatenate parts to form 'joiningtest'"
  context: {}
  expression: "string.concat(\"join\", \"ing\", \"test\")"
  expectedResult: "joiningtest"

- description: "String.concat #15: Concatenate four letters"
  context: {}
  expression: "string.concat(\"A\", \"B\", \"C\", \"D\")"
  expectedResult: "ABCD"

- description: "String.concat #16: Concatenate single argument"
  context: {}
  expression: "string.concat(\"One\")"
  expectedResult: "One"

- description: "String.concat #17: Concatenate multiple words with spaces"
  context: {}
  expression: "string.concat(\"Multiple\", \" \", \"words\", \" \", \"here\")"
  expectedResult: "Multiple words here"

- description: "String.concat #18: Concatenate with empty string in between"
  context: {}
  expression: "string.concat(\"Edge\", \"\", \"Case\")"
  expectedResult: "EdgeCase"

- description: "String.concat #19: Concatenate with space and empty string"
  context: {}
  expression: "string.concat(\"Empty\", \" \", \"\")"
  expectedResult: "Empty "

- description: "String.concat #20: Concatenate two words"
  context: {}
  expression: "string.concat(\"Start\", \"End\")"
  expectedResult: "StartEnd"

# 250 Positive Path Test Cases Using the regex.* Library
# ------------------------------------------------------
# The regex library provides:
#   1) regex.match(pattern, s) -> boolean
#   2) regex.replace(s, pattern, replacement) -> string
#   3) regex.find(pattern, s) -> string
#
# Below are 250 test cases in total:
#   - 84 for regex.match (Tests #1 to #84)
#   - 83 for regex.replace (Tests #85 to #167)
#   - 83 for regex.find (Tests #168 to #250)
#
# All are success-path (no errors). Some yield `true`/`false` for regex.match;
# others produce strings for regex.replace or regex.find. Various patterns
# demonstrate anchors, character classes, quantifiers, grouping, etc.
# We avoid invalid patterns or other error conditions.

################################################################################
# 1 - 84: regex.match
################################################################################

- description: "Regex.match #1: Simple literal match at start"
  context: {}
  expression: "regex.match(\"abc\", \"abc\")"
  expectedResult: true

- description: "Regex.match #2: Simple literal mismatch"
  context: {}
  expression: "regex.match(\"xyz\", \"abc\")"
  expectedResult: false

- description: "Regex.match #3: Partial substring match"
  context: {}
  expression: "regex.match(\"abc\", \"zzzabczzz\")"
  expectedResult: true

- description: "Regex.match #4: No match in substring"
  context: {}
  expression: "regex.match(\"abc\", \"abz\")"
  expectedResult: false

- description: "Regex.match #5: Character class [aeiou]"
  context: {}
  expression: "regex.match(\"[aeiou]\", \"hello\")"
  expectedResult: true

- description: "Regex.match #6: Negated char class [^0-9]"
  context: {}
  expression: "regex.match(\"[^0-9]\", \"12345\")"
  expectedResult: false

- description: "Regex.match #7: Dot wildcard"
  context: {}
  expression: "regex.match(\"a.c\", \"abc\")"
  expectedResult: true

- description: "Regex.match #8: Dot wildcard mismatch"
  context: {}
  expression: "regex.match(\"a.c\", \"ac\")"
  expectedResult: false

- description: "Regex.match #9: Star quantifier"
  context: {}
  expression: "regex.match(\"ab*c\", \"ac\")"
  expectedResult: true

- description: "Regex.match #10: Star quantifier multi match"
  context: {}
  expression: "regex.match(\"ab*c\", \"abbbc\")"
  expectedResult: true

- description: "Regex.match #11: Plus quantifier"
  context: {}
  expression: "regex.match(\"ab+c\", \"ac\")"
  expectedResult: false

- description: "Regex.match #12: Plus quantifier success"
  context: {}
  expression: "regex.match(\"ab+c\", \"abbc\")"
  expectedResult: true

- description: "Regex.match #13: Optional quantifier ?"
  context: {}
  expression: "regex.match(\"ab?c\", \"ac\")"
  expectedResult: true

- description: "Regex.match #14: Optional quantifier no match"
  context: {}
  expression: "regex.match(\"ab?c\", \"abbc\")"
  expectedResult: false

- description: "Regex.match #15: Anchor ^ start of string"
  context: {}
  expression: "regex.match(\"^abc\", \"abcde\")"
  expectedResult: true

- description: "Regex.match #16: Anchor ^ fail"
  context: {}
  expression: "regex.match(\"^abc\", \"zabc\")"
  expectedResult: false

- description: "Regex.match #17: Anchor $ end of string"
  context: {}
  expression: "regex.match(\"abc$\", \"xxabc\")"
  expectedResult: true

- description: "Regex.match #18: Anchor $ fail"
  context: {}
  expression: "regex.match(\"abc$\", \"abczz\")"
  expectedResult: false

- description: "Regex.match #19: Full match ^...$"
  context: {}
  expression: "regex.match(\"^abc$\", \"abc\")"
  expectedResult: true

- description: "Regex.match #20: Full match ^...$ partial fail"
  context: {}
  expression: "regex.match(\"^abc$\", \"abcd\")"
  expectedResult: false

- description: "Regex.match #21: Escaped dot \\. match literal dot"
  context: {}
  expression: "regex.match(\"\\\\.\", \"abc.\")"
  expectedResult: true

- description: "Regex.match #22: Escaped dot no match"
  context: {}
  expression: "regex.match(\"\\\\.\", \"abcd\")"
  expectedResult: false

- description: "Regex.match #23: Single digit [0-9]"
  context: {}
  expression: "regex.match(\"[0-9]\", \"abc123\")"
  expectedResult: true

- description: "Regex.match #24: Single digit fail"
  context: {}
  expression: "regex.match(\"[0-9]\", \"abc\")"
  expectedResult: false

- description: "Regex.match #25: Word boundary \\b"
  context: {}
  expression: "regex.match(\"\\\\bworld\\\\b\", \"hello world!\")"
  expectedResult: true

- description: "Regex.match #26: Word boundary fail"
  context: {}
  expression: "regex.match(\"\\\\bworld\\\\b\", \"helloworld\")"
  expectedResult: false

- description: "Regex.match #27: Group parentheses (ab)+"
  context: {}
  expression: "regex.match(\"(ab)+\", \"ababxyz\")"
  expectedResult: true

- description: "Regex.match #28: Group parentheses fail"
  context: {}
  expression: "regex.match(\"(ab)+\", \"axbx\")"
  expectedResult: false

- description: "Regex.match #29: context pattern literal match"
  context:
    pat: "^test"
  expression: "regex.match($pat, \"test123\")"
  expectedResult: true

- description: "Regex.match #30: context subject partial"
  context:
    subj: "xxabcxx"
  expression: "regex.match(\"abc\", $subj)"
  expectedResult: true

- description: "Regex.match #31: Inline bracket range [a-z]"
  context: {}
  expression: "regex.match(\"[a-z]+\", \"ABC\")"
  expectedResult: false

- description: "Regex.match #32: Character class ignoring case is not built in, so partial. We'll do normal"
  context: {}
  expression: "regex.match(\"[A-Z]+\", \"ABCd\")"
  expectedResult: true

- description: "Regex.match #33: * with preceding group"
  context: {}
  expression: "regex.match(\"(ab)*c\", \"ababc\")"
  expectedResult: true

- description: "Regex.match #34: Zero-length match example is tricky. We'll do a normal case"
  context: {}
  expression: "regex.match(\"^$\", \"\")"
  expectedResult: true  # empty string matches ^$

- description: "Regex.match #35: Zero-length fail"
  context: {}
  expression: "regex.match(\"^$\", \"a\")"
  expectedResult: false

- description: "Regex.match #36: Overlapping pattern scenario (any substring match is fine)."
  context: {}
  expression: "regex.match(\"(aa)+\", \"aaaa\")"
  expectedResult: true

- description: "Regex.match #37: Check for digits in context string"
  context:
    text: "No digits"
  expression: "regex.match(\"\\\\d+\", $text)"
  expectedResult: false

- description: "Regex.match #38: Check for digits in context string success"
  context:
    text: "abc123"
  expression: "regex.match(\"\\\\d+\", $text)"
  expectedResult: true

- description: "Regex.match #39: Dot star capturing everything"
  context: {}
  expression: "regex.match(\".*\", \"anything goes\")"
  expectedResult: true

- description: "Regex.match #40: Dot star on empty string"
  context: {}
  expression: "regex.match(\".*\", \"\")"
  expectedResult: true

- description: "Regex.match #41: Simple phone pattern partial with digits"
  context: {}
  expression: "regex.match(\"\\\\d{3}-\\\\d{4}\", \"Call 123-4567 now\")"
  expectedResult: true

- description: "Regex.match #42: Simple phone pattern fail"
  context: {}
  expression: "regex.match(\"\\\\d{3}-\\\\d{4}\", \"No phone here\")"
  expectedResult: false

- description: "Regex.match #43: Email-like partial pattern"
  context: {}
  expression: "regex.match(\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}\", \"test@example.com\")"
  expectedResult: true

- description: "Regex.match #44: Email-like pattern fail"
  context: {}
  expression: "regex.match(\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}\", \"not an email\")"
  expectedResult: false

- description: "Regex.match #45: '^foo' partial in 'my foo bar'"
  context: {}
  expression: "regex.match(\"^foo\", \"my foo bar\")"
  expectedResult: false

- description: "Regex.match #46: 'foo' anywhere in 'my foo bar'"
  context: {}
  expression: "regex.match(\"foo\", \"my foo bar\")"
  expectedResult: true

- description: "Regex.match #47: Repetition with curly braces {2,4}"
  context: {}
  expression: "regex.match(\"ab{2,4}\", \"abbb\")"
  expectedResult: true

- description: "Regex.match #48: Repetition curly no match"
  context: {}
  expression: "regex.match(\"ab{2,4}\", \"ab\")"
  expectedResult: false

- description: "Regex.match #49: Or grouping (cat|dog)"
  context: {}
  expression: "regex.match(\"(cat|dog)\", \"I have a dog.\")"
  expectedResult: true

- description: "Regex.match #50: Or grouping fail"
  context: {}
  expression: "regex.match(\"(cat|dog)\", \"I have a fish.\")"
  expectedResult: false

- description: "Regex.match #51: ^(cat|dog)$ exact match"
  context: {}
  expression: "regex.match(\"^(cat|dog)$\", \"cat\")"
  expectedResult: true

- description: "Regex.match #52: ^(cat|dog)$ exact mismatch"
  context: {}
  expression: "regex.match(\"^(cat|dog)$\", \"cats\")"
  expectedResult: false

- description: "Regex.match #53: Whitespace match"
  context: {}
  expression: "regex.match(\"\\\\s+\", \"\\t\\n \")"
  expectedResult: true

- description: "Regex.match #54: Whitespace fail"
  context: {}
  expression: "regex.match(\"^\\\\s+$\", \"test\")"
  expectedResult: false

- description: "Regex.match #55: word char \\w+"
  context: {}
  expression: "regex.match(\"\\\\w+\", \"abc_123\")"
  expectedResult: true

- description: "Regex.match #56: word char no match"
  context: {}
  expression: "regex.match(\"^\\\\w+$\", \"abc-123\")"
  expectedResult: false

- description: "Regex.match #57: hex digits [0-9A-Fa-f]+"
  context: {}
  expression: "regex.match(\"^[0-9A-Fa-f]+$\", \"DEADbeef\")"
  expectedResult: true

- description: "Regex.match #58: hex fail"
  context: {}
  expression: "regex.match(\"^[0-9A-Fa-f]+$\", \"notHex!\")"
  expectedResult: false

- description: "Regex.match #59: capturing group with partial match is enough"
  context: {}
  expression: "regex.match(\"(test)\", \"some test here\")"
  expectedResult: true

- description: "Regex.match #60: capturing group mismatch"
  context: {}
  expression: "regex.match(\"(abc)\", \"some text\")"
  expectedResult: false

- description: "Regex.match #61: pattern with bracket in subject"
  context:
    sub: "a[1]"
  expression: "regex.match(\"\\\\[\\\\d+\\\\]\", $sub)"
  expectedResult: true

- description: "Regex.match #62: caret in character class"
  context: {}
  expression: "regex.match(\"[^^]+\", \"abc^\")"
  expectedResult: true  # partial match up to ^

- description: "Regex.match #63: lazy quantifier 'a+?' test"
  context: {}
  expression: "regex.match(\"a+?b\", \"aaab\")"
  expectedResult: true

- description: "Regex.match #64: multiline usage not specifically tested; partial match is enough"
  context: {}
  expression: "regex.match(\"^abc\", \"\\nabc\")"
  expectedResult: false  # no multiline

- description: "Regex.match #65: slash or backslash pattern"
  context: {}
  expression: "regex.match(\"\\\\\\\\\", \"\\\\\")"
  expectedResult: true  # pattern = \\, subject = \

- description: "Regex.match #66: slash or backslash mismatch"
  context: {}
  expression: "regex.match(\"\\\\\\\\\", \"/\")"
  expectedResult: false

- description: "Regex.match #67: Use of grouping (ab)? 'abc' partial"
  context: {}
  expression: "regex.match(\"^(ab)?c\", \"abc\")"
  expectedResult: true


- description: "Regex.match #69: Non-capturing group (?:abc) - standard"
  context: {}
  expression: "regex.match(\"(?:ab)+\", \"ababx\")"
  expectedResult: true

- description: "Regex.match #70: Repetitions with nested groups"
  context: {}
  expression: "regex.match(\"^(ab){2}\", \"abab\")"
  expectedResult: true

- description: "Regex.match #71: Checking bracket expression for '()'"
  context: {}
  expression: "regex.match(\"\\\\(\\\\)\", \"something()end\")"
  expectedResult: true

- description: "Regex.match #72: Checking bracket expression mismatch"
  context: {}
  expression: "regex.match(\"\\\\(\\\\)\", \"(not closed\")"
  expectedResult: false

- description: "Regex.match #73: question mark literal"
  context: {}
  expression: "regex.match(\"\\\\?\", \"Does this match?\")"
  expectedResult: true

- description: "Regex.match #74: question mark fail"
  context: {}
  expression: "regex.match(\"\\\\?\", \"Exclamation!\")"
  expectedResult: false

- description: "Regex.match #75: check for trailing digits with \\d+$"
  context: {}
  expression: "regex.match(\"\\\\d+$\", \"abc123\")"
  expectedResult: true

- description: "Regex.match #76: trailing digits fail"
  context: {}
  expression: "regex.match(\"\\\\d+$\", \"123abc\")"
  expectedResult: false

- description: "Regex.match #77: underscores in word"
  context: {}
  expression: "regex.match(\"^[A-Za-z_]+$\", \"User_Name\")"
  expectedResult: true

- description: "Regex.match #78: underscores fail"
  context: {}
  expression: "regex.match(\"^[A-Za-z_]+$\", \"User-Name\")"
  expectedResult: false

- description: "Regex.match #79: partial match with group in '101 cats'"
  context: {}
  expression: "regex.match(\"(\\\\d+)\\\\s+cats\", \"101 cats!\")"
  expectedResult: true

- description: "Regex.match #80: partial match fail"
  context: {}
  expression: "regex.match(\"dogs\", \"101 cats!\")"
  expectedResult: false

- description: "Regex.match #81: hyphen in pattern"
  context: {}
  expression: "regex.match(\"a-b\", \"xa-bz\")"
  expectedResult: true

- description: "Regex.match #82: caret in bracket we do [\\^]"
  context: {}
  expression: "regex.match(\"[\\\\^]+\", \"^^^abc\")"
  expectedResult: true

- description: "Regex.match #83: anchored entire with bracket range"
  context: {}
  expression: "regex.match(\"^[0-9]{2,4}$\", \"123\")"
  expectedResult: true

- description: "Regex.match #84: anchored entire fail"
  context: {}
  expression: "regex.match(\"^[0-9]{2,4}$\", \"12345\")"
  expectedResult: false


################################################################################
# 85 - 167: regex.replace
################################################################################

- description: "Regex.replace #85: Simple replacement no capturing"
  context: {}
  expression: "regex.replace(\"hello world\", \"world\", \"there\")"
  expectedResult: "hello there"

- description: "Regex.replace #86: Replace repeated substring"
  context: {}
  expression: "regex.replace(\"abcabc\", \"abc\", \"xyz\")"
  expectedResult: "xyzxyz"

- description: "Regex.replace #87: Replace partial substring at start"
  context: {}
  expression: "regex.replace(\"abcxyz\", \"^abc\", \"AAA\")"
  expectedResult: "AAAxyz"

- description: "Regex.replace #88: No match -> string unchanged"
  context: {}
  expression: "regex.replace(\"test\", \"nomatch\", \"xxx\")"
  expectedResult: "test"

- description: "Regex.replace #89: Replace with capturing group $1"
  context: {}
  expression: "regex.replace(\"abc-123\", \"(\\\\d+)\", \"[$1]\")"
  expectedResult: "abc-[123]"

- description: "Regex.replace #90: Replace multiple occurrences"
  context: {}
  expression: "regex.replace(\"aaaa\", \"a\", \"b\")"
  expectedResult: "bbbb"

- description: "Regex.replace #91: Limit argument = 1"
  context: {}
  expression: "regex.replace(\"aaaa\", \"a\", \"b\", 1)"
  expectedResult: "baaa"

- description: "Regex.replace #92: Limit argument = 2"
  context: {}
  expression: "regex.replace(\"aaaa\", \"a\", \"b\", 2)"
  expectedResult: "bbaa"

- description: "Regex.replace #93: Limit argument more than occurrences"
  context: {}
  expression: "regex.replace(\"aaaa\", \"a\", \"b\", 10)"
  expectedResult: "bbbb"

- description: "Regex.replace #94: Replace star pattern"
  context: {}
  expression: "regex.replace(\"aaabbb\", \"a+\", \"A\")"
  expectedResult: "Abbb"

- description: "Regex.replace #95: Replace star pattern multiple segments"
  context: {}
  expression: "regex.replace(\"aaabbbccc\", \"[abc]+\", \"X\")"
  expectedResult: "X"

- description: "Regex.replace #96: Replace with parentheses in replacement"
  context: {}
  expression: "regex.replace(\"123\", \"(\\\\d)\", \"($1)\")"
  expectedResult: "(1)(2)(3)"

- description: "Regex.replace #97: Replace first numeric substring"
  context: {}
  expression: "regex.replace(\"abc123def456\", \"\\\\d+\", \"#\", 1)"
  expectedResult: "abc#def456"

- description: "Regex.replace #98: Replace all numeric substrings"
  context: {}
  expression: "regex.replace(\"abc123def456\", \"\\\\d+\", \"#\")"
  expectedResult: "abc#def#"

- description: "Regex.replace #99: Replace partial anchored"
  context: {}
  expression: "regex.replace(\"abcxyz\", \"^abc\", \"AAA\")"
  expectedResult: "AAAxyz"

- description: "Regex.replace #100: Replace anchored at end"
  context: {}
  expression: "regex.replace(\"abcxyz\", \"xyz$\", \"ZZZ\")"
  expectedResult: "abcZZZ"

- description: "Regex.replace #101: No match anchored at end -> unchanged"
  context: {}
  expression: "regex.replace(\"abcxyz\", \"zzz$\", \"---\")"
  expectedResult: "abcxyz"

- description: "Regex.replace #102: Replace parentheses literal"
  context: {}
  expression: "regex.replace(\"(abc)\", \"\\\\(abc\\\\)\", \"XYZ\")"
  expectedResult: "XYZ"

- description: "Regex.replace #103: Replace capturing group in the middle"
  context: {}
  expression: "regex.replace(\"hello 123 world\", \"(\\\\d+)\", \"=($1)=\")"
  expectedResult: "hello =(123)= world"

- description: "Regex.replace #104: Replace repeated pattern 'aa' -> 'b'"
  context: {}
  expression: "regex.replace(\"aaaa\", \"aa\", \"b\")"
  expectedResult: "bb"

- description: "Regex.replace #105: Limit usage #2"
  context: {}
  expression: "regex.replace(\"aaaa\", \"aa\", \"b\", 1)"
  expectedResult: "baa"

- description: "Regex.replace #106: context subject, literal pattern"
  context:
    txt: "foo bar foo"
  expression: "regex.replace($txt, \"foo\", \"baz\")"
  expectedResult: "baz bar baz"

- description: "Regex.replace #107: context subject, capturing group"
  context:
    sentence: "abc123"
  expression: "regex.replace($sentence, \"(\\\\d+)\", \"-num-\")"
  expectedResult: "abc-num-"

- description: "Regex.replace #108: context pattern, no capturing"
  context:
    pat: "abc"
  expression: "regex.replace(\"abcabc\", $pat, \"xxx\")"
  expectedResult: "xxxxxx"

- description: "Regex.replace #109: context pattern with capturing group"
  context:
    pat: "(ab)(cd)"
  expression: "regex.replace(\"abcd abcd\", $pat, \"$2$1\")"
  expectedResult: "cdab cdab"

- description: "Regex.replace #110: dash in pattern"
  context: {}
  expression: "regex.replace(\"12-34-56\", \"-\", \":\")"
  expectedResult: "12:34:56"

- description: "Regex.replace #111: special chars in pattern"
  context: {}
  expression: "regex.replace(\"hello? world?\", \"\\\\?\", \"!\")"
  expectedResult: "hello! world!"

- description: "Regex.replace #112: parentheses replaced with bracket"
  context: {}
  expression: "regex.replace(\"(test)\", \"\\\\(\", \"[\")"
  expectedResult: "[test)"

- description: "Regex.replace #113: multiple capturing groups"
  context: {}
  expression: "regex.replace(\"12/25/2025\", \"(\\\\d{2})/(\\\\d{2})/(\\\\d{4})\", \"$2-$1-$3\")"
  expectedResult: "25-12-2025"

- description: "Regex.replace #114: repeated capturing groups"
  context: {}
  expression: "regex.replace(\"ab ab ab\", \"(ab)\", \"<$1>\")"
  expectedResult: "<ab> <ab> <ab>"

- description: "Regex.replace #115: star quantifier in pattern"
  context: {}
  expression: "regex.replace(\"aaaaa\", \"a+\", \"X\")"
  expectedResult: "X"

- description: "Regex.replace #116: plus quantifier"
  context: {}
  expression: "regex.replace(\"bbb\", \"b+\", \"*\")"
  expectedResult: "*"

- description: "Regex.replace #117: optional quantifier in pattern"
  context: {}
  expression: "regex.replace(\"ac\", \"ab?c\", \"X\")"
  expectedResult: "X"

- description: "Regex.replace #118: curly braces quantifier"
  context: {}
  expression: "regex.replace(\"aaaa\", \"a{2}\", \"Z\")"
  expectedResult: "ZZ"

- description: "Regex.replace #119: curly braces quantifier multiple matches"
  context: {}
  expression: "regex.replace(\"aaaa\", \"a{2}\", \"Z\")"
  expectedResult: "ZZ"

- description: "Regex.replace #120: sub in the middle repeated"
  context: {}
  expression: "regex.replace(\"xyzabcabc\", \"abc\", \"ABC\")"
  expectedResult: "xyzABCABC"

- description: "Regex.replace #121: capturing group reorder"
  context: {}
  expression: "regex.replace(\"first-last\", \"(\\\\w+)-(\\\\w+)\", \"$2-$1\")"
  expectedResult: "last-first"

- description: "Regex.replace #122: partial match multiple times"
  context: {}
  expression: "regex.replace(\"abcabcabc\", \"abc\", \"xx\")"
  expectedResult: "xxxxxx"

- description: "Regex.replace #123: multiline substring not specifically tested; normal partial"
  context: {}
  expression: "regex.replace(\"line1 line2\", \"line\", \"xxx\")"
  expectedResult: "xxx1 xxx2"

- description: "Regex.replace #124: using backslash in replacement"
  context: {}
  expression: "regex.replace(\"abc\", \"abc\", \"\\\\\")"
  expectedResult: "\\"

- description: "Regex.replace #125: repeated digit capturing"
  context: {}
  expression: "regex.replace(\"123 456\", \"(\\\\d+)\", \"[$1]\")"
  expectedResult: "[123] [456]"

- description: "Regex.replace #126: limit 1 with multiple possible matches"
  context: {}
  expression: "regex.replace(\"cat cat cat\", \"cat\", \"dog\", 1)"
  expectedResult: "dog cat cat"

- description: "Regex.replace #127: limit 2 with multiple matches"
  context: {}
  expression: "regex.replace(\"cat cat cat\", \"cat\", \"dog\", 2)"
  expectedResult: "dog dog cat"

- description: "Regex.replace #128: no limit -> replace all"
  context: {}
  expression: "regex.replace(\"cat cat cat\", \"cat\", \"dog\")"
  expectedResult: "dog dog dog"

- description: "Regex.replace #129: all uppercase vowels replaced"
  context: {}
  expression: "regex.replace(\"AEIOU xyz AEI\", \"[AEIOU]\", \"_\")"
  expectedResult: "_____ xyz ___"

- description: "Regex.replace #130: remove digits"
  context: {}
  expression: "regex.replace(\"a1b2c3\", \"\\\\d\", \"\")"
  expectedResult: "abc"

- description: "Regex.replace #131: remove non-digits"
  context: {}
  expression: "regex.replace(\"a1b2c3\", \"\\\\D\", \"\")"
  expectedResult: "123"

- description: "Regex.replace #132: hyphen -> underscore"
  context: {}
  expression: "regex.replace(\"x-y-z\", \"-\", \"_\")"
  expectedResult: "x_y_z"

- description: "Regex.replace #133: replace parentheses with curly braces"
  context: {}
  expression: "regex.replace(\"(hello)\", \"\\\\(\", \"{\")"
  expectedResult: "{hello)"

- description: "Regex.replace #134: capturing group reorder #2"
  context: {}
  expression: "regex.replace(\"name:john,age:30\", \"name:(\\\\w+),age:(\\\\d+)\", \"$2:$1\")"
  expectedResult: "30:john"

- description: "Regex.replace #135: star quantifier set"
  context: {}
  expression: "regex.replace(\"xxxx\", \"x+\", \"X\")"
  expectedResult: "X"

- description: "Regex.replace #136: partial advanced pattern"
  context: {}
  expression: "regex.replace(\"abc123xyz\", \"(abc)(\\\\d+)\", \"[$2-$1]\")"
  expectedResult: "[123-abc]xyz"

- description: "Regex.replace #137: literal dot replaced"
  context: {}
  expression: "regex.replace(\"file.txt\", \"\\\\.\", \"_\")"
  expectedResult: "file_txt"

- description: "Regex.replace #138: repeated pattern 2"
  context: {}
  expression: "regex.replace(\"zzzabczzz\", \"abc\", \"ABC\")"
  expectedResult: "zzzABCzzz"

- description: "Regex.replace #139: no match -> unchanged #2"
  context: {}
  expression: "regex.replace(\"zzz\", \"abc\", \"ABC\")"
  expectedResult: "zzz"

- description: "Regex.replace #140: context subject, context pattern, context replacement"
  context:
    subj: "Test 111 Test 222"
    pat: "(\\d+)"
    repl: "<$1>"
  expression: "regex.replace($subj, $pat, $repl)"
  expectedResult: "Test <111> Test <222>"

- description: "Regex.replace #141: capturing group $1 repeated in replacement"
  context: {}
  expression: "regex.replace(\"abc123\", \"(\\\\d+)\", \"$1-$1\")"
  expectedResult: "abc123-123"

- description: "Regex.replace #142: remove all spaces"
  context:
    text: " a b c "
  expression: "regex.replace($text, \" \", \"\")"
  expectedResult: "abc"

- description: "Regex.replace #143: remove all spaces #2"
  context: {}
  expression: "regex.replace(\"some   spaced words\", \" +\", \"\")"
  expectedResult: "somespacedwords"

- description: "Regex.replace #144: capturing entire string"
  context: {}
  expression: "regex.replace(\"abc\", \"^abc$\", \"XYZ\")"
  expectedResult: "XYZ"

- description: "Regex.replace #145: remove punctuation"
  context: {}
  expression: "regex.replace(\"Hi! Are you okay?\", \"[!?]\", \"\")"
  expectedResult: "Hi Are you okay"

- description: "Regex.replace #146: repeated group with star"
  context: {}
  expression: "regex.replace(\"111222\", \"(1+)\", \"X\")"
  expectedResult: "X222"

- description: "Regex.replace #147: repeated group with star multiple times"
  context: {}
  expression: "regex.replace(\"111222333\", \"(1+)\", \"X\")"
  expectedResult: "X222333"

- description: "Regex.replace #148: advanced bracket usage"
  context: {}
  expression: "regex.replace(\"AAABBB\", \"[AB]+\", \"*\")"
  expectedResult: "*"

- description: "Regex.replace #149: single char repeated replaced"
  context: {}
  expression: "regex.replace(\"hhhh\", \"h{2}\", \"H\")"
  expectedResult: "HH"

- description: "Regex.replace #150: capturing phone format"
  context: {}
  expression: "regex.replace(\"Call 123-4567 now\", \"(\\\\d{3})-(\\\\d{4})\", \"($1) $2\")"
  expectedResult: "Call (123) 4567 now"

- description: "Regex.replace #151: limit on repeated phone format"
  context: {}
  expression: "regex.replace(\"1-1111 2-2222 3-3333\", \"(\\\\d-\\\\d+)\", \"X\", 2)"
  expectedResult: "X X 3-3333"

- description: "Regex.replace #152: no limit on repeated phone format"
  context: {}
  expression: "regex.replace(\"1-1111 2-2222 3-3333\", \"(\\\\d-\\\\d+)\", \"X\")"
  expectedResult: "X X X"

- description: "Regex.replace #153: invert bracket usage"
  context: {}
  expression: "regex.replace(\"abc123\", \"[^0-9]+\", \"-\")"
  expectedResult: "-123"

- description: "Regex.replace #154: star in replacement is literal"
  context: {}
  expression: "regex.replace(\"abc\", \"abc\", \"*\")"
  expectedResult: "*"

- description: "Regex.replace #155: capturing group re-insert partial"
  context: {}
  expression: "regex.replace(\"abcxyz\", \"(abc)(xyz)\", \"$1-$2\")"
  expectedResult: "abc-xyz"

- description: "Regex.replace #156: repeated capturing group replaced"
  context: {}
  expression: "regex.replace(\"xxxyyy\", \"(xxx)(yyy)\", \"$2$1\")"
  expectedResult: "yyyxxx"

- description: "Regex.replace #157: bracket expression digits"
  context: {}
  expression: "regex.replace(\"abc123def\", \"[0-9]+\", \"#\")"
  expectedResult: "abc#def"

- description: "Regex.replace #158: bracket expression letters"
  context: {}
  expression: "regex.replace(\"abc123def\", \"[a-zA-Z]+\", \"_\")"
  expectedResult: "_123_"

- description: "Regex.replace #159: various capturing groups"
  context: {}
  expression: "regex.replace(\"time12:34:56\", \"(\\\\w+)(\\\\d{2}):(\\\\d{2}):(\\\\d{2})\", \"$1=$2-$3-$4\")"
  expectedResult: "time=12-34-56"

- description: "Regex.replace #160: no match remain same #3"
  context: {}
  expression: "regex.replace(\"zzz\", \"xxx\", \"---\")"
  expectedResult: "zzz"

- description: "Regex.replace #161: repeated char with plus"
  context: {}
  expression: "regex.replace(\"aaaaab\", \"a+\", \"*\")"
  expectedResult: "*b"

- description: "Regex.replace #162: repeated digits capturing"
  context: {}
  expression: "regex.replace(\"111222333\", \"(\\\\d{3})(\\\\d{3})(\\\\d{3})\", \"$1-$2-$3\")"
  expectedResult: "111-222-333"

- description: "Regex.replace #163: leftover text after capturing"
  context: {}
  expression: "regex.replace(\"abcxyz\", \"^(abc)\", \"[$1]\")"
  expectedResult: "[abc]xyz"

- description: "Regex.replace #164: middle capturing group"
  context: {}
  expression: "regex.replace(\"123-456-789\", \"(\\\\d{3})-(\\\\d{3})-(\\\\d{3})\", \"$1.$2.$3\")"
  expectedResult: "123.456.789"

- description: "Regex.replace #165: removing letters from string"
  context: {}
  expression: "regex.replace(\"abc123\", \"[a-zA-Z]+\", \"\")"
  expectedResult: "123"

- description: "Regex.replace #166: removing digits from string"
  context: {}
  expression: "regex.replace(\"abc123\", \"[0-9]+\", \"\")"
  expectedResult: "abc"

- description: "Regex.replace #167: remove consecutive spaces"
  context: {}
  expression: "regex.replace(\"a    b\", \" +\", \" \")"
  expectedResult: "a b"


################################################################################
# 168 - 250: regex.find
################################################################################

- description: "Regex.find #168: Simple literal find"
  context: {}
  expression: "regex.find(\"abc\", \"zabcz\")"
  expectedResult: "abc"

- description: "Regex.find #169: No match returns empty"
  context: {}
  expression: "regex.find(\"xyz\", \"abcd\")"
  expectedResult: ""

- description: "Regex.find #170: Partial match returns the matched substring"
  context: {}
  expression: "regex.find(\"ab\", \"zzabzzab\")"
  expectedResult: "ab"

- description: "Regex.find #171: Another partial match scenario, first occurrence"
  context: {}
  expression: "regex.find(\"ab\", \"ababab\")"
  expectedResult: "ab"

- description: "Regex.find #172: Dot wildcard first match"
  context: {}
  expression: "regex.find(\"a.c\", \"xxxabczzzadc\")"
  expectedResult: "abc"

- description: "Regex.find #173: Dot wildcard mismatch => empty"
  context: {}
  expression: "regex.find(\"a.c\", \"ac\")"
  expectedResult: ""

- description: "Regex.find #174: Star quantifier find"
  context: {}
  expression: "regex.find(\"ab*c\", \"zzabbczzabczz\")"
  expectedResult: "abbc"

- description: "Regex.find #175: No star match => empty"
  context: {}
  expression: "regex.find(\"ab*c\", \"zzz\")"
  expectedResult: ""

- description: "Regex.find #176: plus quantifier"
  context: {}
  expression: "regex.find(\"ab+c\", \"xxabbcxxabcxx\")"
  expectedResult: "abbc"

- description: "Regex.find #177: plus quantifier fail => empty"
  context: {}
  expression: "regex.find(\"ab+c\", \"ac bc abc?\")"
  expectedResult: "abc"

- description: "Regex.find #178: optional quantifier"
  context: {}
  expression: "regex.find(\"ab?c\", \"ac abc\")"
  expectedResult: "ac"

- description: "Regex.find #179: anchor ^ => match only at start"
  context: {}
  expression: "regex.find(\"^abc\", \"abc123 abc\")"
  expectedResult: "abc"

- description: "Regex.find #180: anchor ^ => no match => empty"
  context: {}
  expression: "regex.find(\"^xyz\", \"abcxyz\")"
  expectedResult: ""

- description: "Regex.find #181: anchor $ => match at end"
  context: {}
  expression: "regex.find(\"abc$\", \"xxxabc\")"
  expectedResult: "abc"

- description: "Regex.find #182: anchor $ => no match => empty"
  context: {}
  expression: "regex.find(\"xyz$\", \"xyza\")"
  expectedResult: ""

- description: "Regex.find #183: full match ^...$ => find must match entire subject or empty"
  context: {}
  expression: "regex.find(\"^abc$\", \"abc\")"
  expectedResult: "abc"

- description: "Regex.find #184: full match => no => empty"
  context: {}
  expression: "regex.find(\"^abc$\", \"abcd\")"
  expectedResult: ""

- description: "Regex.find #185: character class [aeiou]"
  context: {}
  expression: "regex.find(\"[aeiou]\", \"xyzbcd\")"
  expectedResult: ""

- description: "Regex.find #186: character class => find first vowel"
  context: {}
  expression: "regex.find(\"[aeiou]\", \"sky full of vowels a e i\")"
  expectedResult: "u"

- description: "Regex.find #187: capturing group => doesn't matter, returns matched substring"
  context: {}
  expression: "regex.find(\"(abc)\", \"zzzabczzz\")"
  expectedResult: "abc"

- description: "Regex.find #188: capturing group => no match => empty"
  context: {}
  expression: "regex.find(\"(abc)\", \"abx\")"
  expectedResult: ""

- description: "Regex.find #189: bracket expression digits"
  context: {}
  expression: "regex.find(\"[0-9]+\", \"abc123def\")"
  expectedResult: "123"

- description: "Regex.find #190: bracket expression => no match => empty"
  context: {}
  expression: "regex.find(\"[0-9]+\", \"abc\")"
  expectedResult: ""

- description: "Regex.find #191: repeated substring => returns first occurrence"
  context: {}
  expression: "regex.find(\"abc\", \"abcabc\")"
  expectedResult: "abc"

- description: "Regex.find #192: star quantifier => get first match"
  context: {}
  expression: "regex.find(\"ab*c\", \"xxxabbcabc\")"
  expectedResult: "abbc"

- description: "Regex.find #193: plus quantifier => get first match"
  context: {}
  expression: "regex.find(\"ab+c\", \"xxxabbbczzz\")"
  expectedResult: "abbbc"

- description: "Regex.find #194: curly braces {2,4}"
  context: {}
  expression: "regex.find(\"a{2,4}\", \"xaaaarrr\")"
  expectedResult: "aaaa"

- description: "Regex.find #195: curly braces no match => empty"
  context: {}
  expression: "regex.find(\"a{2,4}\", \"xa\")"
  expectedResult: ""

- description: "Regex.find #196: or grouping (cat|dog)"
  context: {}
  expression: "regex.find(\"(cat|dog)\", \"I see a dog and a cat.\")"
  expectedResult: "dog"

- description: "Regex.find #197: or grouping => no match => empty"
  context: {}
  expression: "regex.find(\"(cat|dog)\", \"fish?\")"
  expectedResult: ""

- description: "Regex.find #198: word boundary => find 'world'"
  context: {}
  expression: "regex.find(\"\\\\bworld\\\\b\", \"hello world!\")"
  expectedResult: "world"

- description: "Regex.find #199: word boundary => no match"
  context: {}
  expression: "regex.find(\"\\\\bworld\\\\b\", \"myworld!\")"
  expectedResult: ""

- description: "Regex.find #200: '^$' => empty string match => likely returns '' but there's no substring? By the DSL spec, if there's no text? Actually it can match empty at start. We'll see it as '' => We'll demonstrate no text context => let's use a bigger string"
  context: {}
  expression: "regex.find(\"^$\", \"abc\")"
  expectedResult: ""

- description: "Regex.find #201: '^$' match empty subject"
  context: {}
  expression: "regex.find(\"^$\", \"\")"
  expectedResult: ""  # The first substring that matches might be ???

# Actually, with an entirely empty subject, if '^$' matches, the "first substring" is "", the DSL says if no match is found => "".
# But '^$' does match the empty string, so the 'matched substring' is "".

- description: "Regex.find #202: slash or backslash pattern => find first match"
  context: {}
  expression: "regex.find(\"\\\\\\\\\", \"some \\\\ here\")"
  expectedResult: "\\"

- description: "Regex.find #203: slash or backslash => no match => empty"
  context: {}
  expression: "regex.find(\"\\\\\\\\\", \"some / here\")"
  expectedResult: ""

- description: "Regex.find #204: phone pattern => first occurrence"
  context: {}
  expression: "regex.find(\"\\\\d{3}-\\\\d{4}\", \"Call 123-4567 or 999-8888\")"
  expectedResult: "123-4567"

- description: "Regex.find #205: phone pattern => no match => empty"
  context: {}
  expression: "regex.find(\"\\\\d{3}-\\\\d{4}\", \"No phone\")"
  expectedResult: ""

- description: "Regex.find #206: partial email-like"
  context: {}
  expression: "regex.find(\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}\", \"my mail is test@example.com now.\")"
  expectedResult: "test@example.com"

- description: "Regex.find #207: email-like => not found => empty"
  context: {}
  expression: "regex.find(\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}\", \"no email here.\")"
  expectedResult: ""

- description: "Regex.find #208: context pattern, literal"
  context:
    pat: "abc"
    str: "zzabczz"
  expression: "regex.find($pat, $str)"
  expectedResult: "abc"

- description: "Regex.find #209: context pattern => no match => empty"
  context:
    pat: "xyz"
    str: "abcabc"
  expression: "regex.find($pat, $str)"
  expectedResult: ""

- description: "Regex.find #210: partial match with capturing group => returns group or entire match? DSL returns entire match"
  context: {}
  expression: "regex.find(\"(abc)\", \"12abc34\")"
  expectedResult: "abc"

- description: "Regex.find #211: repeated pattern => first found"
  context: {}
  expression: "regex.find(\"(ab)+\", \"zzababzz\")"
  expectedResult: "abab"

- description: "Regex.find #212: star quantifier => get minimal first match"
  context: {}
  expression: "regex.find(\"a*b\", \"xxxaaabxxx\")"
  expectedResult: "aaab"

- description: "Regex.find #213: plus quantifier => first found"
  context: {}
  expression: "regex.find(\"a+b\", \"zzaaaabzzz\")"
  expectedResult: "aaaab"

- description: "Regex.find #214: optional quantifier => 'ab?c'"
  context: {}
  expression: "regex.find(\"ab?c\", \"xxabcxxacxx\")"
  expectedResult: "abc"

- description: "Regex.find #215: curly braces => 'a{2,3}'"
  context: {}
  expression: "regex.find(\"a{2,3}\", \"xxaaaxx\")"
  expectedResult: "aaa"

- description: "Regex.find #216: curly braces => no match => empty"
  context: {}
  expression: "regex.find(\"a{2,3}\", \"xa\")"
  expectedResult: ""

- description: "Regex.find #217: or grouping => (cat|dog)"
  context: {}
  expression: "regex.find(\"(cat|dog)\", \"dog cat bird\")"
  expectedResult: "dog"

- description: "Regex.find #218: or grouping => second occurrence not relevant => first match"
  context: {}
  expression: "regex.find(\"(cat|dog)\", \"xxx cat dog xxx\")"
  expectedResult: "cat"

- description: "Regex.find #219: word boundary => find first match"
  context: {}
  expression: "regex.find(\"\\\\bcat\\\\b\", \"xx cat cat \")"
  expectedResult: "cat"

- description: "Regex.find #220: no match => empty #2"
  context: {}
  expression: "regex.find(\"xyz\", \"abc xyz?\")"
  expectedResult: "xyz"

# Actually that does match. There's substring 'xyz' in "abc xyz?", so first match => "xyz" => not empty
# Let's fix the description or the pattern. The description says no match => empty, but the input has " xyz?" => that does match "xyz"
# We'll fix the test to actually yield no match:

- description: "Regex.find #220: no match => empty #2 (corrected test)"
  context: {}
  expression: "regex.find(\"zzz\", \"abc xyz?\")"
  expectedResult: ""

- description: "Regex.find #221: anchor ^"
  context: {}
  expression: "regex.find(\"^abc\", \"abc xyz abc\")"
  expectedResult: "abc"

- description: "Regex.find #222: anchor ^ no match => empty"
  context: {}
  expression: "regex.find(\"^abc\", \"xabc\")"
  expectedResult: ""

- description: "Regex.find #223: anchor $ => end"
  context: {}
  expression: "regex.find(\"abc$\", \"xyzabc\")"
  expectedResult: "abc"

- description: "Regex.find #224: anchor $ => no match => empty"
  context: {}
  expression: "regex.find(\"abc$\", \"abc xyz\")"
  expectedResult: ""

- description: "Regex.find #225: bracket range => [A-Z]"
  context: {}
  expression: "regex.find(\"[A-Z]+\", \"abcDEFGxyz\")"
  expectedResult: "DEFG"

- description: "Regex.find #226: bracket range => no uppercase => empty"
  context: {}
  expression: "regex.find(\"[A-Z]+\", \"abcdef\")"
  expectedResult: ""

- description: "Regex.find #227: extracting number from string"
  context: {}
  expression: "regex.find(\"\\\\d+\", \"id=1234&val=5678\")"
  expectedResult: "1234"

- description: "Regex.find #228: capturing groups do not change returned substring"
  context: {}
  expression: "regex.find(\"(\\\\d+)-(\\\\d+)\", \"123-456 789-012\")"
  expectedResult: "123-456"

- description: "Regex.find #229: leading spaces partial"
  context: {}
  expression: "regex.find(\"\\\\s+\", \"   abc\")"
  expectedResult: "   "

- description: "Regex.find #230: trailing spaces partial"
  context: {}
  expression: "regex.find(\"\\\\s+\", \"abc   \")"
  expectedResult: "   "

- description: "Regex.find #231: repeated pattern sub"
  context: {}
  expression: "regex.find(\"(ab)+\", \"zzababab\")"
  expectedResult: "ababab"

- description: "Regex.find #232: question mark literal"
  context: {}
  expression: "regex.find(\"\\\\?\", \"Does this match?\")"
  expectedResult: "?"

- description: "Regex.find #233: question mark literal => no match => empty"
  context: {}
  expression: "regex.find(\"\\\\?\", \"No exclamation!\")"
  expectedResult: ""

- description: "Regex.find #234: phone format => first from text"
  context:
    text: "Phones: 111-2222 or 333-4444"
  expression: "regex.find(\"\\\\d{3}-\\\\d{4}\", $text)"
  expectedResult: "111-2222"

- description: "Regex.find #235: partial with dot star => returns earliest match"
  context: {}
  expression: "regex.find(\"a.*?b\", \"xa---b---ab\")"
  expectedResult: "a---b"

- description: "Regex.find #236: star greedy => we rely on the first match"
  context: {}
  expression: "regex.find(\"a.*b\", \"abXabY\")"
  expectedResult: "abXab"

- description: "Regex.find #237: repeating group => first found"
  context: {}
  expression: "regex.find(\"(xy)+\", \"zzzxyxyzzz\")"
  expectedResult: "xyxy"

- description: "Regex.find #238: bracket set => [12]+ => first match is '1'"
  context: {}
  expression: "regex.find(\"[12]+\", \"xyz123\")"
  expectedResult: "12"


- description: "Regex.find #239: repeated bracket set => first match is '111'"
  context: {}
  expression: "regex.find(\"[1]+\", \"zzz111222\")"
  expectedResult: "111"

- description: "Regex.find #240: parentheses in subject => literal check"
  context: {}
  expression: "regex.find(\"\\\\(\\\\d+\\\\)\", \"call(123) or (456)\")"
  expectedResult: "(123)"

- description: "Regex.find #241: parentheses mismatch => empty"
  context: {}
  expression: "regex.find(\"\\\\(\\\\d+\\\\)\", \"(not digits)\")"
  expectedResult: ""

- description: "Regex.find #242: capturing group not returned alone"
  context: {}
  expression: "regex.find(\"(ab)(cd)\", \"abcdxxabcd\")"
  expectedResult: "abcd"

- description: "Regex.find #243: or pattern => 'cat|dog'"
  context:
    s: "I see a cat and dog"
  expression: "regex.find(\"(cat|dog)\", $s)"
  expectedResult: "cat"

- description: "Regex.find #244: word boundary => partial second word"
  context: {}
  expression: "regex.find(\"\\\\btest\\\\b\", \"xx test test xx\")"
  expectedResult: "test"

- description: "Regex.find #245: no capturing => standard partial match"
  context: {}
  expression: "regex.find(\"abc\", \"zabcabc\")"
  expectedResult: "abc"

- description: "Regex.find #246: anchor plus bracket => ^[A-Z]+"
  context: {}
  expression: "regex.find(\"^[A-Z]+\", \"ABCdef GHI\")"
  expectedResult: "ABC"

- description: "Regex.find #247: anchor plus bracket => no match => empty"
  context: {}
  expression: "regex.find(\"^[A-Z]+\", \"abc\")"
  expectedResult: ""

- description: "Regex.find #248: decimal capturing => find first decimal"
  context: {}
  expression: "regex.find(\"\\\\d+\\\\.\\\\d+\", \"price=12.34, next=5.67\")"
  expectedResult: "12.34"

- description: "Regex.find #249: decimal capturing => not found => empty"
  context: {}
  expression: "regex.find(\"\\\\d+\\\\.\\\\d+\", \"no decimals?\")"
  expectedResult: ""

- description: "Regex.find #250: wildcard find => first match"
  context: {}
  expression: "regex.find(\"a.c\", \"xaacabc\")"
  expectedResult: "aac"

# 250 Positive Path Test Cases Using the array.* Library
# ------------------------------------------------------
# The array library functions:
#   1) array.contains(collection, value) -> boolean
#   2) array.find(collection, subfield, matchVal[, defaultObj]) -> object
#   3) array.first(arr[, defaultVal]) -> same type
#   4) array.last(arr[, defaultVal]) -> same type
#   5) array.extract(collection, subfield[, defaultVal]) -> array
#   6) array.sort(arr[, ascending]) -> array
#   7) array.flatten(arr) -> array
#
# This file includes 250 total successâ€‘path tests (no errors).
#
# Organization:
#   - Tests #1â€‘#35:    array.contains
#   - Tests #36â€‘#70:   array.find
#   - Tests #71â€‘#105:  array.first
#   - Tests #106â€‘#140: array.last
#   - Tests #141â€‘#175: array.extract
#   - Tests #176â€‘#210: array.sort
#   - Tests #211â€‘#245: array.flatten
#   - Tests #246â€‘#250: Misc extra/combined usage

################################################################################
# 1 - 35: array.contains
################################################################################

- description: "array.contains #1: Basic integer found"
  context:
    arr: [1, 2, 3]
  expression: "array.contains($arr, 2)"
  expectedResult: true

- description: "array.contains #2: Basic integer not found"
  context:
    arr: [1, 2, 3]
  expression: "array.contains($arr, 4)"
  expectedResult: false

- description: "array.contains #3: Float found"
  context:
    nums: [1.1, 2.2, 3.3]
  expression: "array.contains($nums, 2.2)"
  expectedResult: true

- description: "array.contains #4: Float not found"
  context:
    nums: [1.1, 2.2, 3.3]
  expression: "array.contains($nums, 4.4)"
  expectedResult: false

- description: "array.contains #5: String found"
  context:
    words: ["apple", "banana", "cherry"]
  expression: "array.contains($words, \"banana\")"
  expectedResult: true

- description: "array.contains #6: String not found"
  context:
    words: ["apple", "banana", "cherry"]
  expression: "array.contains($words, \"grape\")"
  expectedResult: false

- description: "array.contains #7: Boolean found"
  context:
    bools: [true, false]
  expression: "array.contains($bools, false)"
  expectedResult: true

- description: "array.contains #8: Boolean not found"
  context:
    bools: [true]
  expression: "array.contains($bools, false)"
  expectedResult: false

- description: "array.contains #9: Null found"
  context:
    mixed: [1, null, 2]
  expression: "array.contains($mixed, null)"
  expectedResult: true

- description: "array.contains #10: Null not found"
  context:
    none: [1, 2]
  expression: "array.contains($none, null)"
  expectedResult: false

- description: "array.contains #11: Large integer found"
  context:
    bigs: [1000, 2000, 3000]
  expression: "array.contains($bigs, 3000)"
  expectedResult: true

- description: "array.contains #12: Large integer not found"
  context:
    bigs: [1000, 2000, 3000]
  expression: "array.contains($bigs, 4000)"
  expectedResult: false

- description: "array.contains #13: Mixed array, integer found"
  context:
    mix: ["test", 5, true]
  expression: "array.contains($mix, 5)"
  expectedResult: true

- description: "array.contains #14: Mixed array, string found"
  context:
    mix: ["test", 5, true]
  expression: "array.contains($mix, \"test\")"
  expectedResult: true

- description: "array.contains #15: Mixed array, boolean not found"
  context:
    mix: [1, "two", null]
  expression: "array.contains($mix, true)"
  expectedResult: false

- description: "array.contains #16: Empty array => false"
  context:
    empty: []
  expression: "array.contains($empty, 1)"
  expectedResult: false

- description: "array.contains #17: Single element array => found"
  context:
    single: [42]
  expression: "array.contains($single, 42)"
  expectedResult: true

- description: "array.contains #18: Single element array => not found"
  context:
    single: [42]
  expression: "array.contains($single, 43)"
  expectedResult: false

- description: "array.contains #19: Checking float equality precisely"
  context:
    arr: [0.5, 1.5, 2.5]
  expression: "array.contains($arr, 1.5)"
  expectedResult: true

- description: "array.contains #20: Checking float not in array"
  context:
    arr: [0.5, 1.5, 2.5]
  expression: "array.contains($arr, 1.7)"
  expectedResult: false

- description: "array.contains #21: Negative integer found"
  context:
    arr: [-1, -2, -3]
  expression: "array.contains($arr, -2)"
  expectedResult: true

- description: "array.contains #22: Negative integer not found"
  context:
    arr: [-1, -2, -3]
  expression: "array.contains($arr, -4)"
  expectedResult: false

- description: "array.contains #23: Negative float found"
  context:
    arr: [-1.1, -2.2, -3.3]
  expression: "array.contains($arr, -2.2)"
  expectedResult: true

- description: "array.contains #24: Negative float not found"
  context:
    arr: [-1.1, -2.2, -3.3]
  expression: "array.contains($arr, -2.0)"
  expectedResult: false

- description: "array.contains #25: Zero integer found"
  context:
    arr: [0, 1, 2]
  expression: "array.contains($arr, 0)"
  expectedResult: true

- description: "array.contains #26: Zero integer not found"
  context:
    arr: [1, 2, 3]
  expression: "array.contains($arr, 0)"
  expectedResult: false

- description: "array.contains #27: Zero float found"
  context:
    arr: [0.0, 1.0]
  expression: "array.contains($arr, 0.0)"
  expectedResult: true

- description: "array.contains #28: Zero float not found"
  context:
    arr: [0.1, 0.2]
  expression: "array.contains($arr, 0.0)"
  expectedResult: false

- description: "array.contains #29: Multiple duplicates, found"
  context:
    arr: [1, 2, 2, 3]
  expression: "array.contains($arr, 2)"
  expectedResult: true

- description: "array.contains #30: Substring string not found"
  context:
    arr: ["hello", "world"]
  expression: "array.contains($arr, \"wor\")"
  expectedResult: false

- description: "array.contains #31: Full string match"
  context:
    arr: ["abc", "def", "ghi"]
  expression: "array.contains($arr, \"def\")"
  expectedResult: true

- description: "array.contains #32: Boolean true in array"
  context:
    arr: [false, true]
  expression: "array.contains($arr, true)"
  expectedResult: true

- description: "array.contains #33: Boolean false not in array"
  context:
    arr: [true, true]
  expression: "array.contains($arr, false)"
  expectedResult: false

- description: "array.contains #34: Large floats found"
  context:
    arr: [100.5, 200.5, 300.5]
  expression: "array.contains($arr, 200.5)"
  expectedResult: true

- description: "array.contains #35: Large floats not found"
  context:
    arr: [100.5, 200.5, 300.5]
  expression: "array.contains($arr, 500.5)"
  expectedResult: false

################################################################################
# 36 - 70: array.find(collection, subfield, matchVal[, defaultObj])
#   -> object
################################################################################

- description: "array.find #36: Find object by subfield matchVal"
  context:
    items:
      - {id: 1, name: "Apple"}
      - {id: 2, name: "Banana"}
  expression: "array.find($items, 'name', 'Banana')"
  expectedResult:
    id: 2
    name: "Banana"

- description: "array.find #37: First match among multiple"
  context:
    products:
      - {sku: "abc", cost: 10}
      - {sku: "abc", cost: 12}
  expression: "array.find($products, 'sku', 'abc')"
  expectedResult:
    sku: "abc"
    cost: 10

- description: "array.find #38: Single object array => match"
  context:
    single: [ { key: "val" } ]
  expression: "array.find($single, \"key\", \"val\")"
  expectedResult:
    key: "val"

- description: "array.find #39: Single object array => mismatch => defaultObj"
  context:
    single: [ { key: "val" } ]
  expression: "array.find($single, 'key', 'other', { notFound: true })"
  expectedResult:
    notFound: true

- description: "array.find #40: Multi objects => last has match => returns first match only"
  context:
    list:
      - {type: "A"}
      - {type: "B"}
      - {type: "A"}
  expression: "array.find($list, 'type', 'A')"
  expectedResult:
    type: "A"

- description: "array.find #41: No match => defaultObj returned"
  context:
    users:
      - {id: 1, active: false}
      - {id: 2, active: false}
  expression: "array.find($users, 'active', true, {fallback: true})"
  expectedResult:
    fallback: true

- description: "array.find #42: No match => defaultObj not provided => but positive path means we supply defaultObj"
  context:
    data:
      - {flag: true}
      - {flag: true}
  expression: "array.find($data, 'flag', false, {noMatch: true})"
  expectedResult:
    noMatch: true

- description: "array.find #43: Subfield is float, matchVal is float"
  context:
    arr:
      - {price: 1.5}
      - {price: 2.0}
  expression: "array.find($arr, 'price', 1.5)"
  expectedResult:
    price: 1.5

- description: "array.find #44: Subfield is int, matchVal is int"
  context:
    arr:
      - {val: 10}
      - {val: 20}
  expression: "array.find($arr, 'val', 20)"
  expectedResult:
    val: 20

- description: "array.find #45: Subfield is string, matchVal is string => multiple objects"
  context:
    arr:
      - {color: "red"}
      - {color: "blue"}
      - {color: "green"}
  expression: "array.find($arr, 'color', 'blue')"
  expectedResult:
    color: "blue"

- description: "array.find #46: All subfields are null => matchVal null => returns first"
  context:
    arr:
      - {val: null}
      - {val: null}
  expression: "array.find($arr, 'val', null)"
  expectedResult:
    val: null

- description: "array.find #47: partial subfields => the objects do have subfield => matchVal found"
  context:
    arr:
      - {desc: "XYZ"}
      - {desc: "ABC"}
  expression: "array.find($arr, 'desc', 'ABC')"
  expectedResult:
    desc: "ABC"

- description: "array.find #48: partial subfields => no match => default"
  context:
    arr:
      - {desc: "XYZ"}
      - {desc: "ABC"}
  expression: "array.find($arr, 'desc', 'NOPE', {defaulted: true})"
  expectedResult:
    defaulted: true

- description: "array.find #49: negative int subfield => found"
  context:
    arr:
      - {num: -10}
      - {num: 5}
  expression: "array.find($arr, 'num', -10)"
  expectedResult:
    num: -10

- description: "array.find #50: negative float subfield => found"
  context:
    arr:
      - {val: -1.5}
      - {val: 2.5}
  expression: "array.find($arr, 'val', -1.5)"
  expectedResult:
    val: -1.5

- description: "array.find #51: boolean subfield => found"
  context:
    arr:
      - {active: false}
      - {active: true}
  expression: "array.find($arr, 'active', true)"
  expectedResult:
    active: true

- description: "array.find #52: boolean subfield => not found => default"
  context:
    arr:
      - {active: false}
      - {active: false}
  expression: "array.find($arr, 'active', true, {def: 'no match'})"
  expectedResult:
    def: "no match"

- description: "array.find #53: multiple matches => first returned"
  context:
    arr:
      - {code: 123, name: "First"}
      - {code: 123, name: "Second"}
  expression: "array.find($arr, 'code', 123)"
  expectedResult:
    code: 123
    name: "First"

- description: "array.find #54: subfield is 0 => found"
  context:
    arr:
      - {x: 0}
      - {x: 1}
  expression: "array.find($arr, 'x', 0)"
  expectedResult:
    x: 0

- description: "array.find #55: subfield is 0 => not found => default"
  context:
    arr:
      - {x: 1}
  expression: "array.find($arr, 'x', 0, {fallback: true})"
  expectedResult:
    fallback: true

- description: "array.find #56: subfield is empty string => found"
  context:
    arr:
      - {str: ""}
      - {str: "nonempty"}
  expression: "array.find($arr, 'str', '')"
  expectedResult:
    str: ""

- description: "array.find #57: subfield is empty string => not found => default"
  context:
    arr:
      - {str: "a"}
  expression: "array.find($arr, 'str', '', {d:'def'})"
  expectedResult:
    d: "def"

- description: "array.find #58: subfield = 'cat', matchVal = 'cat'"
  context:
    arr:
      - {animal: "cat", id: 1}
      - {animal: "dog", id: 2}
  expression: "array.find($arr, 'animal', 'cat')"
  expectedResult:
    animal: "cat"
    id: 1

- description: "array.find #59: subfield = 'dog', matchVal mismatch => default"
  context:
    arr:
      - {animal: "cat"}
  expression: "array.find($arr, 'animal', 'dog', {msg:'not found'})"
  expectedResult:
    msg: "not found"

- description: "array.find #60: multi type subfield => found with float"
  context:
    arr:
      - {val: 2}
      - {val: 2.0}
  expression: "array.find($arr, 'val', 2.0)"
  expectedResult:
    val: 2.0

- description: "array.find #61: multi type subfield => found with int"
  context:
    arr:
      - {val: 2}
      - {val: 2.0}
  expression: "array.find($arr, 'val', 2)"
  expectedResult:
    val: 2

- description: "array.find #62: subfield is negative large int => found"
  context:
    arr:
      - {n: -1000}
      - {n: -999}
  expression: "array.find($arr, 'n', -999)"
  expectedResult:
    n: -999

- description: "array.find #63: subfield is large float => found"
  context:
    arr:
      - {val: 1234.5}
      - {val: 9999.9}
  expression: "array.find($arr, 'val', 9999.9)"
  expectedResult:
    val: 9999.9

- description: "array.find #64: subfield repeated => first returned"
  context:
    arr:
      - {k: 'x', extra: 1}
      - {k: 'x', extra: 2}
      - {k: 'y', extra: 3}
  expression: "array.find($arr, 'k', 'x')"
  expectedResult:
    k: "x"
    extra: 1

- description: "array.find #65: subfield repeated => different fallback not used"
  context:
    arr:
      - {k: 'a'}
      - {k: 'b'}
  expression: "array.find($arr, 'k', 'b', {temp:true})"
  expectedResult:
    k: "b"

- description: "array.find #66: subfield is boolean true => found"
  context:
    arr:
      - {"on": false}
      - {"on": true}
  expression: "array.find($arr, 'on', true)"
  expectedResult:
    "on": true

- description: "array.find #67: subfield is boolean false => found"
  context:
    arr:
      - {flag: false}
      - {flag: true}
  expression: "array.find($arr, 'flag', false)"
  expectedResult:
    flag: false

- description: "array.find #68: array of 2 objects => no match => fallback"
  context:
    arr:
      - {a: 1}
      - {a: 2}
  expression: "array.find($arr, 'a', 3, {none:true})"
  expectedResult:
    none: true

- description: "array.find #69: subfield is null => found"
  context:
    arr:
      - {val: null}
      - {val: 2}
  expression: "array.find($arr, 'val', null)"
  expectedResult:
    val: null

- description: "array.find #70: subfield is null => no match => fallback"
  context:
    arr:
      - {val: 1}
      - {val: 2}
  expression: "array.find($arr, 'val', null, {res:'fallback'})"
  expectedResult:
    res: "fallback"

################################################################################
# 71 - 105: array.first(arr[, defaultVal]) -> same type
################################################################################

- description: "array.first #71: Basic integer array"
  context:
    nums: [10, 20, 30]
  expression: "array.first($nums)"
  expectedResult: 10

- description: "array.first #72: Single element array"
  context:
    single: [42]
  expression: "array.first($single)"
  expectedResult: 42

- description: "array.first #73: Empty array => use defaultVal"
  context:
    emptyArr: []
  expression: "array.first($emptyArr, 999)"
  expectedResult: 999

- description: "array.first #74: No defaultVal but not empty"
  context:
    arr: ["apple", "banana"]
  expression: "array.first($arr)"
  expectedResult: "apple"

- description: "array.first #75: Float array => first is float"
  context:
    floats: [1.1, 2.2, 3.3]
  expression: "array.first($floats)"
  expectedResult: 1.1

- description: "array.first #76: Boolean array => first is true"
  context:
    bools: [true, false]
  expression: "array.first($bools)"
  expectedResult: true

- description: "array.first #77: Boolean array => first is false"
  context:
    bools: [false, true]
  expression: "array.first($bools)"
  expectedResult: false

- description: "array.first #78: Mixed array => first is string"
  context:
    mix: ["x", 2, true]
  expression: "array.first($mix)"
  expectedResult: "x"

- description: "array.first #79: Mixed array => first is int"
  context:
    mix: [10, "x", null]
  expression: "array.first($mix)"
  expectedResult: 10

- description: "array.first #80: Array of objects => returns first object"
  context:
    objs:
      - {id: 1, val: "a"}
      - {id: 2, val: "b"}
  expression: "array.first($objs)"
  expectedResult:
    id: 1
    val: "a"

- description: "array.first #81: Large array => just pick first"
  context:
    bigArr: [100, 200, 300, 400, 500]
  expression: "array.first($bigArr)"
  expectedResult: 100

- description: "array.first #82: Negative ints => first is negative"
  context:
    arr: [-5, -4, -3]
  expression: "array.first($arr)"
  expectedResult: -5

- description: "array.first #83: Negative floats => first is -1.1"
  context:
    arr: [-1.1, -2.2]
  expression: "array.first($arr)"
  expectedResult: -1.1

- description: "array.first #84: Zero is first"
  context:
    arr: [0, 1, 2]
  expression: "array.first($arr)"
  expectedResult: 0

- description: "array.first #85: Empty array => use defaultVal string"
  context:
    arr: []
  expression: "array.first($arr, \"fallback\")"
  expectedResult: "fallback"

- description: "array.first #86: Empty array => use defaultVal boolean"
  context:
    arr: []
  expression: "array.first($arr, false)"
  expectedResult: false

- description: "array.first #87: Single null element => first is null"
  context:
    arr: [null]
  expression: "array.first($arr)"
  expectedResult: null

- description: "array.first #88: Several elements => pick first float"
  context:
    arr: [3.14, 2.71, 1.0]
  expression: "array.first($arr)"
  expectedResult: 3.14

- description: "array.first #89: nested array as first element => return that array"
  context:
    arr: [[1,2], 3, 4]
  expression: "array.first($arr)"
  expectedResult: [1,2]

- description: "array.first #90: object as first"
  context:
    arr:
      - {foo: "bar"}
      - {alpha: "beta"}
  expression: "array.first($arr)"
  expectedResult:
    foo: "bar"

- description: "array.first #91: large integer first"
  context:
    arr: [999999999999, 2]
  expression: "array.first($arr)"
  expectedResult: 999999999999

- description: "array.first #92: empty array => defaultVal int"
  context:
    arr: []
  expression: "array.first($arr, 123)"
  expectedResult: 123

- description: "array.first #93: multiple booleans => pick first"
  context:
    arr: [false, true, true]
  expression: "array.first($arr)"
  expectedResult: false

- description: "array.first #94: multiple strings => pick first"
  context:
    arr: ["hello", "world"]
  expression: "array.first($arr)"
  expectedResult: "hello"

- description: "array.first #95: multiple floats => pick first"
  context:
    arr: [0.01, 0.02, 0.03]
  expression: "array.first($arr)"
  expectedResult: 0.01

- description: "array.first #96: empty array => defaultVal object"
  context:
    arr: []
  expression: "array.first($arr, {fallback:true})"
  expectedResult:
    fallback: true

- description: "array.first #97: single object => returns that object"
  context:
    arr:
      - {single: true}
  expression: "array.first($arr)"
  expectedResult:
    single: true

- description: "array.first #98: single boolean => true"
  context:
    arr: [true]
  expression: "array.first($arr)"
  expectedResult: true

- description: "array.first #99: single boolean => false"
  context:
    arr: [false]
  expression: "array.first($arr)"
  expectedResult: false

- description: "array.first #100: single float => 99.99"
  context:
    arr: [99.99]
  expression: "array.first($arr)"
  expectedResult: 99.99

- description: "array.first #101: string array => pick first"
  context:
    arr: ["alpha", "beta", "gamma"]
  expression: "array.first($arr)"
  expectedResult: "alpha"

- description: "array.first #102: override default but array is non-empty"
  context:
    arr: ["not empty"]
  expression: "array.first($arr, \"unused\")"
  expectedResult: "not empty"

- description: "array.first #103: 2-element array => pick first"
  context:
    arr: [5, 10]
  expression: "array.first($arr)"
  expectedResult: 5

- description: "array.first #104: null array => pick first"
  context:
    arr: [null, 2]
  expression: "array.first($arr)"
  expectedResult: null

- description: "array.first #105: empty array => defaultVal float"
  context:
    arr: []
  expression: "array.first($arr, 3.14)"
  expectedResult: 3.14

################################################################################
# 106 - 140: array.last(arr[, defaultVal]) -> same type
################################################################################

- description: "array.last #106: Basic integer array => last is 30"
  context:
    nums: [10, 20, 30]
  expression: "array.last($nums)"
  expectedResult: 30

- description: "array.last #107: Single element => last is that element"
  context:
    single: [42]
  expression: "array.last($single)"
  expectedResult: 42

- description: "array.last #108: Empty => use defaultVal"
  context:
    emptyArr: []
  expression: "array.last($emptyArr, 999)"
  expectedResult: 999

- description: "array.last #109: Float array => last is 3.3"
  context:
    floats: [1.1, 2.2, 3.3]
  expression: "array.last($floats)"
  expectedResult: 3.3

- description: "array.last #110: Boolean array => last is false"
  context:
    bools: [true, false]
  expression: "array.last($bools)"
  expectedResult: false

- description: "array.last #111: Mixed array => last is true"
  context:
    mix: ["x", 2, true]
  expression: "array.last($mix)"
  expectedResult: true

- description: "array.last #112: Mixed => last is string"
  context:
    mix: [10, "x", "end"]
  expression: "array.last($mix)"
  expectedResult: "end"

- description: "array.last #113: Array of objects => last object"
  context:
    objs:
      - {id: 1, val: "a"}
      - {id: 2, val: "b"}
  expression: "array.last($objs)"
  expectedResult:
    id: 2
    val: "b"

- description: "array.last #114: Negative ints => last is -3"
  context:
    arr: [-5, -4, -3]
  expression: "array.last($arr)"
  expectedResult: -3

- description: "array.last #115: Zero => last is 0"
  context:
    arr: [0]
  expression: "array.last($arr)"
  expectedResult: 0

- description: "array.last #116: Single null => last is null"
  context:
    arr: [null]
  expression: "array.last($arr)"
  expectedResult: null

- description: "array.last #117: 2 elements => pick second"
  context:
    arr: [5, 10]
  expression: "array.last($arr)"
  expectedResult: 10

- description: "array.last #118: 5 elements => pick last"
  context:
    arr: [1,2,3,4,99]
  expression: "array.last($arr)"
  expectedResult: 99

- description: "array.last #119: empty => defaultVal string"
  context:
    arr: []
  expression: "array.last($arr, \"none\")"
  expectedResult: "none"

- description: "array.last #120: empty => defaultVal boolean"
  context:
    arr: []
  expression: "array.last($arr, false)"
  expectedResult: false

- description: "array.last #121: multiple strings => pick last"
  context:
    arr: ["apple", "banana", "cherry"]
  expression: "array.last($arr)"
  expectedResult: "cherry"

- description: "array.last #122: multiple floats => pick last"
  context:
    arr: [0.01, 0.02, 0.03]
  expression: "array.last($arr)"
  expectedResult: 0.03

- description: "array.last #123: multiple booleans => pick last"
  context:
    arr: [false, false, true]
  expression: "array.last($arr)"
  expectedResult: true

- description: "array.last #124: single object => returns that object"
  context:
    arr:
      - {unique: true}
  expression: "array.last($arr)"
  expectedResult:
    unique: true

- description: "array.last #125: nested array => last is [9,9]"
  context:
    arr: [[1,1],[9,9]]
  expression: "array.last($arr)"
  expectedResult: [9,9]

- description: "array.last #126: override default but array not empty => unused"
  context:
    arr: [5]
  expression: "array.last($arr, 999)"
  expectedResult: 5

- description: "array.last #127: large array => pick last"
  context:
    arr: [10,20,30,40,50]
  expression: "array.last($arr)"
  expectedResult: 50

- description: "array.last #128: negative floats => pick last"
  context:
    arr: [-1.1, -2.2]
  expression: "array.last($arr)"
  expectedResult: -2.2

- description: "array.last #129: zero in middle => pick last nonzero"
  context:
    arr: [0, 1]
  expression: "array.last($arr)"
  expectedResult: 1

- description: "array.last #130: empty => defaultVal object"
  context:
    arr: []
  expression: "array.last($arr, {fallback:true})"
  expectedResult:
    fallback: true

- description: "array.last #131: multi booleans => last is false"
  context:
    arr: [true, true, false]
  expression: "array.last($arr)"
  expectedResult: false

- description: "array.last #132: multi strings => last is 'zzz'"
  context:
    arr: ["aaa","zzz"]
  expression: "array.last($arr)"
  expectedResult: "zzz"

- description: "array.last #133: multi objects => last is id=3"
  context:
    arr:
      - {id: 1}
      - {id: 3}
  expression: "array.last($arr)"
  expectedResult:
    id: 3

- description: "array.last #134: single float => 77.77"
  context:
    arr: [77.77]
  expression: "array.last($arr)"
  expectedResult: 77.77

- description: "array.last #135: single boolean => true"
  context:
    arr: [true]
  expression: "array.last($arr)"
  expectedResult: true

- description: "array.last #136: single boolean => false"
  context:
    arr: [false]
  expression: "array.last($arr)"
  expectedResult: false

- description: "array.last #137: single string => 'unique'"
  context:
    arr: ["unique"]
  expression: "array.last($arr)"
  expectedResult: "unique"

- description: "array.last #138: empty => defaultVal int"
  context:
    arr: []
  expression: "array.last($arr, 123)"
  expectedResult: 123

- description: "array.last #139: empty => defaultVal float"
  context:
    arr: []
  expression: "array.last($arr, 3.14)"
  expectedResult: 3.14

- description: "array.last #140: multi item => last is null"
  context:
    arr: [1,2,null]
  expression: "array.last($arr)"
  expectedResult: null

################################################################################
# 141 - 175: array.extract(collection, subfield[, defaultVal]) -> array
################################################################################

- description: "array.extract #141: Basic subfield extraction"
  context:
    items:
      - {price: 10}
      - {price: 20}
      - {price: 30}
  expression: "array.extract($items, 'price')"
  expectedResult: [10, 20, 30]

- description: "array.extract #142: Mixed subfield type => extract"
  context:
    data:
      - {val: 1}
      - {val: true}
      - {val: "string"}
  expression: "array.extract($data, 'val')"
  expectedResult: [1, true, "string"]

- description: "array.extract #143: Missing field => supply defaultVal => single object missing"
  context:
    arr:
      - {x: 10}
      - {}
      - {x: 30}
  expression: "array.extract($arr, 'x', 0)"
  expectedResult: [10, 0, 30]

- description: "array.extract #144: All have subfield => no default needed"
  context:
    arr:
      - {key: "a"}
      - {key: "b"}
  expression: "array.extract($arr, 'key')"
  expectedResult: ["a","b"]

- description: "array.extract #145: partial missing => default for each missing"
  context:
    arr:
      - {score: 100}
      - {}
      - {score: 300}
  expression: "array.extract($arr, 'score', -1)"
  expectedResult: [100, -1, 300]

- description: "array.extract #146: subfield is null => included as null"
  context:
    arr:
      - {v: null}
      - {v: 2}
  expression: "array.extract($arr, 'v')"
  expectedResult: [null, 2]

- description: "array.extract #147: subfield float => array of floats"
  context:
    arr:
      - {f: 1.1}
      - {f: 2.2}
  expression: "array.extract($arr, 'f')"
  expectedResult: [1.1, 2.2]

- description: "array.extract #148: subfield string => array of strings"
  context:
    arr:
      - {name: "Alice"}
      - {name: "Bob"}
  expression: "array.extract($arr, 'name')"
  expectedResult: ["Alice","Bob"]

- description: "array.extract #149: subfield boolean => array of booleans"
  context:
    arr:
      - {flag: true}
      - {flag: false}
      - {flag: true}
  expression: "array.extract($arr, 'flag')"
  expectedResult: [true, false, true]

- description: "array.extract #150: subfield missing in all => defaultVal used each time"
  context:
    arr:
      - {}
      - {}
  expression: "array.extract($arr, 'val', 99)"
  expectedResult: [99, 99]

- description: "array.extract #151: empty array => returns empty array"
  context:
    arr: []
  expression: "array.extract($arr, 'key')"
  expectedResult: []

- description: "array.extract #152: partial subfield => some missing => defaultVal"
  context:
    arr:
      - {k: 1}
      - {}
      - {k: 3}
  expression: "array.extract($arr, 'k', 0)"
  expectedResult: [1, 0, 3]

- description: "array.extract #153: all present => no defaultVal needed"
  context:
    arr:
      - {a: -1}
      - {a: -2}
  expression: "array.extract($arr, 'a')"
  expectedResult: [-1, -2]

- description: "array.extract #154: multiple objects => gather subfields"
  context:
    arr:
      - {n: 10, x: "a"}
      - {n: 20, x: "b"}
  expression: "array.extract($arr, 'n')"
  expectedResult: [10,20]

- description: "array.extract #155: large array => gather subfield"
  context:
    arr:
      - {val: 1}
      - {val: 2}
      - {val: 3}
      - {val: 4}
      - {val: 5}
  expression: "array.extract($arr, 'val')"
  expectedResult: [1,2,3,4,5]

- description: "array.extract #156: subfield is null in some => no default => null included"
  context:
    arr:
      - {v: null}
      - {v: 2}
      - {v: null}
  expression: "array.extract($arr, 'v')"
  expectedResult: [null,2,null]

- description: "array.extract #157: subfield is float or missing => defaultVal for missing"
  context:
    arr:
      - {num: 1.1}
      - {}
      - {num: 2.2}
  expression: "array.extract($arr, 'num', 0.0)"
  expectedResult: [1.1, 0.0, 2.2]

- description: "array.extract #158: subfield boolean or missing => defaultVal false"
  context:
    arr:
      - {ok: true}
      - {}
      - {ok: false}
  expression: "array.extract($arr, 'ok', false)"
  expectedResult: [true,false,false]

- description: "array.extract #159: subfield string or missing => defaultVal 'none'"
  context:
    arr:
      - {s: "hi"}
      - {}
      - {s: "there"}
  expression: "array.extract($arr, 's', 'none')"
  expectedResult: ["hi","none","there"]

- description: "array.extract #160: negative ints or missing => defaultVal -999"
  context:
    arr:
      - {n: -1}
      - {}
      - {n: -5}
  expression: "array.extract($arr, 'n', -999)"
  expectedResult: [-1, -999, -5]


- description: "array.extract #166: all missing => defaultVal each"
  context:
    arr: [{}, {}, {}]
  expression: "array.extract($arr, 'zzz', 5)"
  expectedResult: [5,5,5]

- description: "array.extract #167: partial array => gather subfield"
  context:
    arr:
      - {cost: 100}
      - {cost: 200}
      - {nope: true}  # missing cost
      - {cost: 400}
  expression: "array.extract($arr, 'cost', 0)"
  expectedResult: [100,200,0,400]

- description: "array.extract #168: single object => single-element array"
  context:
    arr:
      - {val: "X"}
  expression: "array.extract($arr, 'val')"
  expectedResult: ["X"]

- description: "array.extract #169: single object missing => defaultVal used"
  context:
    arr:
      - {}
  expression: "array.extract($arr, 'val', \"none\")"
  expectedResult: ["none"]

- description: "array.extract #170: negative float or missing => defaultVal"
  context:
    arr:
      - {f: -1.5}
      - {}
      - {f: -2.2}
  expression: "array.extract($arr, 'f', 0.0)"
  expectedResult: [-1.5,0.0,-2.2]

- description: "array.extract #171: zero subfield => keep zero"
  context:
    arr:
      - {x: 0}
      - {}
  expression: "array.extract($arr, 'x', -1)"
  expectedResult: [0, -1]

- description: "array.extract #172: multi subfield not tested, we do single subfield"
  context:
    arr:
      - {k: 'a', z: 1}
      - {k: 'b', z: 2}
  expression: "array.extract($arr, 'k')"
  expectedResult: ["a","b"]

- description: "array.extract #173: 2-element array => gather subfield"
  context:
    arr:
      - {id: 10}
      - {id: 11}
  expression: "array.extract($arr, 'id')"
  expectedResult: [10,11]

- description: "array.extract #174: empty => empty result"
  context:
    arr: []
  expression: "array.extract($arr, 'any')"
  expectedResult: []

- description: "array.extract #175: subfield is boolean => partial missing => defaultVal false"
  context:
    arr:
      - {flag: true}
      - {}
  expression: "array.extract($arr, 'flag', false)"
  expectedResult: [true,false]

################################################################################
# 176 - 210: array.sort(arr[, ascending]) -> array
################################################################################

# Note: Mixed-type arrays are not allowed in success path for sorting.
# We'll provide strictly numeric or strictly string arrays.

- description: "array.sort #176: Basic ascending integer sort"
  context:
    nums: [3,1,2]
  expression: "array.sort($nums, true)"
  expectedResult: [1,2,3]

- description: "array.sort #177: Basic descending integer sort"
  context:
    nums: [3,1,2]
  expression: "array.sort($nums, false)"
  expectedResult: [3,2,1]

- description: "array.sort #178: Default ascending if not provided"
  context:
    nums: [2,4,1]
  expression: "array.sort($nums)"
  expectedResult: [1,2,4]

- description: "array.sort #179: Single-element array => same result"
  context:
    single: [42]
  expression: "array.sort($single)"
  expectedResult: [42]

- description: "array.sort #180: Already sorted ascending => returns same"
  context:
    arr: [1,2,3]
  expression: "array.sort($arr, true)"
  expectedResult: [1,2,3]

- description: "array.sort #181: Already sorted descending => returns same if ascending=false"
  context:
    arr: [3,2,1]
  expression: "array.sort($arr, false)"
  expectedResult: [3,2,1]

- description: "array.sort #182: Reverse integer order"
  context:
    arr: [10, 30, 20]
  expression: "array.sort($arr, false)"
  expectedResult: [30,20,10]

- description: "array.sort #183: Floats ascending"
  context:
    f: [2.2, 1.1, 3.3]
  expression: "array.sort($f, true)"
  expectedResult: [1.1,2.2,3.3]

- description: "array.sort #184: Floats descending"
  context:
    f: [2.2, 1.1, 3.3]
  expression: "array.sort($f, false)"
  expectedResult: [3.3,2.2,1.1]

- description: "array.sort #185: Negative ints ascending"
  context:
    arr: [-5, -1, -3]
  expression: "array.sort($arr, true)"
  expectedResult: [-5, -3, -1]

- description: "array.sort #186: Negative ints descending"
  context:
    arr: [-5, -1, -3]
  expression: "array.sort($arr, false)"
  expectedResult: [-1, -3, -5]

- description: "array.sort #187: Negative floats ascending"
  context:
    arr: [-1.1, -3.3, -2.2]
  expression: "array.sort($arr, true)"
  expectedResult: [-3.3, -2.2, -1.1]

- description: "array.sort #188: Negative floats descending"
  context:
    arr: [-1.1, -3.3, -2.2]
  expression: "array.sort($arr, false)"
  expectedResult: [-1.1, -2.2, -3.3]

- description: "array.sort #189: Zero included ascending"
  context:
    arr: [2, 0, 1]
  expression: "array.sort($arr, true)"
  expectedResult: [0,1,2]

- description: "array.sort #190: Zero included descending"
  context:
    arr: [2, 0, 1]
  expression: "array.sort($arr, false)"
  expectedResult: [2,1,0]

- description: "array.sort #191: Large ints ascending"
  context:
    arr: [1000, 5000, 3000]
  expression: "array.sort($arr, true)"
  expectedResult: [1000,3000,5000]

- description: "array.sort #192: Large ints descending"
  context:
    arr: [1000, 5000, 3000]
  expression: "array.sort($arr, false)"
  expectedResult: [5000,3000,1000]

- description: "array.sort #193: Strings ascending"
  context:
    s: ["banana", "apple", "cherry"]
  expression: "array.sort($s, true)"
  expectedResult: ["apple","banana","cherry"]

- description: "array.sort #194: Strings descending"
  context:
    s: ["banana", "apple", "cherry"]
  expression: "array.sort($s, false)"
  expectedResult: ["cherry","banana","apple"]

- description: "array.sort #195: Single string => same result"
  context:
    s: ["one"]
  expression: "array.sort($s)"
  expectedResult: ["one"]

- description: "array.sort #196: Already sorted strings ascending => same"
  context:
    s: ["alpha","beta","gamma"]
  expression: "array.sort($s, true)"
  expectedResult: ["alpha","beta","gamma"]

- description: "array.sort #197: Already sorted strings descending => same"
  context:
    s: ["gamma","beta","alpha"]
  expression: "array.sort($s, false)"
  expectedResult: ["gamma","beta","alpha"]

- description: "array.sort #198: Mixed letter case ascending"
  context:
    s: ["dog","Cat","bird"]
  expression: "array.sort($s, true)"
  expectedResult: ["Cat","bird","dog"]
  # ASCII sort: capital letters < lower letters

- description: "array.sort #199: Mixed letter case descending"
  context:
    s: ["dog","Cat","bird"]
  expression: "array.sort($s, false)"
  expectedResult: ["dog","bird","Cat"]

- description: "array.sort #200: Reversed float => ascending"
  context:
    arr: [9.9, 5.5, 1.1]
  expression: "array.sort($arr, true)"
  expectedResult: [1.1,5.5,9.9]

- description: "array.sort #201: Reversed float => descending"
  context:
    arr: [1.1, 2.2, 3.3]
  expression: "array.sort($arr, false)"
  expectedResult: [3.3,2.2,1.1]

- description: "array.sort #202: Three identical ints => ascending => same order"
  context:
    arr: [2,2,2]
  expression: "array.sort($arr, true)"
  expectedResult: [2,2,2]

- description: "array.sort #203: Three identical strings => same order"
  context:
    arr: ["x","x","x"]
  expression: "array.sort($arr, false)"
  expectedResult: ["x","x","x"]

- description: "array.sort #204: Five ints random => ascending"
  context:
    arr: [10,5,7,1,9]
  expression: "array.sort($arr, true)"
  expectedResult: [1,5,7,9,10]

- description: "array.sort #205: Five ints random => descending"
  context:
    arr: [10,5,7,1,9]
  expression: "array.sort($arr, false)"
  expectedResult: [10,9,7,5,1]

- description: "array.sort #206: empty array => no change"
  context:
    arr: []
  expression: "array.sort($arr, true)"
  expectedResult: []

- description: "array.sort #207: 2-element string ascending"
  context:
    arr: ["z","a"]
  expression: "array.sort($arr, true)"
  expectedResult: ["a","z"]

- description: "array.sort #208: 2-element string descending"
  context:
    arr: ["a","z"]
  expression: "array.sort($arr, false)"
  expectedResult: ["z","a"]

- description: "array.sort #209: large floats => ascending"
  context:
    arr: [9999.9, 1000.1, 5000.5]
  expression: "array.sort($arr, true)"
  expectedResult: [1000.1,5000.5,9999.9]

- description: "array.sort #210: large floats => descending"
  context:
    arr: [1000.1, 5000.5, 9999.9]
  expression: "array.sort($arr, false)"
  expectedResult: [9999.9,5000.5,1000.1]

################################################################################
# 211 - 245: array.flatten(arr) -> array
################################################################################

# array.flatten flattens one level of subâ€‘arrays.

- description: "array.flatten #211: Simple flatten single-level subarray"
  context:
    arr: [1, [2,3], 4]
  expression: "array.flatten($arr)"
  expectedResult: [1,2,3,4]

- description: "array.flatten #212: Already flat => no change"
  context:
    arr: [1,2,3]
  expression: "array.flatten($arr)"
  expectedResult: [1,2,3]

- description: "array.flatten #213: multiple nested => only flatten one level"
  context:
    arr: [1,[2,[3]],4]
  expression: "array.flatten($arr)"
  expectedResult: [1,2,[3],4]

- description: "array.flatten #214: multiple sub-arrays"
  context:
    arr: [[1,2],[3,4]]
  expression: "array.flatten($arr)"
  expectedResult: [1,2,3,4]

- description: "array.flatten #215: three sub-arrays"
  context:
    arr: [[1],[2],[3]]
  expression: "array.flatten($arr)"
  expectedResult: [1,2,3]

- description: "array.flatten #216: sub-array containing empty array"
  context:
    arr: [10, [], 20]
  expression: "array.flatten($arr)"
  expectedResult: [10, 20]

- description: "array.flatten #217: sub-array is nested objects"
  context:
    arr: [[ {x:1}, {x:2} ], {x:3}]
  expression: "array.flatten($arr)"
  expectedResult:
    - {x:1}
    - {x:2}
    - {x:3}

- description: "array.flatten #218: single nested array => flatten to single-level"
  context:
    arr: [[1,2,3]]
  expression: "array.flatten($arr)"
  expectedResult: [1,2,3]

- description: "array.flatten #219: multiple levels => only flatten top level"
  context:
    arr: [[[1]], 2]
  expression: "array.flatten($arr)"
  expectedResult: [[1],2]

- description: "array.flatten #220: multiple sub-arrays inc. empty"
  context:
    arr: [[1,2],[],[3]]
  expression: "array.flatten($arr)"
  expectedResult: [1,2,3]

- description: "array.flatten #221: single element => if it's array => flatten"
  context:
    arr: [[5]]
  expression: "array.flatten($arr)"
  expectedResult: [5]

- description: "array.flatten #222: zero elements => remains empty array"
  context:
    arr: []
  expression: "array.flatten($arr)"
  expectedResult: []

- description: "array.flatten #223: sub-arrays with different types"
  context:
    arr: [[1,"two"], [true,null]]
  expression: "array.flatten($arr)"
  expectedResult: [1,"two",true,null]

- description: "array.flatten #224: partial nested, partial flat"
  context:
    arr: [1, [2], 3]
  expression: "array.flatten($arr)"
  expectedResult: [1,2,3]

- description: "array.flatten #225: flatten sub-arrays of objects"
  context:
    arr: [ {a:1}, [{a:2},{a:3}], {a:4} ]
  expression: "array.flatten($arr)"
  expectedResult:
    - {a:1}
    - {a:2}
    - {a:3}
    - {a:4}

- description: "array.flatten #226: flatten consecutive sub-arrays"
  context:
    arr: [[1,2],[3,4],[5,6]]
  expression: "array.flatten($arr)"
  expectedResult: [1,2,3,4,5,6]

- description: "array.flatten #227: flatten with single sub-array in middle"
  context:
    arr: ["a", [true, false], "b"]
  expression: "array.flatten($arr)"
  expectedResult: ["a", true, false, "b"]

- description: "array.flatten #228: nested 2 levels => only flatten first"
  context:
    arr: [[1, [2]], 3]
  expression: "array.flatten($arr)"
  expectedResult: [1, [2], 3]

- description: "array.flatten #229: sub-array float"
  context:
    arr: [0.1, [0.2, 0.3], 0.4]
  expression: "array.flatten($arr)"
  expectedResult: [0.1, 0.2, 0.3, 0.4]

- description: "array.flatten #230: sub-array boolean"
  context:
    arr: [true, [false,true], false]
  expression: "array.flatten($arr)"
  expectedResult: [true, false, true, false]

- description: "array.flatten #231: sub-array large ints"
  context:
    arr: [1000, [2000,3000], 4000]
  expression: "array.flatten($arr)"
  expectedResult: [1000,2000,3000,4000]

- description: "array.flatten #232: sub-array negative ints"
  context:
    arr: [-1, [-2, -3], -4]
  expression: "array.flatten($arr)"
  expectedResult: [-1, -2, -3, -4]

- description: "array.flatten #233: sub-array multiple => merges them"
  context:
    arr: [[1],[2],[3,4]]
  expression: "array.flatten($arr)"
  expectedResult: [1,2,3,4]

- description: "array.flatten #234: sub-array single object"
  context:
    arr: [ {x:1}, [{x:2}], {x:3} ]
  expression: "array.flatten($arr)"
  expectedResult:
    - {x:1}
    - {x:2}
    - {x:3}

- description: "array.flatten #235: multiple sub-arrays of strings"
  context:
    arr: [["a","b"],["c"],"d"]
  expression: "array.flatten($arr)"
  expectedResult: ["a","b","c","d"]

- description: "array.flatten #236: sub-arrays partially empty"
  context:
    arr: [[],["x"],[],["y"]]
  expression: "array.flatten($arr)"
  expectedResult: ["x","y"]

- description: "array.flatten #237: sub-arrays nested => just flatten one level"
  context:
    arr: [[["deep"]], "top"]
  expression: "array.flatten($arr)"
  expectedResult: [["deep"], "top"]

- description: "array.flatten #238: 2-level example #2"
  context:
    arr: [[1,2],[3,[4]],5]
  expression: "array.flatten($arr)"
  expectedResult: [1,2,3,[4],5]

- description: "array.flatten #239: empty top, single sub array"
  context:
    arr: [[],[1,2]]
  expression: "array.flatten($arr)"
  expectedResult: [1,2]

- description: "array.flatten #240: multiple element after flatten"
  context:
    arr: ["start",[10,20,30],"end"]
  expression: "array.flatten($arr)"
  expectedResult: ["start",10,20,30,"end"]

- description: "array.flatten #241: sub-arrays of floats"
  context:
    arr: [[1.1,2.2],[3.3],4.4]
  expression: "array.flatten($arr)"
  expectedResult: [1.1,2.2,3.3,4.4]

- description: "array.flatten #242: sub-arrays of booleans"
  context:
    arr: [[true,false],[true],false]
  expression: "array.flatten($arr)"
  expectedResult: [true,false,true,false]

- description: "array.flatten #243: sub-arrays repeated => combined"
  context:
    arr: [[1,1],[1],[1]]
  expression: "array.flatten($arr)"
  expectedResult: [1,1,1,1]

- description: "array.flatten #244: single sub-array is entire content => unwrap"
  context:
    arr: [[10,20,30]]
  expression: "array.flatten($arr)"
  expectedResult: [10,20,30]

- description: "array.flatten #245: single sub-array plus single item"
  context:
    arr: [[99], 100]
  expression: "array.flatten($arr)"
  expectedResult: [99,100]

################################################################################
# 246 - 250: Extra combined usage / Misc
################################################################################

- description: "Combined #246: array.contains + array.sort"
  context:
    nums: [3,1,2]
  expression: "array.contains(array.sort($nums, true), 2)"
  expectedResult: true

- description: "Combined #247: array.first + array.flatten"
  context:
    data: [[1,2],[3,4]]
  expression: "array.first(array.flatten($data))"
  expectedResult: 1

- description: "Combined #248: array.last + array.extract"
  context:
    people:
      - {id:1, name: "Alice"}
      - {id:2, name: "Bob"}
  expression: "array.last(array.extract($people, 'name'))"
  expectedResult: "Bob"

- description: "Combined #249: array.find + array.flatten"
  context:
    records:
      - { vals: [1,2] }
      - { vals: [3,4] }
  expression: "array.flatten([ array.find($records, 'vals', [3,4]).vals ])"
  expectedResult: [3,4]

- description: "Combined #250: array.contains => verifying subfield extraction first"
  context:
    items:
      - {price: 10}
      - {price: 20}
  expression: "array.contains(array.extract($items, 'price'), 20)"
  expectedResult: true

# 250 Positive Path Test Cases Using the cond.* Library
# -----------------------------------------------------
# The cond library functions:
#   1) cond.ifExpr(condition, thenVal, elseVal)
#   2) cond.coalesce(expr1, expr2, ...)
#   3) cond.isFieldPresent(object, fieldPath)
#
# All 250 tests are successâ€‘path (no errors). Organized as:
#   - Tests #1â€‘90:    cond.ifExpr
#   - Tests #91â€‘170:  cond.coalesce
#   - Tests #171â€‘250: cond.isFieldPresent
#
# Each test includes:
#   - description
#   - context
#   - expression
#   - expectedResult

################################################################################
# 1 - 90: cond.ifExpr(condition, thenVal, elseVal)
################################################################################

- description: "cond.ifExpr #1: True condition => returns thenVal"
  context:
    age: 20
  expression: "cond.ifExpr($age >= 18, \"adult\", \"minor\")"
  expectedResult: "adult"

- description: "cond.ifExpr #2: False condition => returns elseVal"
  context:
    age: 16
  expression: "cond.ifExpr($age >= 18, \"adult\", \"minor\")"
  expectedResult: "minor"

- description: "cond.ifExpr #3: Condition is literal true"
  context: {}
  expression: "cond.ifExpr(true, 1, 0)"
  expectedResult: 1

- description: "cond.ifExpr #4: Condition is literal false"
  context: {}
  expression: "cond.ifExpr(false, 1, 0)"
  expectedResult: 0

- description: "cond.ifExpr #5: Condition from arithmetic comparison"
  context:
    x: 5
    y: 10
  expression: "cond.ifExpr($x < $y, \"less\", \"not less\")"
  expectedResult: "less"

- description: "cond.ifExpr #6: Condition from string comparison"
  context:
    s1: "apple"
    s2: "banana"
  expression: "cond.ifExpr($s1 < $s2, \"ok\", \"no\")"
  expectedResult: "ok"

- description: "cond.ifExpr #7: Condition from boolean field"
  context:
    active: true
  expression: "cond.ifExpr($active, \"on\", \"off\")"
  expectedResult: "on"

- description: "cond.ifExpr #8: Condition from boolean field false"
  context:
    active: false
  expression: "cond.ifExpr($active, \"on\", \"off\")"
  expectedResult: "off"

- description: "cond.ifExpr #9: Condition numeric compare => negative vs zero"
  context:
    val: -1
  expression: "cond.ifExpr($val < 0, \"negative\", \"non-negative\")"
  expectedResult: "negative"

- description: "cond.ifExpr #10: Condition numeric compare => zero or more"
  context:
    val: 0
  expression: "cond.ifExpr($val <= 0, \"zeroOrLess\", \"more\")"
  expectedResult: "zeroOrLess"

- description: "cond.ifExpr #11: ThenVal is integer"
  context:
    condVal: true
  expression: "cond.ifExpr($condVal, 100, 200)"
  expectedResult: 100

- description: "cond.ifExpr #12: ElseVal is integer"
  context:
    condVal: false
  expression: "cond.ifExpr($condVal, 100, 200)"
  expectedResult: 200

- description: "cond.ifExpr #13: ThenVal is float"
  context:
    ok: true
  expression: "cond.ifExpr($ok, 3.14, 1.59)"
  expectedResult: 3.14

- description: "cond.ifExpr #14: ElseVal is float"
  context:
    ok: false
  expression: "cond.ifExpr($ok, 3.14, 1.59)"
  expectedResult: 1.59

- description: "cond.ifExpr #15: ThenVal is string"
  context:
    c: true
  expression: "cond.ifExpr($c, \"Yes\", \"No\")"
  expectedResult: "Yes"

- description: "cond.ifExpr #16: ElseVal is string"
  context:
    c: false
  expression: "cond.ifExpr($c, \"Yes\", \"No\")"
  expectedResult: "No"

- description: "cond.ifExpr #17: ThenVal is boolean"
  context:
    test: true
  expression: "cond.ifExpr($test, true, false)"
  expectedResult: true

- description: "cond.ifExpr #18: ElseVal is boolean"
  context:
    test: false
  expression: "cond.ifExpr($test, true, false)"
  expectedResult: false

- description: "cond.ifExpr #19: ThenVal is null"
  context:
    flag: true
  expression: "cond.ifExpr($flag, null, \"not null\")"
  expectedResult: null

- description: "cond.ifExpr #20: ElseVal is null"
  context:
    flag: false
  expression: "cond.ifExpr($flag, \"nonNull\", null)"
  expectedResult: null

- description: "cond.ifExpr #21: ThenVal is object"
  context:
    cond: true
  expression: "cond.ifExpr($cond, {key:1}, {key:2})"
  expectedResult:
    key: 1

- description: "cond.ifExpr #22: ElseVal is object"
  context:
    cond: false
  expression: "cond.ifExpr($cond, {key:1}, {key:2})"
  expectedResult:
    key: 2

- description: "cond.ifExpr #23: Condition is a more complex boolean expr"
  context:
    a: 5
    b: 5
  expression: "cond.ifExpr($a == $b, \"equal\", \"not equal\")"
  expectedResult: "equal"

- description: "cond.ifExpr #24: Condition is (float > int)"
  context:
    f: 3.5
    i: 3
  expression: "cond.ifExpr($f > $i, \"bigger\", \"smallerOrEq\")"
  expectedResult: "bigger"

- description: "cond.ifExpr #25: Condition with string equality => returns elseVal"
  context:
    s: "abc"
  expression: "cond.ifExpr($s == \"xyz\", 1, 0)"
  expectedResult: 0

- description: "cond.ifExpr #26: ThenVal is nested array"
  context:
    c: true
  expression: "cond.ifExpr($c, [1,2,3], [])"
  expectedResult: [1,2,3]

- description: "cond.ifExpr #27: ElseVal is nested array"
  context:
    c: false
  expression: "cond.ifExpr($c, [], [1,2,3])"
  expectedResult: [1,2,3]

- description: "cond.ifExpr #28: Condition referencing boolean context"
  context:
    check: true
    data: "hello"
  expression: "cond.ifExpr($check, $data, null)"
  expectedResult: "hello"

- description: "cond.ifExpr #29: Condition referencing numeric compare in context"
  context:
    x: 10
  expression: "cond.ifExpr($x > 5, \"high\", \"low\")"
  expectedResult: "high"

- description: "cond.ifExpr #30: Condition referencing numeric compare => false"
  context:
    x: 2
  expression: "cond.ifExpr($x > 5, \"high\", \"low\")"
  expectedResult: "low"

- description: "cond.ifExpr #31: Zero check => thenVal used"
  context:
    val: 0
  expression: "cond.ifExpr($val == 0, \"zero\", \"nonZero\")"
  expectedResult: "zero"

- description: "cond.ifExpr #32: Negative check"
  context:
    val: -5
  expression: "cond.ifExpr($val < 0, \"neg\", \"posOrZero\")"
  expectedResult: "neg"

- description: "cond.ifExpr #33: Strings equality => thenVal used"
  context:
    s: "test"
  expression: "cond.ifExpr($s == \"test\", true, false)"
  expectedResult: true

- description: "cond.ifExpr #34: Strings inequality => elseVal"
  context:
    s: "abc"
  expression: "cond.ifExpr($s != \"abc\", \"yes\", \"no\")"
  expectedResult: "no"

- description: "cond.ifExpr #35: Condition uses boolean literal => true => object result"
  context: {}
  expression: "cond.ifExpr(true, {ok:true}, {ok:false})"
  expectedResult:
    ok: true

- description: "cond.ifExpr #36: Condition uses boolean literal => false => object result"
  context: {}
  expression: "cond.ifExpr(false, {ok:true}, {ok:false})"
  expectedResult:
    ok: false

- description: "cond.ifExpr #37: Condition referencing float equality => thenVal"
  context:
    f: 3.14
  expression: "cond.ifExpr($f == 3.14, \"pi\", \"not pi\")"
  expectedResult: "pi"

- description: "cond.ifExpr #38: Condition referencing float eq => elseVal"
  context:
    f: 2.71
  expression: "cond.ifExpr($f == 3.14, \"pi\", \"not pi\")"
  expectedResult: "not pi"

- description: "cond.ifExpr #39: Condition referencing bool and numeric => thenVal"
  context:
    isOk: true
    num: 10
  expression: "cond.ifExpr($isOk && ($num > 5), \"valid\", \"invalid\")"
  expectedResult: "valid"

- description: "cond.ifExpr #40: Condition referencing bool and numeric => elseVal"
  context:
    isOk: false
    num: 10
  expression: "cond.ifExpr($isOk && ($num > 5), \"valid\", \"invalid\")"
  expectedResult: "invalid"

- description: "cond.ifExpr #41: ThenVal is array of objects"
  context:
    c: true
  expression: "cond.ifExpr($c, [{a:1},{a:2}], [])"
  expectedResult:
    - {a: 1}
    - {a: 2}

- description: "cond.ifExpr #42: ElseVal is array of objects"
  context:
    c: false
  expression: "cond.ifExpr($c, [], [{a:1},{a:2}])"
  expectedResult:
    - {a: 1}
    - {a: 2}

- description: "cond.ifExpr #43: Condition is ($a < $b) => thenVal is 100"
  context:
    a: 1
    b: 2
  expression: "cond.ifExpr($a < $b, 100, 200)"
  expectedResult: 100

- description: "cond.ifExpr #44: Condition is ($a < $b) => elseVal is 200"
  context:
    a: 5
    b: 2
  expression: "cond.ifExpr($a < $b, 100, 200)"
  expectedResult: 200

- description: "cond.ifExpr #45: Condition is compound boolean => or => thenVal"
  context:
    x: false
    y: true
  expression: "cond.ifExpr($x || $y, \"yes\", \"no\")"
  expectedResult: "yes"

- description: "cond.ifExpr #46: Condition is compound boolean => or => elseVal"
  context:
    x: false
    y: false
  expression: "cond.ifExpr($x || $y, \"yes\", \"no\")"
  expectedResult: "no"

- description: "cond.ifExpr #47: Condition is compound => and => thenVal"
  context:
    a: true
    b: true
  expression: "cond.ifExpr($a && $b, \"both true\", \"otherwise\")"
  expectedResult: "both true"

- description: "cond.ifExpr #48: Condition => and => elseVal"
  context:
    a: true
    b: false
  expression: "cond.ifExpr($a && $b, \"both true\", \"otherwise\")"
  expectedResult: "otherwise"

- description: "cond.ifExpr #49: Condition => bracket access => thenVal"
  context:
    obj:
      flag: true
  expression: "cond.ifExpr($obj['flag'], \"ok\", \"no\")"
  expectedResult: "ok"

- description: "cond.ifExpr #50: Condition => bracket => elseVal"
  context:
    obj:
      flag: false
  expression: "cond.ifExpr($obj['flag'], \"ok\", \"no\")"
  expectedResult: "no"

- description: "cond.ifExpr #51: Condition => optional chaining => thenVal"
  context:
    data:
      nested:
        valid: true
  expression: "cond.ifExpr($data?.nested?.valid, \"yes\", \"no\")"
  expectedResult: "yes"

- description: "cond.ifExpr #52: Condition => optional chaining => elseVal"
  context:
    data: {}
  expression: "cond.ifExpr($data?.nested?.valid, \"yes\", \"no\")"
  expectedResult: "no"

- description: "cond.ifExpr #53: ThenVal is negative float"
  context:
    c: true
  expression: "cond.ifExpr($c, -2.5, 0.0)"
  expectedResult: -2.5

- description: "cond.ifExpr #54: ElseVal is negative float"
  context:
    c: false
  expression: "cond.ifExpr($c, 0.0, -2.5)"
  expectedResult: -2.5

- description: "cond.ifExpr #55: ThenVal is zero"
  context:
    c: true
  expression: "cond.ifExpr($c, 0, 999)"
  expectedResult: 0

- description: "cond.ifExpr #56: ElseVal is zero"
  context:
    c: false
  expression: "cond.ifExpr($c, 999, 0)"
  expectedResult: 0

- description: "cond.ifExpr #57: ThenVal is empty string"
  context:
    c: true
  expression: "cond.ifExpr($c, \"\", \"filled\")"
  expectedResult: ""

- description: "cond.ifExpr #58: ElseVal is empty string"
  context:
    c: false
  expression: "cond.ifExpr($c, \"filled\", \"\")"
  expectedResult: ""

- description: "cond.ifExpr #59: Condition references eq => elseVal"
  context:
    val: 5
  expression: "cond.ifExpr($val == 10, \"ten\", \"not ten\")"
  expectedResult: "not ten"

- description: "cond.ifExpr #60: Condition references eq => thenVal"
  context:
    val: 10
  expression: "cond.ifExpr($val == 10, \"ten\", \"not ten\")"
  expectedResult: "ten"

- description: "cond.ifExpr #61: Condition references array.contains => thenVal"
  context:
    arr: [1,2,3]
    checkVal: 3
  expression: "cond.ifExpr(array.contains($arr, $checkVal), \"exists\", \"missing\")"
  expectedResult: "exists"

- description: "cond.ifExpr #62: Condition references array.contains => elseVal"
  context:
    arr: [1,2,3]
    checkVal: 4
  expression: "cond.ifExpr(array.contains($arr, $checkVal), \"exists\", \"missing\")"
  expectedResult: "missing"

- description: "cond.ifExpr #63: Condition references string comparison => thenVal"
  context:
    str: "Hello"
  expression: "cond.ifExpr(string.startsWith($str, \"He\"), \"startHe\", \"none\")"
  expectedResult: "startHe"

- description: "cond.ifExpr #64: Condition references string comparison => elseVal"
  context:
    str: "Hello"
  expression: "cond.ifExpr(string.endsWith($str, \"x\"), \"endX\", \"nope\")"
  expectedResult: "nope"

- description: "cond.ifExpr #65: Condition => advanced boolean => thenVal"
  context:
    x: 10
    y: 20
    b: true
  expression: "cond.ifExpr(($x < $y) && $b, \"ok\", \"fail\")"
  expectedResult: "ok"

- description: "cond.ifExpr #66: Condition => advanced boolean => elseVal"
  context:
    x: 10
    y: 20
    b: false
  expression: "cond.ifExpr(($x < $y) && $b, \"ok\", \"fail\")"
  expectedResult: "fail"

- description: "cond.ifExpr #67: Condition => multiple or => thenVal"
  context:
    a: false
    b: false
    c: true
  expression: "cond.ifExpr($a || $b || $c, 1, 0)"
  expectedResult: 1

- description: "cond.ifExpr #68: Condition => multiple or => elseVal"
  context:
    a: false
    b: false
    c: false
  expression: "cond.ifExpr($a || $b || $c, 1, 0)"
  expectedResult: 0

- description: "cond.ifExpr #69: Condition => field presence => thenVal"
  context:
    obj:
      key: "val"
  expression: "cond.ifExpr(cond.isFieldPresent($obj, \"key\"), \"hasKey\", \"noKey\")"
  expectedResult: "hasKey"

- description: "cond.ifExpr #70: Condition => field presence => elseVal"
  context:
    obj:
      other: 123
  expression: "cond.ifExpr(cond.isFieldPresent($obj, \"key\"), \"hasKey\", \"noKey\")"
  expectedResult: "noKey"

- description: "cond.ifExpr #71: ThenVal references context => str"
  context:
    flag: true
    greet: "Hi"
  expression: "cond.ifExpr($flag, $greet, \"bye\")"
  expectedResult: "Hi"

- description: "cond.ifExpr #72: ElseVal references context => str"
  context:
    flag: false
    greet: "Hello"
  expression: "cond.ifExpr($flag, \"X\", $greet)"
  expectedResult: "Hello"

- description: "cond.ifExpr #73: Condition => 1 < 2 => true => integer result"
  context: {}
  expression: "cond.ifExpr(1 < 2, 111, 222)"
  expectedResult: 111

- description: "cond.ifExpr #74: Condition => 1 > 2 => false => integer result"
  context: {}
  expression: "cond.ifExpr(1 > 2, 111, 222)"
  expectedResult: 222

- description: "cond.ifExpr #75: Condition => 'abc' < 'zzz' => true => string result"
  context: {}
  expression: "cond.ifExpr(\"abc\" < \"zzz\", \"A\", \"Z\")"
  expectedResult: "A"

- description: "cond.ifExpr #76: Condition => 'zzz' < 'abc' => false => string result"
  context: {}
  expression: "cond.ifExpr(\"zzz\" < \"abc\", \"A\", \"Z\")"
  expectedResult: "Z"

- description: "cond.ifExpr #77: Condition => literal true => array result"
  context: {}
  expression: "cond.ifExpr(true, [1,2], [])"
  expectedResult: [1,2]

- description: "cond.ifExpr #78: Condition => literal false => array result"
  context: {}
  expression: "cond.ifExpr(false, [1,2], [3,4])"
  expectedResult: [3,4]

- description: "cond.ifExpr #79: Condition => numeric eq => thenVal object"
  context:
    val: 50
  expression: "cond.ifExpr($val == 50, {res:'yes'}, {res:'no'})"
  expectedResult:
    res: "yes"

- description: "cond.ifExpr #80: Condition => numeric eq => elseVal object"
  context:
    val: 1
  expression: "cond.ifExpr($val == 50, {res:'yes'}, {res:'no'})"
  expectedResult:
    res: "no"

- description: "cond.ifExpr #81: Condition => nested parentheses => thenVal"
  context:
    a: 2
    b: 3
  expression: "cond.ifExpr((($a + 1) == $b), true, false)"
  expectedResult: true

- description: "cond.ifExpr #82: Condition => nested parentheses => elseVal"
  context:
    a: 2
    b: 5
  expression: "cond.ifExpr((($a + 1) == $b), true, false)"
  expectedResult: false

- description: "cond.ifExpr #83: Condition => bracket notation => thenVal"
  context:
    arr: [10,20]
  expression: "cond.ifExpr($arr[0] == 10, \"match\", \"no\")"
  expectedResult: "match"

- description: "cond.ifExpr #84: Condition => bracket notation => elseVal"
  context:
    arr: [10,20]
  expression: "cond.ifExpr($arr[0] == 5, \"match\", \"no\")"
  expectedResult: "no"

- description: "cond.ifExpr #85: Condition => optional chaining array => thenVal"
  context:
    data:
      nested:
        arr: [true]
  expression: "cond.ifExpr($data?.nested?.arr?[0], \"T\", \"F\")"
  expectedResult: "T"

- description: "cond.ifExpr #86: Condition => optional chain => elseVal"
  context:
    data:
      nested:
        arr: [false]
  expression: "cond.ifExpr($data?.nested?.arr?[0], \"T\", \"F\")"
  expectedResult: "F"

- description: "cond.ifExpr #87: Condition => no input => literal => thenVal"
  context: {}
  expression: "cond.ifExpr(1 < 2, 'less', 'more')"
  expectedResult: "less"

- description: "cond.ifExpr #88: Condition => no input => literal => elseVal"
  context: {}
  expression: "cond.ifExpr(2 < 1, 'less', 'more')"
  expectedResult: "more"

- description: "cond.ifExpr #89: Condition => boolean logic => thenVal array"
  context:
    c1: true
    c2: true
  expression: "cond.ifExpr($c1 && $c2, [99], [])"
  expectedResult: [99]

- description: "cond.ifExpr #90: Condition => boolean logic => elseVal array"
  context:
    c1: true
    c2: false
  expression: "cond.ifExpr($c1 && $c2, [99], [100])"
  expectedResult: [100]


################################################################################
# 91 - 170: cond.coalesce(expr1, expr2, ...)
################################################################################

- description: "cond.coalesce #91: First arg non-null => returns first"
  context: {}
  expression: "cond.coalesce(1, 2)"
  expectedResult: 1

- description: "cond.coalesce #92: First arg null => returns second"
  context: {}
  expression: "cond.coalesce(null, 2)"
  expectedResult: 2

- description: "cond.coalesce #93: Chain multiple => returns first non-null"
  context: {}
  expression: "cond.coalesce(null, null, 3, 4)"
  expectedResult: 3

- description: "cond.coalesce #94: All null => final non-null => returns last"
  context: {}
  expression: "cond.coalesce(null, null, null, 5)"
  expectedResult: 5

- description: "cond.coalesce #95: All are non-null => returns first immediately"
  context: {}
  expression: "cond.coalesce(10, 20, 30)"
  expectedResult: 10

- description: "cond.coalesce #96: Mix of null and non-null => first non-null in the chain"
  context: {}
  expression: "cond.coalesce(null, 7, 8)"
  expectedResult: 7

- description: "cond.coalesce #97: Single arg => if it's non-null => that value"
  context: {}
  expression: "cond.coalesce(\"X\")"
  expectedResult: "X"


- description: "cond.coalesce #99: Float chain => first non-null is 1.5"
  context: {}
  expression: "cond.coalesce(null, 1.5, 2.5)"
  expectedResult: 1.5

- description: "cond.coalesce #100: Float chain => first is not null => returns 1.1"
  context: {}
  expression: "cond.coalesce(1.1, 2.2)"
  expectedResult: 1.1

- description: "cond.coalesce #101: Boolean chain => first non-null is true"
  context: {}
  expression: "cond.coalesce(null, true, false)"
  expectedResult: true

- description: "cond.coalesce #102: Boolean chain => first is false => returns false"
  context: {}
  expression: "cond.coalesce(false, true)"
  expectedResult: false

- description: "cond.coalesce #103: String chain => first non-null is 'A'"
  context: {}
  expression: "cond.coalesce(null, \"A\", \"B\")"
  expectedResult: "A"

- description: "cond.coalesce #104: String chain => first is not null => returns 'first'"
  context: {}
  expression: "cond.coalesce(\"first\", \"second\")"
  expectedResult: "first"

- description: "cond.coalesce #105: multiple all null => final is non-null"
  context: {}
  expression: "cond.coalesce(null, null, null, \"ok\")"
  expectedResult: "ok"

- description: "cond.coalesce #107: context-based => first is null => second is 100"
  context:
    v1: null
    v2: 100
  expression: "cond.coalesce($v1, $v2)"
  expectedResult: 100

- description: "cond.coalesce #108: context-based => first is non-null => returns it"
  context:
    v1: 999
    v2: 100
  expression: "cond.coalesce($v1, $v2)"
  expectedResult: 999

- description: "cond.coalesce #109: multiple context => returns first non-null => 2"
  context:
    a: null
    b: 2
    c: 3
  expression: "cond.coalesce($a, $b, $c)"
  expectedResult: 2

- description: "cond.coalesce #111: object chain => first is not null => returns that object"
  context: {}
  expression: "cond.coalesce({x:1}, {x:2})"
  expectedResult:
    x: 1

- description: "cond.coalesce #112: object chain => first is null => second object returned"
  context: {}
  expression: "cond.coalesce(null, {y:2})"
  expectedResult:
    y: 2

- description: "cond.coalesce #113: array chain => first non-null array returned"
  context: {}
  expression: "cond.coalesce(null, [1,2], [3,4])"
  expectedResult: [1,2]

- description: "cond.coalesce #114: array chain => first array => no need for second"
  context: {}
  expression: "cond.coalesce([5], [6])"
  expectedResult: [5]

- description: "cond.coalesce #115: multiple => first is false => returns false"
  context: {}
  expression: "cond.coalesce(false, true)"
  expectedResult: false

- description: "cond.coalesce #116: multiple => first is zero => returns zero"
  context: {}
  expression: "cond.coalesce(0, 10)"
  expectedResult: 0

- description: "cond.coalesce #117: multiple => first is empty string => returns empty string"
  context: {}
  expression: "cond.coalesce(\"\", \"fallback\")"
  expectedResult: ""

- description: "cond.coalesce #118: multiple => first is null => second is empty => returns empty"
  context: {}
  expression: "cond.coalesce(null, \"\")"
  expectedResult: ""

- description: "cond.coalesce #119: chain of 4 => second is non-null => return second"
  context: {}
  expression: "cond.coalesce(null, 2, 3, 4)"
  expectedResult: 2

- description: "cond.coalesce #120: chain of 4 => first is zero => short-circuits"
  context: {}
  expression: "cond.coalesce(0, 1, 2, 3)"
  expectedResult: 0

- description: "cond.coalesce #122: chain => second non-null => short circuit => returns second"
  context: {}
  expression: "cond.coalesce(null, \"ok\", \"notUsed\")"
  expectedResult: "ok"

- description: "cond.coalesce #123: chain => first non-null => second not used"
  context: {}
  expression: "cond.coalesce(\"value\", \"fallback\")"
  expectedResult: "value"

- description: "cond.coalesce #124: single expression => if it's 5 => returns 5"
  context: {}
  expression: "cond.coalesce(5)"
  expectedResult: 5

- description: "cond.coalesce #126: multiple numeric => first is negative => returns negative"
  context: {}
  expression: "cond.coalesce(-10, 0, 5)"
  expectedResult: -10

- description: "cond.coalesce #127: multiple numeric => first is null => second is -10"
  context: {}
  expression: "cond.coalesce(null, -10, 100)"
  expectedResult: -10

- description: "cond.coalesce #128: multiple booleans => first is null => second is false"
  context: {}
  expression: "cond.coalesce(null, false, true)"
  expectedResult: false

- description: "cond.coalesce #129: multiple booleans => first is true => no need for second"
  context: {}
  expression: "cond.coalesce(true, false)"
  expectedResult: true

- description: "cond.coalesce #130: multiple strings => first is 'hi' => returns 'hi'"
  context: {}
  expression: "cond.coalesce(\"hi\", \"hello\")"
  expectedResult: "hi"

- description: "cond.coalesce #131: multiple strings => first is null => second 'hello'"
  context: {}
  expression: "cond.coalesce(null, \"hello\", \"bye\")"
  expectedResult: "hello"

- description: "cond.coalesce #132: multiple objects => first is null => second object"
  context: {}
  expression: "cond.coalesce(null, {z:99}, {z:100})"
  expectedResult:
    z: 99

- description: "cond.coalesce #133: multiple objects => first object => short circuit"
  context: {}
  expression: "cond.coalesce({k:'v'}, {k:'notUsed'})"
  expectedResult:
    k: "v"

- description: "cond.coalesce #134: multiple arrays => first is empty => that is still non-null => returns []"
  context: {}
  expression: "cond.coalesce([], [1,2])"
  expectedResult: []

- description: "cond.coalesce #135: multiple arrays => first is null => second => [1,2]"
  context: {}
  expression: "cond.coalesce(null, [1,2])"
  expectedResult: [1,2]

- description: "cond.coalesce #136: chain => second is zero => returns zero"
  context: {}
  expression: "cond.coalesce(null, 0, 1)"
  expectedResult: 0

- description: "cond.coalesce #137: chain => second is empty string => returns ''"
  context: {}
  expression: "cond.coalesce(null, \"\", \"xyz\")"
  expectedResult: ""

- description: "cond.coalesce #138: chain => first is 'abc' => short-circuit => 'abc'"
  context: {}
  expression: "cond.coalesce(\"abc\", null, \"zzz\")"
  expectedResult: "abc"

- description: "cond.coalesce #139: chain => first is null => second is null => third is 'final'"
  context: {}
  expression: "cond.coalesce(null, null, \"final\")"
  expectedResult: "final"

- description: "cond.coalesce #140: chain => all are numbers => first non-null is 2"
  context: {}
  expression: "cond.coalesce(null, 2, 3, 4)"
  expectedResult: 2

- description: "cond.coalesce #141: chain => all are booleans => first non-null => false"
  context: {}
  expression: "cond.coalesce(null, false, true)"
  expectedResult: false

- description: "cond.coalesce #142: chain => 5 arguments => first non-null is the third"
  context: {}
  expression: "cond.coalesce(null, null, \"OK\", \"Nope\", null)"
  expectedResult: "OK"

- description: "cond.coalesce #143: chain => 5 arguments => first is -1 => short circuit"
  context: {}
  expression: "cond.coalesce(-1, null, 0, 1)"
  expectedResult: -1

- description: "cond.coalesce #144: chain => large ints => first is null => second is 99999"
  context: {}
  expression: "cond.coalesce(null, 99999, 100000)"
  expectedResult: 99999

- description: "cond.coalesce #145: chain => negative floats => first is -3.14 => short circuit"
  context: {}
  expression: "cond.coalesce(-3.14, -2.5)"
  expectedResult: -3.14

- description: "cond.coalesce #147: chain => first is 'found' => short circuit"
  context: {}
  expression: "cond.coalesce(\"found\", \"notUsed\")"
  expectedResult: "found"

- description: "cond.coalesce #148: single => int => returns int"
  context: {}
  expression: "cond.coalesce(777)"
  expectedResult: 777


- description: "cond.coalesce #150: multiple => first is object => short circuit"
  context: {}
  expression: "cond.coalesce({a:1}, {a:2})"
  expectedResult:
    a: 1

- description: "cond.coalesce #151: multiple => first is null => second is object => returns second"
  context: {}
  expression: "cond.coalesce(null, {x:true})"
  expectedResult:
    x: true

- description: "cond.coalesce #152: multiple => first is null => second is null => third object => returns third"
  context: {}
  expression: "cond.coalesce(null, null, {final:true})"
  expectedResult:
    final: true

- description: "cond.coalesce #153: multiple => first is boolean => short circuit => true"
  context: {}
  expression: "cond.coalesce(true, null, false)"
  expectedResult: true

- description: "cond.coalesce #154: multiple => first is boolean => short circuit => false"
  context: {}
  expression: "cond.coalesce(false, null, true)"
  expectedResult: false

- description: "cond.coalesce #155: multiple => first is 0 => short circuit => 0"
  context: {}
  expression: "cond.coalesce(0, 1, 2)"
  expectedResult: 0

- description: "cond.coalesce #156: multiple => first is null => second is 0 => returns 0"
  context: {}
  expression: "cond.coalesce(null, 0)"
  expectedResult: 0

- description: "cond.coalesce #157: multiple => second is empty array => returns []"
  context: {}
  expression: "cond.coalesce(null, [])"
  expectedResult: []

- description: "cond.coalesce #158: multiple => second is empty string => returns ''"
  context: {}
  expression: "cond.coalesce(null, \"\")"
  expectedResult: ""

- description: "cond.coalesce #159: multiple => first is array => short circuit"
  context: {}
  expression: "cond.coalesce([1,2], [3,4])"
  expectedResult: [1,2]

- description: "cond.coalesce #160: multiple => first is null => second array => returns second"
  context: {}
  expression: "cond.coalesce(null, [1,2])"
  expectedResult: [1,2]

- description: "cond.coalesce #161: chain => all null => final => 'done'"
  context: {}
  expression: "cond.coalesce(null, null, \"done\")"
  expectedResult: "done"

- description: "cond.coalesce #162: chain => many => first is -999 => short circuit"
  context: {}
  expression: "cond.coalesce(-999, -100, null)"
  expectedResult: -999

- description: "cond.coalesce #163: chain => many => first is null => second is null => third is 10 => returns 10"
  context: {}
  expression: "cond.coalesce(null, null, 10, 99)"
  expectedResult: 10

- description: "cond.coalesce #164: chain => first non-null is boolean false => returns false"
  context: {}
  expression: "cond.coalesce(null, false, true)"
  expectedResult: false

- description: "cond.coalesce #165: chain => first is 'X' => returns 'X'"
  context: {}
  expression: "cond.coalesce(\"X\", \"Y\")"
  expectedResult: "X"

- description: "cond.coalesce #166: chain => second is 'B' => returns 'B'"
  context: {}
  expression: "cond.coalesce(null, \"B\")"
  expectedResult: "B"

- description: "cond.coalesce #167: chain => third is object => returns object"
  context: {}
  expression: "cond.coalesce(null, null, {z:'final'})"
  expectedResult:
    z: "final"

- description: "cond.coalesce #168: chain => single => array => returns array"
  context: {}
  expression: "cond.coalesce([99])"
  expectedResult: [99]

- description: "cond.coalesce #170: chain => first is empty string => short circuit => ''"
  context: {}
  expression: "cond.coalesce(\"\", \"fallback\")"
  expectedResult: ""

################################################################################
# 171 - 250: cond.isFieldPresent(object, fieldPath) -> boolean
################################################################################

- description: "cond.isFieldPresent #171: Field is present => returns true"
  context:
    obj:
      x: 1
  expression: "cond.isFieldPresent($obj, \"x\")"
  expectedResult: true

- description: "cond.isFieldPresent #172: Field is missing => returns false"
  context:
    obj:
      y: 2
  expression: "cond.isFieldPresent($obj, \"x\")"
  expectedResult: false

- description: "cond.isFieldPresent #173: Field is present but null => still present => true"
  context:
    obj:
      val: null
  expression: "cond.isFieldPresent($obj, \"val\")"
  expectedResult: true

- description: "cond.isFieldPresent #174: No fields => definitely missing => false"
  context:
    obj: {}
  expression: "cond.isFieldPresent($obj, \"val\")"
  expectedResult: false

- description: "cond.isFieldPresent #175: Nested field => present"
  context:
    root:
      sub:
        key: 123
  expression: "cond.isFieldPresent($root.sub, \"key\")"
  expectedResult: true

- description: "cond.isFieldPresent #176: Nested field => missing => false"
  context:
    root:
      sub:
        other: 456
  expression: "cond.isFieldPresent($root.sub, \"key\")"
  expectedResult: false

- description: "cond.isFieldPresent #177: Field is boolean => present => true"
  context:
    data:
      active: false
  expression: "cond.isFieldPresent($data, \"active\")"
  expectedResult: true

- description: "cond.isFieldPresent #178: Field is int => present => true"
  context:
    data:
      count: 10
  expression: "cond.isFieldPresent($data, \"count\")"
  expectedResult: true

- description: "cond.isFieldPresent #179: Field is float => missing => false"
  context:
    data:
      other: 2.5
  expression: "cond.isFieldPresent($data, \"val\")"
  expectedResult: false

- description: "cond.isFieldPresent #180: Large object => field in the middle => true"
  context:
    big:
      a: 1
      b: 2
      c: 3
  expression: "cond.isFieldPresent($big, \"b\")"
  expectedResult: true

- description: "cond.isFieldPresent #181: Large object => field not listed => false"
  context:
    big:
      a: 1
      b: 2
      c: 3
  expression: "cond.isFieldPresent($big, \"z\")"
  expectedResult: false

- description: "cond.isFieldPresent #182: single field => present => true"
  context:
    one:
      lone: "value"
  expression: "cond.isFieldPresent($one, \"lone\")"
  expectedResult: true

- description: "cond.isFieldPresent #183: single field => different name => false"
  context:
    one:
      lone: "value"
  expression: "cond.isFieldPresent($one, \"lost\")"
  expectedResult: false

- description: "cond.isFieldPresent #184: null field => key is present => true"
  context:
    obj:
      key: null
  expression: "cond.isFieldPresent($obj, \"key\")"
  expectedResult: true

- description: "cond.isFieldPresent #185: nested object => direct usage => present => true"
  context:
    outer:
      inner:
        x: "test"
  expression: "cond.isFieldPresent($outer.inner, \"x\")"
  expectedResult: true

- description: "cond.isFieldPresent #186: nested object => direct usage => missing => false"
  context:
    outer:
      inner:
        x: "test"
  expression: "cond.isFieldPresent($outer.inner, \"y\")"
  expectedResult: false

- description: "cond.isFieldPresent #187: field name: numeric string => present"
  context:
    weird:
      "123": "abc"
  expression: "cond.isFieldPresent($weird, \"123\")"
  expectedResult: true

- description: "cond.isFieldPresent #188: field name: numeric string => missing => false"
  context:
    weird:
      "321": "zzz"
  expression: "cond.isFieldPresent($weird, \"123\")"
  expectedResult: false

- description: "cond.isFieldPresent #189: single boolean field => present => true"
  context:
    data:
      boolKey: true
  expression: "cond.isFieldPresent($data, \"boolKey\")"
  expectedResult: true

- description: "cond.isFieldPresent #190: single boolean field => check different name => false"
  context:
    data:
      boolKey: true
  expression: "cond.isFieldPresent($data, \"boolVal\")"
  expectedResult: false

- description: "cond.isFieldPresent #191: multiple fields => check second => true"
  context:
    info:
      a: 100
      b: 200
  expression: "cond.isFieldPresent($info, \"b\")"
  expectedResult: true

- description: "cond.isFieldPresent #192: multiple fields => check missing => false"
  context:
    info:
      a: 100
      b: 200
  expression: "cond.isFieldPresent($info, \"c\")"
  expectedResult: false

- description: "cond.isFieldPresent #193: empty object => all missing => false"
  context:
    obj: {}
  expression: "cond.isFieldPresent($obj, \"any\")"
  expectedResult: false

- description: "cond.isFieldPresent #194: large object => check existing => true"
  context:
    rec:
      id: 1
      status: "ok"
      data: {}
  expression: "cond.isFieldPresent($rec, \"status\")"
  expectedResult: true

- description: "cond.isFieldPresent #195: large object => check missing => false"
  context:
    rec:
      id: 1
      status: "ok"
      data: {}
  expression: "cond.isFieldPresent($rec, \"extra\")"
  expectedResult: false

- description: "cond.isFieldPresent #196: object with null => present"
  context:
    item:
      val: null
  expression: "cond.isFieldPresent($item, \"val\")"
  expectedResult: true

- description: "cond.isFieldPresent #197: multiple keys => check one that is present => true"
  context:
    obj:
      x: "X"
      y: "Y"
  expression: "cond.isFieldPresent($obj, \"y\")"
  expectedResult: true

- description: "cond.isFieldPresent #198: multiple keys => check one that is missing => false"
  context:
    obj:
      a: 1
      b: 2
  expression: "cond.isFieldPresent($obj, \"c\")"
  expectedResult: false

- description: "cond.isFieldPresent #199: key is empty string => if present as a key => true"
  context:
    special:
      "": 123
  expression: "cond.isFieldPresent($special, \"\")"
  expectedResult: true

- description: "cond.isFieldPresent #200: key is empty string => not present => false"
  context:
    special:
      normal: 456
  expression: "cond.isFieldPresent($special, \"\")"
  expectedResult: false

- description: "cond.isFieldPresent #201: single nested => direct object => present => true"
  context:
    nest:
      inner: null
  expression: "cond.isFieldPresent($nest, \"inner\")"
  expectedResult: true

- description: "cond.isFieldPresent #202: single nested => direct object => missing => false"
  context:
    nest:
      something: 1
  expression: "cond.isFieldPresent($nest, \"inner\")"
  expectedResult: false

- description: "cond.isFieldPresent #203: boolean field => present => true"
  context:
    data:
      okay: false
  expression: "cond.isFieldPresent($data, \"okay\")"
  expectedResult: true

- description: "cond.isFieldPresent #204: numeric field => present => true"
  context:
    data:
      num: 999
  expression: "cond.isFieldPresent($data, \"num\")"
  expectedResult: true

- description: "cond.isFieldPresent #205: float field => present => true"
  context:
    data:
      val: 3.14
  expression: "cond.isFieldPresent($data, \"val\")"
  expectedResult: true

- description: "cond.isFieldPresent #206: large negative => present => true"
  context:
    data:
      big: -99999
  expression: "cond.isFieldPresent($data, \"big\")"
  expectedResult: true

- description: "cond.isFieldPresent #207: object with multiple => checking partial => false"
  context:
    stuff:
      a: 10
      b: 20
  expression: "cond.isFieldPresent($stuff, \"c\")"
  expectedResult: false

- description: "cond.isFieldPresent #208: object with array => field present => true"
  context:
    mix:
      arr: [1,2]
  expression: "cond.isFieldPresent($mix, \"arr\")"
  expectedResult: true

- description: "cond.isFieldPresent #209: object with array => different field => false"
  context:
    mix:
      arr: [1,2]
  expression: "cond.isFieldPresent($mix, \"zzz\")"
  expectedResult: false

- description: "cond.isFieldPresent #210: single field => present => true"
  context:
    single:
      key: "val"
  expression: "cond.isFieldPresent($single, \"key\")"
  expectedResult: true

- description: "cond.isFieldPresent #211: single field => check other => false"
  context:
    single:
      key: "val"
  expression: "cond.isFieldPresent($single, \"val\")"
  expectedResult: false

- description: "cond.isFieldPresent #212: multiple => check first => true"
  context:
    data:
      c1: true
      c2: false
  expression: "cond.isFieldPresent($data, \"c1\")"
  expectedResult: true

- description: "cond.isFieldPresent #213: multiple => check second => true"
  context:
    data:
      c1: true
      c2: false
  expression: "cond.isFieldPresent($data, \"c2\")"
  expectedResult: true

- description: "cond.isFieldPresent #214: multiple => check missing => false"
  context:
    data:
      c1: true
      c2: false
  expression: "cond.isFieldPresent($data, \"c3\")"
  expectedResult: false

- description: "cond.isFieldPresent #215: field is 'null' => but present => true"
  context:
    rec:
      test: null
  expression: "cond.isFieldPresent($rec, \"test\")"
  expectedResult: true

- description: "cond.isFieldPresent #216: field name with underscore => present => true"
  context:
    obj:
      special_key: 123
  expression: "cond.isFieldPresent($obj, \"special_key\")"
  expectedResult: true

- description: "cond.isFieldPresent #217: field name with underscore => missing => false"
  context:
    obj:
      other_key: 999
  expression: "cond.isFieldPresent($obj, \"special_key\")"
  expectedResult: false

- description: "cond.isFieldPresent #218: field name with hyphen => present => true"
  context:
    obj:
      "my-key": "val"
  expression: "cond.isFieldPresent($obj, \"my-key\")"
  expectedResult: true

- description: "cond.isFieldPresent #219: field name with hyphen => missing => false"
  context:
    obj:
      other: "no"
  expression: "cond.isFieldPresent($obj, \"my-key\")"
  expectedResult: false

- description: "cond.isFieldPresent #220: field name uppercase => present => true"
  context:
    item:
      ABC: 123
  expression: "cond.isFieldPresent($item, \"ABC\")"
  expectedResult: true

- description: "cond.isFieldPresent #221: field name uppercase => missing => false"
  context:
    item:
      abc: 123
  expression: "cond.isFieldPresent($item, \"ABC\")"
  expectedResult: false

- description: "cond.isFieldPresent #222: large object => found near end => true"
  context:
    big:
      a: 1
      b: 2
      c: 3
      z: 99
  expression: "cond.isFieldPresent($big, \"z\")"
  expectedResult: true

- description: "cond.isFieldPresent #223: large object => field not exist => false"
  context:
    big:
      a: 1
      b: 2
      c: 3
      z: 99
  expression: "cond.isFieldPresent($big, \"y\")"
  expectedResult: false

- description: "cond.isFieldPresent #224: field numeric => present => true"
  context:
    data:
      100: "abc"
  expression: "cond.isFieldPresent($data, \"100\")"
  expectedResult: true

- description: "cond.isFieldPresent #225: field numeric => missing => false"
  context:
    data:
      200: "xyz"
  expression: "cond.isFieldPresent($data, \"300\")"
  expectedResult: false

- description: "cond.isFieldPresent #226: single subfield => present => true"
  context:
    sub:
      x: 0
  expression: "cond.isFieldPresent($sub, \"x\")"
  expectedResult: true

- description: "cond.isFieldPresent #227: single subfield => missing => false"
  context:
    sub:
      y: 1
  expression: "cond.isFieldPresent($sub, \"x\")"
  expectedResult: false

- description: "cond.isFieldPresent #228: boolean false => but present => true"
  context:
    rec:
      ok: false
  expression: "cond.isFieldPresent($rec, \"ok\")"
  expectedResult: true

- description: "cond.isFieldPresent #229: numeric 0 => but present => true"
  context:
    rec:
      zero: 0
  expression: "cond.isFieldPresent($rec, \"zero\")"
  expectedResult: true

- description: "cond.isFieldPresent #230: negative => present => true"
  context:
    rec:
      neg: -999
  expression: "cond.isFieldPresent($rec, \"neg\")"
  expectedResult: true

- description: "cond.isFieldPresent #231: float => present => true"
  context:
    rec:
      pi: 3.14
  expression: "cond.isFieldPresent($rec, \"pi\")"
  expectedResult: true

- description: "cond.isFieldPresent #232: empty object => false"
  context:
    rec: {}
  expression: "cond.isFieldPresent($rec, \"anything\")"
  expectedResult: false

- description: "cond.isFieldPresent #233: multiple => found the second => true"
  context:
    obj:
      first: 1
      second: 2
  expression: "cond.isFieldPresent($obj, \"second\")"
  expectedResult: true

- description: "cond.isFieldPresent #234: multiple => not found => false"
  context:
    obj:
      first: 1
      second: 2
  expression: "cond.isFieldPresent($obj, \"third\")"
  expectedResult: false

- description: "cond.isFieldPresent #235: single string field => 'abc' => true"
  context:
    obj:
      abc: "yes"
  expression: "cond.isFieldPresent($obj, \"abc\")"
  expectedResult: true

- description: "cond.isFieldPresent #236: single string field => check 'xyz' => false"
  context:
    obj:
      abc: "yes"
  expression: "cond.isFieldPresent($obj, \"xyz\")"
  expectedResult: false

- description: "cond.isFieldPresent #237: multiple => last is present => true"
  context:
    obj:
      a: "A"
      b: "B"
      c: "C"
  expression: "cond.isFieldPresent($obj, \"c\")"
  expectedResult: true

- description: "cond.isFieldPresent #238: multiple => last is missing => false"
  context:
    obj:
      a: "A"
      b: "B"
  expression: "cond.isFieldPresent($obj, \"z\")"
  expectedResult: false

- description: "cond.isFieldPresent #239: value is array => field is present => true"
  context:
    item:
      arr: [1,2]
  expression: "cond.isFieldPresent($item, \"arr\")"
  expectedResult: true

- description: "cond.isFieldPresent #240: value is array => different field => false"
  context:
    item:
      arr2: [3,4]
  expression: "cond.isFieldPresent($item, \"arr\")"
  expectedResult: false

- description: "cond.isFieldPresent #241: field is capital => must match exactly => true"
  context:
    data:
      Abc: 100
  expression: "cond.isFieldPresent($data, \"Abc\")"
  expectedResult: true

- description: "cond.isFieldPresent #242: mismatch case => false"
  context:
    data:
      Abc: 100
  expression: "cond.isFieldPresent($data, \"abc\")"
  expectedResult: false

- description: "cond.isFieldPresent #243: field name with dash => present => true"
  context:
    rec:
      "my-key": "val"
  expression: "cond.isFieldPresent($rec, \"my-key\")"
  expectedResult: true

- description: "cond.isFieldPresent #244: field name with dash => missing => false"
  context:
    rec:
      other: "val"
  expression: "cond.isFieldPresent($rec, \"my-key\")"
  expectedResult: false

- description: "cond.isFieldPresent #245: field is zero => present => true"
  context:
    stuff:
      zero: 0
  expression: "cond.isFieldPresent($stuff, \"zero\")"
  expectedResult: true

- description: "cond.isFieldPresent #246: nested multiple => this is direct usage => present => true"
  context:
    nest:
      sub:
        inHere: 1
  expression: "cond.isFieldPresent($nest.sub, \"inHere\")"
  expectedResult: true

- description: "cond.isFieldPresent #247: nested multiple => no => false"
  context:
    nest:
      sub:
        x: 1
  expression: "cond.isFieldPresent($nest.sub, \"y\")"
  expectedResult: false

- description: "cond.isFieldPresent #248: field is empty string => present => true"
  context:
    obj:
      "": 111
  expression: "cond.isFieldPresent($obj, \"\")"
  expectedResult: true

- description: "cond.isFieldPresent #249: field is empty string => missing => false"
  context:
    obj:
      something: 222
  expression: "cond.isFieldPresent($obj, \"\")"
  expectedResult: false

- description: "cond.isFieldPresent #250: single key => matched => true"
  context:
    o:
      key: "exists"
  expression: "cond.isFieldPresent($o, \"key\")"
  expectedResult: true

# 250 Positive-Path Test Cases for the type.* Library
# ---------------------------------------------------
# The type library functions:
#   1) type.isNumber(x) -> boolean
#   2) type.isString(x) -> boolean
#   3) type.isBoolean(x) -> boolean
#   4) type.isArray(x) -> boolean
#   5) type.isObject(x) -> boolean
#   6) type.isNull(x) -> boolean
#   7) type.string(x) -> string
#   8) type.int(x) -> int
#   9) type.float(x) -> float
#
# This file has 250 success-path test cases, organized as follows:
#  - #1â€‘#27:    type.isNumber
#  - #28â€‘#54:   type.isString
#  - #55â€‘#81:   type.isBoolean
#  - #82â€‘#108:  type.isArray
#  - #109â€‘#135: type.isObject
#  - #136â€‘#162: type.isNull
#  - #163â€‘#192: type.string (30 cases)
#  - #193â€‘#221: type.int (29 cases)
#  - #222â€‘#250: type.float (29 cases)

################################################################################
# 1 - 27: type.isNumber(x)
################################################################################

- description: "type.isNumber #1: integer literal => true"
  context: {}
  expression: "type.isNumber(42)"
  expectedResult: true

- description: "type.isNumber #2: float literal => true"
  context: {}
  expression: "type.isNumber(3.14)"
  expectedResult: true

- description: "type.isNumber #3: negative integer => true"
  context: {}
  expression: "type.isNumber(-100)"
  expectedResult: true

- description: "type.isNumber #4: negative float => true"
  context: {}
  expression: "type.isNumber(-2.5)"
  expectedResult: true

- description: "type.isNumber #5: zero integer => true"
  context: {}
  expression: "type.isNumber(0)"
  expectedResult: true

- description: "type.isNumber #6: zero float => true"
  context: {}
  expression: "type.isNumber(0.0)"
  expectedResult: true

- description: "type.isNumber #7: large int => true"
  context: {}
  expression: "type.isNumber(999999999999)"
  expectedResult: true

- description: "type.isNumber #8: large float => true"
  context: {}
  expression: "type.isNumber(1e9)"
  expectedResult: true

- description: "type.isNumber #9: string literal => false"
  context: {}
  expression: "type.isNumber(\"hello\")"
  expectedResult: false

- description: "type.isNumber #10: boolean true => false"
  context: {}
  expression: "type.isNumber(true)"
  expectedResult: false

- description: "type.isNumber #11: boolean false => false"
  context: {}
  expression: "type.isNumber(false)"
  expectedResult: false

- description: "type.isNumber #12: null => false"
  context: {}
  expression: "type.isNumber(null)"
  expectedResult: false

- description: "type.isNumber #13: array literal => false"
  context: {}
  expression: "type.isNumber([1,2])"
  expectedResult: false

- description: "type.isNumber #14: object literal => false"
  context: {}
  expression: "type.isNumber({val:1})"
  expectedResult: false

- description: "type.isNumber #15: integer from context => true"
  context:
    x: 123
  expression: "type.isNumber($x)"
  expectedResult: true

- description: "type.isNumber #16: float from context => true"
  context:
    val: 2.71
  expression: "type.isNumber($val)"
  expectedResult: true

- description: "type.isNumber #17: string from context => false"
  context:
    s: "abc"
  expression: "type.isNumber($s)"
  expectedResult: false

- description: "type.isNumber #18: boolean from context => false"
  context:
    b: true
  expression: "type.isNumber($b)"
  expectedResult: false

- description: "type.isNumber #19: array from context => false"
  context:
    arr: [1,2]
  expression: "type.isNumber($arr)"
  expectedResult: false

- description: "type.isNumber #20: object from context => false"
  context:
    obj:
      key: 1
  expression: "type.isNumber($obj)"
  expectedResult: false

- description: "type.isNumber #21: negative large int => true"
  context: {}
  expression: "type.isNumber(-999999999999)"
  expectedResult: true

- description: "type.isNumber #22: exponent float => true"
  context: {}
  expression: "type.isNumber(1.23e2)"
  expectedResult: true

- description: "type.isNumber #23: exponent negative => true"
  context: {}
  expression: "type.isNumber(3.14e-2)"
  expectedResult: true

- description: "type.isNumber #24: parentheses => still numeric => true"
  context: {}
  expression: "type.isNumber((2+3))"
  expectedResult: true

- description: "type.isNumber #25: parentheses => expression => 2+3=5 => numeric => true"
  context: {}
  expression: "type.isNumber(2+3)"
  expectedResult: true

- description: "type.isNumber #26: bracket => referencing numeric => true"
  context:
    arr: [10, 20]
  expression: "type.isNumber($arr[0])"
  expectedResult: true

- description: "type.isNumber #27: bracket => referencing string => false"
  context:
    arr: [\"test\"]
  expression: "type.isNumber($arr[0])"
  expectedResult: false


################################################################################
# 28 - 54: type.isString(x)
################################################################################

- description: "type.isString #28: string literal => true"
  context: {}
  expression: "type.isString(\"hello\")"
  expectedResult: true

- description: "type.isString #29: empty string => true"
  context: {}
  expression: "type.isString(\"\")"
  expectedResult: true

- description: "type.isString #30: integer => false"
  context: {}
  expression: "type.isString(123)"
  expectedResult: false

- description: "type.isString #31: float => false"
  context: {}
  expression: "type.isString(3.14)"
  expectedResult: false

- description: "type.isString #32: boolean => false"
  context: {}
  expression: "type.isString(true)"
  expectedResult: false

- description: "type.isString #33: null => false"
  context: {}
  expression: "type.isString(null)"
  expectedResult: false

- description: "type.isString #34: array => false"
  context: {}
  expression: "type.isString([\"a\"])"
  expectedResult: false

- description: "type.isString #35: object => false"
  context: {}
  expression: "type.isString({key:\"val\"})"
  expectedResult: false

- description: "type.isString #36: context string => true"
  context:
    s: "world"
  expression: "type.isString($s)"
  expectedResult: true

- description: "type.isString #37: context int => false"
  context:
    x: 1
  expression: "type.isString($x)"
  expectedResult: false

- description: "type.isString #38: context float => false"
  context:
    val: 2.2
  expression: "type.isString($val)"
  expectedResult: false

- description: "type.isString #39: context bool => false"
  context:
    b: false
  expression: "type.isString($b)"
  expectedResult: false

- description: "type.isString #40: context null => false"
  context:
    n: null
  expression: "type.isString($n)"
  expectedResult: false

- description: "type.isString #41: negative int => false"
  context: {}
  expression: "type.isString(-100)"
  expectedResult: false

- description: "type.isString #42: negative float => false"
  context: {}
  expression: "type.isString(-3.14)"
  expectedResult: false

- description: "type.isString #43: parentheses => expression => numeric => false"
  context: {}
  expression: "type.isString(1+2)"
  expectedResult: false

- description: "type.isString #44: parentheses => literal string => true"
  context: {}
  expression: "type.isString((\"test\"))"
  expectedResult: true

- description: "type.isString #45: bracket => referencing string => true"
  context:
    arr: [\"abc\", 123]
  expression: "type.isString($arr[0])"
  expectedResult: true

- description: "type.isString #46: bracket => referencing int => false"
  context:
    arr: [\"abc\", 123]
  expression: "type.isString($arr[1])"
  expectedResult: false

- description: "type.isString #47: large string => true"
  context: {}
  expression: "type.isString(\"long text here...\")"
  expectedResult: true

- description: "type.isString #48: boolean literal => false"
  context: {}
  expression: "type.isString(false)"
  expectedResult: false

- description: "type.isString #49: exponent float => false"
  context: {}
  expression: "type.isString(1.2e3)"
  expectedResult: false

- description: "type.isString #50: plus expression => numeric => false"
  context: {}
  expression: "type.isString(5+5)"
  expectedResult: false

- description: "type.isString #51: 'null' as string => true"
  context: {}
  expression: "type.isString(\"null\")"
  expectedResult: true

- description: "type.isString #52: bracket => referencing object => false"
  context:
    arr: [{x: 1}]
  expression: "type.isString($arr[0])"
  expectedResult: false

- description: "type.isString #53: single char => still string => true"
  context: {}
  expression: "type.isString(\"A\")"
  expectedResult: true

- description: "type.isString #54: string with spaces => true"
  context: {}
  expression: "type.isString(\"   \")"
  expectedResult: true


################################################################################
# 55 - 81: type.isBoolean(x)
################################################################################

- description: "type.isBoolean #55: literal true => true"
  context: {}
  expression: "type.isBoolean(true)"
  expectedResult: true

- description: "type.isBoolean #56: literal false => true"
  context: {}
  expression: "type.isBoolean(false)"
  expectedResult: true

- description: "type.isBoolean #57: integer => false"
  context: {}
  expression: "type.isBoolean(1)"
  expectedResult: false

- description: "type.isBoolean #58: float => false"
  context: {}
  expression: "type.isBoolean(0.5)"
  expectedResult: false

- description: "type.isBoolean #59: string => false"
  context: {}
  expression: "type.isBoolean(\"abc\")"
  expectedResult: false

- description: "type.isBoolean #60: null => false"
  context: {}
  expression: "type.isBoolean(null)"
  expectedResult: false

- description: "type.isBoolean #61: array => false"
  context: {}
  expression: "type.isBoolean([true])"
  expectedResult: false

- description: "type.isBoolean #62: object => false"
  context: {}
  expression: "type.isBoolean({flag:true})"
  expectedResult: false

- description: "type.isBoolean #63: context true => true"
  context:
    b: true
  expression: "type.isBoolean($b)"
  expectedResult: true

- description: "type.isBoolean #64: context false => true"
  context:
    b: false
  expression: "type.isBoolean($b)"
  expectedResult: true

- description: "type.isBoolean #65: context int => false"
  context:
    x: 5
  expression: "type.isBoolean($x)"
  expectedResult: false

- description: "type.isBoolean #66: context string => false"
  context:
    s: "bool?"
  expression: "type.isBoolean($s)"
  expectedResult: false

- description: "type.isBoolean #67: negative int => false"
  context: {}
  expression: "type.isBoolean(-10)"
  expectedResult: false

- description: "type.isBoolean #68: zero => false"
  context: {}
  expression: "type.isBoolean(0)"
  expectedResult: false

- description: "type.isBoolean #69: bracket => referencing boolean => true"
  context:
    arr: [true, false]
  expression: "type.isBoolean($arr[1])"
  expectedResult: true

- description: "type.isBoolean #70: bracket => referencing string => false"
  context:
    arr: [\"hello\", true]
  expression: "type.isBoolean($arr[0])"
  expectedResult: false

- description: "type.isBoolean #71: parentheses => literal => still boolean"
  context: {}
  expression: "type.isBoolean((true))"
  expectedResult: true

- description: "type.isBoolean #72: parentheses => expression => numeric => false"
  context: {}
  expression: "type.isBoolean((1+2))"
  expectedResult: false

- description: "type.isBoolean #73: boolean context => true"
  context:
    active: true
  expression: "type.isBoolean($active)"
  expectedResult: true

- description: "type.isBoolean #74: boolean context => false"
  context:
    active: false
  expression: "type.isBoolean($active)"
  expectedResult: true

- description: "type.isBoolean #75: null context => false"
  context:
    val: null
  expression: "type.isBoolean($val)"
  expectedResult: false

- description: "type.isBoolean #76: object context => false"
  context:
    obj:
      a: 1
  expression: "type.isBoolean($obj)"
  expectedResult: false

- description: "type.isBoolean #77: array context => false"
  context:
    arr: [false]
  expression: "type.isBoolean($arr)"
  expectedResult: false

- description: "type.isBoolean #78: large float => false"
  context: {}
  expression: "type.isBoolean(9999.9)"
  expectedResult: false

- description: "type.isBoolean #79: negative float => false"
  context: {}
  expression: "type.isBoolean(-2.5)"
  expectedResult: false

- description: "type.isBoolean #80: exponent => false"
  context: {}
  expression: "type.isBoolean(1.2e3)"
  expectedResult: false

- description: "type.isBoolean #81: empty string => false"
  context: {}
  expression: "type.isBoolean(\"\")"
  expectedResult: false


################################################################################
# 82 - 108: type.isArray(x)
################################################################################

- description: "type.isArray #82: empty array literal => true"
  context: {}
  expression: "type.isArray([])"
  expectedResult: true

- description: "type.isArray #83: array of ints => true"
  context: {}
  expression: "type.isArray([1,2])"
  expectedResult: true

- description: "type.isArray #84: single element array => true"
  context: {}
  expression: "type.isArray([\"x\"])"
  expectedResult: true

- description: "type.isArray #85: integer => false"
  context: {}
  expression: "type.isArray(100)"
  expectedResult: false

- description: "type.isArray #86: float => false"
  context: {}
  expression: "type.isArray(3.14)"
  expectedResult: false

- description: "type.isArray #87: string => false"
  context: {}
  expression: "type.isArray(\"abc\")"
  expectedResult: false

- description: "type.isArray #88: boolean => false"
  context: {}
  expression: "type.isArray(false)"
  expectedResult: false

- description: "type.isArray #89: null => false"
  context: {}
  expression: "type.isArray(null)"
  expectedResult: false

- description: "type.isArray #90: object literal => false"
  context: {}
  expression: "type.isArray({k:1})"
  expectedResult: false

- description: "type.isArray #91: context array => true"
  context:
    arr: [1,2,3]
  expression: "type.isArray($arr)"
  expectedResult: true

- description: "type.isArray #92: context string => false"
  context:
    s: "test"
  expression: "type.isArray($s)"
  expectedResult: false

- description: "type.isArray #93: context object => false"
  context:
    obj:
      arr: []
  expression: "type.isArray($obj)"
  expectedResult: false

- description: "type.isArray #94: bracket => referencing array => true"
  context:
    outer: [[1,2], 3]
  expression: "type.isArray($outer[0])"
  expectedResult: true

- description: "type.isArray #95: bracket => referencing int => false"
  context:
    outer: [[1,2], 3]
  expression: "type.isArray($outer[1])"
  expectedResult: false

- description: "type.isArray #96: nested array => still array => true"
  context: {}
  expression: "type.isArray([[1],[2]])"
  expectedResult: true

- description: "type.isArray #97: parentheses => array literal => true"
  context: {}
  expression: "type.isArray(([1,2]))"
  expectedResult: true

- description: "type.isArray #98: parentheses => numeric => false"
  context: {}
  expression: "type.isArray((2+3))"
  expectedResult: false

- description: "type.isArray #99: large array => true"
  context:
    bigArr: [1,2,3,4,5]
  expression: "type.isArray($bigArr)"
  expectedResult: true

- description: "type.isArray #100: single boolean => false"
  context: {}
  expression: "type.isArray(true)"
  expectedResult: false

- description: "type.isArray #101: single null => false"
  context: {}
  expression: "type.isArray(null)"
  expectedResult: false

- description: "type.isArray #102: array of objects => true"
  context: {}
  expression: "type.isArray([{x:1}, {x:2}])"
  expectedResult: true

- description: "type.isArray #103: array of arrays => true"
  context: {}
  expression: "type.isArray([[1], [2]])"
  expectedResult: true

- description: "type.isArray #104: array from context => true"
  context:
    stuff: ["a","b"]
  expression: "type.isArray($stuff)"
  expectedResult: true

- description: "type.isArray #105: string from context => false"
  context:
    stuff: "not array"
  expression: "type.isArray($stuff)"
  expectedResult: false

- description: "type.isArray #106: object from context => false"
  context:
    stuff:
      arr: [1,2]
  expression: "type.isArray($stuff)"
  expectedResult: false

- description: "type.isArray #107: bracket referencing => if it's array => true"
  context:
    data:
      sub: [10]
  expression: "type.isArray($data.sub)"
  expectedResult: true

- description: "type.isArray #108: bracket referencing => if it's not array => false"
  context:
    data:
      sub: 10
  expression: "type.isArray($data.sub)"
  expectedResult: false


################################################################################
# 109 - 135: type.isObject(x)
################################################################################

- description: "type.isObject #109: object literal => true"
  context: {}
  expression: "type.isObject({a:1})"
  expectedResult: true

- description: "type.isObject #110: empty object => true"
  context: {}
  expression: "type.isObject({})"
  expectedResult: true

- description: "type.isObject #111: array => false"
  context: {}
  expression: "type.isObject([1,2])"
  expectedResult: false

- description: "type.isObject #112: string => false"
  context: {}
  expression: "type.isObject(\"abc\")"
  expectedResult: false

- description: "type.isObject #113: number => false"
  context: {}
  expression: "type.isObject(123)"
  expectedResult: false

- description: "type.isObject #114: boolean => false"
  context: {}
  expression: "type.isObject(true)"
  expectedResult: false

- description: "type.isObject #115: null => false"
  context: {}
  expression: "type.isObject(null)"
  expectedResult: false

- description: "type.isObject #116: context object => true"
  context:
    obj:
      x: 1
  expression: "type.isObject($obj)"
  expectedResult: true

- description: "type.isObject #117: context array => false"
  context:
    arr: [1,2]
  expression: "type.isObject($arr)"
  expectedResult: false

- description: "type.isObject #118: bracket => referencing object => true"
  context:
    data:
      rec:
        key: "val"
  expression: "type.isObject($data['rec'])"
  expectedResult: true

- description: "type.isObject #119: bracket => referencing array => false"
  context:
    data:
      rec: [1,2]
  expression: "type.isObject($data['rec'])"
  expectedResult: false

- description: "type.isObject #120: nested object => still object => true"
  context: {}
  expression: "type.isObject({a:{b:2}})"
  expectedResult: true

- description: "type.isObject #121: parentheses => object => true"
  context: {}
  expression: "type.isObject(({x:10}))"
  expectedResult: true

- description: "type.isObject #122: parentheses => numeric => false"
  context: {}
  expression: "type.isObject((2+3))"
  expectedResult: false

- description: "type.isObject #123: negative float => false"
  context: {}
  expression: "type.isObject(-2.5)"
  expectedResult: false

- description: "type.isObject #124: exponent => false"
  context: {}
  expression: "type.isObject(1.2e3)"
  expectedResult: false

- description: "type.isObject #125: big object => true"
  context:
    big:
      a: 1
      b: 2
  expression: "type.isObject($big)"
  expectedResult: true

- description: "type.isObject #126: boolean literal => false"
  context: {}
  expression: "type.isObject(false)"
  expectedResult: false

- description: "type.isObject #127: string literal => false"
  context: {}
  expression: "type.isObject(\"obj?\")"
  expectedResult: false

- description: "type.isObject #128: array literal => false"
  context: {}
  expression: "type.isObject([10])"
  expectedResult: false

- description: "type.isObject #129: null => false"
  context: {}
  expression: "type.isObject(null)"
  expectedResult: false

- description: "type.isObject #130: zero => false"
  context: {}
  expression: "type.isObject(0)"
  expectedResult: false

- description: "type.isObject #131: empty string => false"
  context: {}
  expression: "type.isObject(\"\")"
  expectedResult: false

- description: "type.isObject #132: single field => true"
  context: {}
  expression: "type.isObject({k:\"v\"})"
  expectedResult: true

- description: "type.isObject #133: multiple fields => true"
  context: {}
  expression: "type.isObject({a:1,b:2})"
  expectedResult: true

- description: "type.isObject #134: bracket referencing => object => true"
  context:
    container:
      sub:
        param: 123
  expression: "type.isObject($container.sub)"
  expectedResult: true

- description: "type.isObject #135: bracket referencing => not object => false"
  context:
    container:
      sub: 999
  expression: "type.isObject($container.sub)"
  expectedResult: false


################################################################################
# 136 - 162: type.isNull(x)
################################################################################

- description: "type.isNull #136: literal null => true"
  context: {}
  expression: "type.isNull(null)"
  expectedResult: true

- description: "type.isNull #137: number => false"
  context: {}
  expression: "type.isNull(0)"
  expectedResult: false

- description: "type.isNull #138: string => false"
  context: {}
  expression: "type.isNull(\"null\")"
  expectedResult: false

- description: "type.isNull #139: boolean => false"
  context: {}
  expression: "type.isNull(false)"
  expectedResult: false

- description: "type.isNull #140: array => false"
  context: {}
  expression: "type.isNull([])"
  expectedResult: false

- description: "type.isNull #141: object => false"
  context: {}
  expression: "type.isNull({})"
  expectedResult: false

- description: "type.isNull #142: context null => true"
  context:
    val: null
  expression: "type.isNull($val)"
  expectedResult: true

- description: "type.isNull #143: context int => false"
  context:
    val: 10
  expression: "type.isNull($val)"
  expectedResult: false

- description: "type.isNull #144: context string => false"
  context:
    val: \"test\"
  expression: "type.isNull($val)"
  expectedResult: false

- description: "type.isNull #145: bracket => referencing null => true"
  context:
    obj:
      key: null
  expression: "type.isNull($obj.key)"
  expectedResult: true

- description: "type.isNull #146: bracket => referencing int => false"
  context:
    obj:
      key: 5
  expression: "type.isNull($obj.key)"
  expectedResult: false

- description: "type.isNull #147: negative float => false"
  context: {}
  expression: "type.isNull(-1.2)"
  expectedResult: false

- description: "type.isNull #148: parentheses => literal => null => true"
  context: {}
  expression: "type.isNull((null))"
  expectedResult: true

- description: "type.isNull #149: parentheses => numeric => false"
  context: {}
  expression: "type.isNull((2+3))"
  expectedResult: false

- description: "type.isNull #150: array with null => but the array itself isn't null => false"
  context: {}
  expression: "type.isNull([null])"
  expectedResult: false

- description: "type.isNull #151: object with null field => the object isn't null => false"
  context: {}
  expression: "type.isNull({x:null})"
  expectedResult: false

- description: "type.isNull #152: boolean => false"
  context: {}
  expression: "type.isNull(true)"
  expectedResult: false

- description: "type.isNull #153: exponent => false"
  context: {}
  expression: "type.isNull(1e3)"
  expectedResult: false

- description: "type.isNull #154: empty string => false"
  context: {}
  expression: "type.isNull(\"\")"
  expectedResult: false

- description: "type.isNull #155: single char => false"
  context: {}
  expression: "type.isNull(\"A\")"
  expectedResult: false

- description: "type.isNull #156: negative int => false"
  context: {}
  expression: "type.isNull(-999)"
  expectedResult: false

- description: "type.isNull #157: optional chaining => referencing null => true"
  context:
    data:
      maybe: null
  expression: "type.isNull($data?.maybe)"
  expectedResult: true

- description: "type.isNull #158: optional chaining => referencing int => false"
  context:
    data:
      maybe: 10
  expression: "type.isNull($data?.maybe)"
  expectedResult: false

- description: "type.isNull #159: boolean context => false"
  context:
    flag: true
  expression: "type.isNull($flag)"
  expectedResult: false

- description: "type.isNull #160: array context => false"
  context:
    arr: [1,2]
  expression: "type.isNull($arr)"
  expectedResult: false

- description: "type.isNull #161: object context => false"
  context:
    obj:
      x: 1
  expression: "type.isNull($obj)"
  expectedResult: false

- description: "type.isNull #162: context field => definitely null => true"
  context:
    a: null
  expression: "type.isNull($a)"
  expectedResult: true


################################################################################
# 163 - 192: type.string(x) -> string (30 Test Cases)
################################################################################

- description: "type.string #163: integer => converted to string"
  context: {}
  expression: "type.string(123)"
  expectedResult: "123"

- description: "type.string #164: negative integer => '-5'"
  context: {}
  expression: "type.string(-5)"
  expectedResult: "-5"

- description: "type.string #165: zero integer => '0'"
  context: {}
  expression: "type.string(0)"
  expectedResult: "0"

- description: "type.string #166: float => '3.14'"
  context: {}
  expression: "type.string(3.14)"
  expectedResult: "3.14"

- description: "type.string #167: negative float => '-2.5'"
  context: {}
  expression: "type.string(-2.5)"
  expectedResult: "-2.5"

- description: "type.string #168: exponent => '120.0' or '1.2e2' (implementation dependent, but success path => we just give a likely result)"
  context: {}
  expression: "type.string(1.2e2)"
  expectedResult: "120"

- description: "type.string #169: boolean true => 'true'"
  context: {}
  expression: "type.string(true)"
  expectedResult: "true"

- description: "type.string #170: boolean false => 'false'"
  context: {}
  expression: "type.string(false)"
  expectedResult: "false"

- description: "type.string #171: null => ''"
  context: {}
  expression: "type.string(null)"
  expectedResult: "null"

- description: "type.string #172: existing string => same string"
  context: {}
  expression: "type.string(\"hello\")"
  expectedResult: "hello"

- description: "type.string #173: empty string => remains ''"
  context: {}
  expression: "type.string(\"\")"
  expectedResult: ""

- description: "type.string #174: context int => '50'"
  context:
    x: 50
  expression: "type.string($x)"
  expectedResult: "50"

- description: "type.string #175: context float => '2.71'"
  context:
    val: 2.71
  expression: "type.string($val)"
  expectedResult: "2.71"

- description: "type.string #176: context bool => 'true'"
  context:
    b: true
  expression: "type.string($b)"
  expectedResult: "true"

- description: "type.string #177: context null => ''"
  context:
    n: null
  expression: "type.string($n)"
  expectedResult: "null"

- description: "type.string #178: bracket => referencing negative int => '-42'"
  context:
    arr: [-42, 0]
  expression: "type.string($arr[0])"
  expectedResult: "-42"

- description: "type.string #179: bracket => referencing bool => 'false'"
  context:
    arr: [true, false]
  expression: "type.string($arr[1])"
  expectedResult: "false"

- description: "type.string #180: zero float => '0.0' (depending on implementation, might be '0')"
  context: {}
  expression: "type.string(0.0)"
  expectedResult: "0"

- description: "type.string #181: large int => '999999999999'"
  context: {}
  expression: "type.string(999999999999)"
  expectedResult: "999999999999"

- description: "type.string #182: negative large int => '-1000000000000'"
  context: {}
  expression: "type.string(-1000000000000)"
  expectedResult: "-1000000000000"

- description: "type.string #183: parentheses => expression => numeric => '5'"
  context: {}
  expression: "type.string(2+3)"
  expectedResult: "5"

- description: "type.string #184: parentheses => expression => bool => 'true'"
  context: {}
  expression: "type.string((true))"
  expectedResult: "true"

- description: "type.string #185: no decimal float => '2'"
  context: {}
  expression: "type.string(2.0)"
  expectedResult: "2"

- description: "type.string #186: negative exponent => e.g. '0.0314' or '3.14e-2'"
  context: {}
  expression: "type.string(3.14e-2)"
  expectedResult: "0.0314" # or "3.14e-2"

- description: "type.string #187: single boolean => 'true'"
  context:
    flg: true
  expression: "type.string($flg)"
  expectedResult: "true"

- description: "type.string #188: single boolean => 'false'"
  context:
    flg: false
  expression: "type.string($flg)"
  expectedResult: "false"

- description: "type.string #189: single null => ''"
  context:
    n: null
  expression: "type.string($n)"
  expectedResult: "null"

- description: "type.string #190: single int => '77'"
  context:
    x: 77
  expression: "type.string($x)"
  expectedResult: "77"

- description: "type.string #191: single float => '0.5'"
  context:
    x: 0.5
  expression: "type.string($x)"
  expectedResult: "0.5"

- description: "type.string #192: single negative float => '-4.56'"
  context:
    x: -4.56
  expression: "type.string($x)"
  expectedResult: "-4.56"


################################################################################
# 193 - 221: type.int(x) -> int (29 Test Cases)
################################################################################

- description: "type.int #193: int literal => remains same"
  context: {}
  expression: "type.int(42)"
  expectedResult: 42

- description: "type.int #194: negative int => remains same"
  context: {}
  expression: "type.int(-10)"
  expectedResult: -10

- description: "type.int #195: float => truncated or floored? The specification says 'runtime error if not valid int' or it does a standard conversion. We do success => typical = floor or round? We'll assume standard 'truncate' or 'floor' might be used. We'll pick a typical scenario => 3.14 => becomes 3"
  context: {}
  expression: "type.int(3.14)"
  expectedResult: 3

- description: "type.int #196: negative float => e.g. -2.8 => -2 or so. We'll pick typical => -2"
  context: {}
  expression: "type.int(-2.8)"
  expectedResult: -2

- description: "type.int #197: exponent float => e.g. 1.2e2 => 120 int"
  context: {}
  expression: "type.int(1.2e2)"
  expectedResult: 120

- description: "type.int #198: zero float => 0"
  context: {}
  expression: "type.int(0.0)"
  expectedResult: 0

- description: "type.int #199: negative exponent => e.g. 1.23e-1 => 0"
  context: {}
  expression: "type.int(1.23e-1)"
  expectedResult: 0

- description: "type.int #200: boolean true => typical. The DSL states runtime error if not numeric or string number => but we want success => so let's do from string 'true'? Actually, success path means we wouldn't pass boolean if the DSL is strict. Let's do a numeric or string scenario. We'll skip direct boolean. We'll do success with string. '42'"
  context: {}
  expression: "type.int(\"42\")"
  expectedResult: 42

- description: "type.int #201: negative string => '-5'"
  context: {}
  expression: "type.int(\"-5\")"
  expectedResult: -5

- description: "type.int #202: zero string => '0'"
  context: {}
  expression: "type.int(\"0\")"
  expectedResult: 0

- description: "type.int #203: float string => '3.14' => typical => 3"
  context: {}
  expression: "type.int(\"3.14\")"
  expectedResult: 3

- description: "type.int #204: negative float string => '-2.5' => typical => -2"
  context: {}
  expression: "type.int(\"-2.5\")"
  expectedResult: -2

- description: "type.int #205: exponent float string => '1.2e2' => 120"
  context: {}
  expression: "type.int(\"1.2e2\")"
  expectedResult: 120

- description: "type.int #206: negative exponent float string => '3.14e-1' => 0 or 0-based. We'll pick 0"
  context: {}
  expression: "type.int(\"3.14e-1\")"
  expectedResult: 0

- description: "type.int #207: null => 0"
  context: {}
  expression: "type.int(null)"
  expectedResult: 0

- description: "type.int #208: context float => e.g. 2.99 => 2"
  context:
    f: 2.99
  expression: "type.int($f)"
  expectedResult: 2

- description: "type.int #209: context negative float => e.g. -3.7 => -3"
  context:
    f: -3.7
  expression: "type.int($f)"
  expectedResult: -3

- description: "type.int #210: context string => '10' => 10"
  context:
    s: "10"
  expression: "type.int($s)"
  expectedResult: 10

- description: "type.int #211: context string => '-10.9' => typical => -10"
  context:
    s: "-10.9"
  expression: "type.int($s)"
  expectedResult: -10

- description: "type.int #212: large float => e.g. 9999.9 => 9999"
  context: {}
  expression: "type.int(9999.9)"
  expectedResult: 9999

- description: "type.int #213: negative large float => e.g. -12345.999 => -12345"
  context: {}
  expression: "type.int(-12345.999)"
  expectedResult: -12345

- description: "type.int #214: parentheses => expression => numeric => e.g. (5+3)=8"
  context: {}
  expression: "type.int(5+3)"
  expectedResult: 8

- description: "type.int #215: bracket => referencing float => truncated => e.g. 7"
  context:
    arr: [7.99]
  expression: "type.int($arr[0])"
  expectedResult: 7

- description: "type.int #216: bracket => referencing string => '45' => 45"
  context:
    arr: ["45"]
  expression: "type.int($arr[0])"
  expectedResult: 45

- description: "type.int #217: zero float string => '0.0' => 0"
  context: {}
  expression: "type.int(\"0.0\")"
  expectedResult: 0

- description: "type.int #218: negative exponent string => '1.23e-1' => 0"
  context: {}
  expression: "type.int(\"1.23e-1\")"
  expectedResult: 0

- description: "type.int #219: minus zero => -0.5 => -0 => typical => 0 or negative zero => we'll pick 0"
  context: {}
  expression: "type.int(-0.5)"
  expectedResult: 0

- description: "type.int #220: single integer context => remains that integer"
  context:
    val: 77
  expression: "type.int($val)"
  expectedResult: 77

- description: "type.int #221: single string => '100' => 100"
  context:
    s: "100"
  expression: "type.int($s)"
  expectedResult: 100


################################################################################
# 222 - 250: type.float(x) -> float (29 Test Cases)
################################################################################

- description: "type.float #222: int literal => e.g. 42 => becomes 42.0"
  context: {}
  expression: "type.float(42)"
  expectedResult: 42.0

- description: "type.float #223: negative int => -5 => -5.0"
  context: {}
  expression: "type.float(-5)"
  expectedResult: -5.0

- description: "type.float #224: zero => 0.0"
  context: {}
  expression: "type.float(0)"
  expectedResult: 0.0

- description: "type.float #225: float literal => remains same"
  context: {}
  expression: "type.float(3.14)"
  expectedResult: 3.14

- description: "type.float #226: negative float => remains same"
  context: {}
  expression: "type.float(-2.5)"
  expectedResult: -2.5

- description: "type.float #227: exponent => 1.2e2 => remains same"
  context: {}
  expression: "type.float(1.2e2)"
  expectedResult: 120.0

- description: "type.float #228: negative exponent => 3.14e-2 => 0.0314"
  context: {}
  expression: "type.float(3.14e-2)"
  expectedResult: 0.0314

- description: "type.float #229: boolean => DSL says only numeric or string => so let's do from string => 'true'? That would error. We'll do a valid scenario => '42' => 42.0"
  context: {}
  expression: "type.float(\"42\")"
  expectedResult: 42.0

- description: "type.float #230: negative string => '-5' => -5.0"
  context: {}
  expression: "type.float(\"-5\")"
  expectedResult: -5.0

- description: "type.float #231: float string => '3.14'"
  context: {}
  expression: "type.float(\"3.14\")"
  expectedResult: 3.14

- description: "type.float #232: negative float string => '-2.5'"
  context: {}
  expression: "type.float(\"-2.5\")"
  expectedResult: -2.5

- description: "type.float #233: exponent float string => '1.2e2' => 120.0"
  context: {}
  expression: "type.float(\"1.2e2\")"
  expectedResult: 120.0

- description: "type.float #234: negative exponent float string => '3.14e-2' => 0.0314"
  context: {}
  expression: "type.float(\"3.14e-2\")"
  expectedResult: 0.0314

- description: "type.float #235: null => 0.0"
  context: {}
  expression: "type.float(null)"
  expectedResult: 0.0

- description: "type.float #236: context int => 50 => 50.0"
  context:
    x: 50
  expression: "type.float($x)"
  expectedResult: 50.0

- description: "type.float #237: context float => 2.71 => remains 2.71"
  context:
    val: 2.71
  expression: "type.float($val)"
  expectedResult: 2.71

- description: "type.float #238: context string => '10.9' => 10.9"
  context:
    s: "10.9"
  expression: "type.float($s)"
  expectedResult: 10.9

- description: "type.float #239: context string => '-10' => -10.0"
  context:
    s: "-10"
  expression: "type.float($s)"
  expectedResult: -10.0

- description: "type.float #240: parentheses => expression => numeric => e.g. (5+3)=8 => float => 8.0"
  context: {}
  expression: "type.float(5+3)"
  expectedResult: 8.0

- description: "type.float #241: bracket => referencing int => e.g. 7 => 7.0"
  context:
    arr: [7, 8]
  expression: "type.float($arr[0])"
  expectedResult: 7.0

- description: "type.float #242: bracket => referencing string => '2.5' => 2.5"
  context:
    arr: ["2.5"]
  expression: "type.float($arr[0])"
  expectedResult: 2.5

- description: "type.float #243: large int => e.g. 999999999999 => => 999999999999.0"
  context: {}
  expression: "type.float(999999999999)"
  expectedResult: 999999999999.0

- description: "type.float #244: negative large int => => -1000000000000.0"
  context: {}
  expression: "type.float(-1000000000000)"
  expectedResult: -1000000000000.0

- description: "type.float #245: negative exponent => e.g. 1.23e-1 => 0.123"
  context: {}
  expression: "type.float(1.23e-1)"
  expectedResult: 0.123

- description: "type.float #246: single integer context => => float"
  context:
    val: 77
  expression: "type.float($val)"
  expectedResult: 77.0

- description: "type.float #247: single string => '100.5' => => 100.5"
  context:
    s: "100.5"
  expression: "type.float($s)"
  expectedResult: 100.5

- description: "type.float #248: negative float => remains negative"
  context: {}
  expression: "type.float(-0.1234)"
  expectedResult: -0.1234

- description: "type.float #249: single null => => 0.0"
  context:
    n: null
  expression: "type.float($n)"
  expectedResult: 0.0

- description: "type.float #250: negative exponent string => '2.5e-1' => => 0.25"
  context: {}
  expression: "type.float(\"2.5e-1\")"
  expectedResult: 0.25

# A handful of rudimentary error output tests.

- description: "Runtime Error 1: Missing field (top-level)"
  context: {}
  expression: "$missingField"
  expectedError: "ReferenceError"
  expectedErrorMessage: "field 'missingField' not found at line 1, column 2"


- description: "Runtime Error 2: invalid namespaceless function"
  context:
    a: 10
  expression: "ifCond() == 10"
  expectedResult: true
  expectedError: "ParameterError"
  expectedErrorMessage: "function call missing namespace at line 1, column 1"

- description: "Lexical Error 1: 12..3"
  context: { }
  expression: "12..3"
  expectedError: "LexicalError"
  expectedErrorMessage: "Invalid number literal: missing digits after decimal point at line 1, column 4"

- description: "Syntax Error 1: AND true"
  context: {}
  expression: "AND true"
  expectedError: "SyntaxError"
  expectedErrorMessage: "Unexpected token AND at line 1, column 1"

- description: "Syntax Error 3: Bare identifier"
  context:
    a: 10
  expression: "a == 10"
  expectedError: SyntaxError
  expectedErrorMessage: Bare identifier 'a' is not allowed outside of context references or object keys at line 1, column 1

- description: "Semantic Error 1: hello AND true"
  context: { }
  expression: "\"hello\" AND true"
  expectedError: "SemanticError"
  expectedErrorMessage: "AND operator requires boolean operand at line 1, column 9"



- description: "1) Filter out null elements (no subfield)"
  context:
    myArray: [1, null, 2, null, 3, null, 4]
  expression: "array.filter($myArray)"
  expectedResult:
    - 1
    - 2
    - 3
    - 4

- description: "2) Filter with subfield but no matchVal (keep objects with non-null subfield)"
  context:
    myArray:
      - { name: "Alice", age: 30 }
      - { name: null, age: 25 }
      - { age: 40 }
      - { name: "Bob", age: null }
      - { name: "Charlie", age: 35 }
  expression: "array.filter($myArray, 'name')"
  expectedResult:
    - { name: "Alice", age: 30 }
    - { name: "Bob", age: null }
    - { name: "Charlie", age: 35 }

- description: "3) Filter with subfield and matchVal (exact match)"
  context:
    myArray:
      - { name: "Alice", role: "admin" }
      - { name: "Bob", role: "user" }
      - { name: "Charlie", role: "admin" }
      - { name: "Diana", role: "user" }
  expression: "array.filter($myArray, 'role', 'admin')"
  expectedResult:
    - { name: "Alice", role: "admin" }
    - { name: "Charlie", role: "admin" }

- description: "4) Filter first argument not an array -> runtime error"
  context:
    myValue: "I'm not an array"
  expression: "array.filter($myValue)"
  expectedError: "TypeError"
  expectedErrorMessage: "array.filter: first argument must be an array"

- description: "5) Filter subfield not a string -> runtime error"
  context:
    myArray: [{ foo: 1 }, { foo: 2 }]
    mySubfield: 42
  expression: "array.filter($myArray, $mySubfield)"
  expectedError: "TypeError"
  expectedErrorMessage: "array.filter: subfield argument must be string"

- description: "6) Empty array, no subfield -> returns empty array"
  context:
    myArray: []
  expression: "array.filter($myArray)"
  expectedResult: []

- description: "7) Array with all null elements"
  context:
    myArray: [null, null, null]
  expression: "array.filter($myArray)"
  expectedResult: []

- description: "8) Array with no nulls -> no subfield => returns same array"
  context:
    myArray: [1, 2, 3, 4]
  expression: "array.filter($myArray)"
  expectedResult:
    - 1
    - 2
    - 3
    - 4

- description: "9) Subfield present, but some objects lack it entirely"
  context:
    myArray:
      - { name: "Alice", dept: "HR" }
      - { name: "Bob" }
      - { dept: "Finance" }
      - { name: "Charlie", dept: "IT" }
  expression: "array.filter($myArray, 'dept')"
  expectedResult:
    - { name: "Alice", dept: "HR" }
    - { dept: "Finance" }
    - { name: "Charlie", dept: "IT" }

- description: "10) Subfield is present but sometimes null; exclude null"
  context:
    myArray:
      - { code: "X1", qty: 10 }
      - { code: "X2", qty: null }
      - { code: "X3" }
      - { code: "X4", qty: 0 }
  expression: "array.filter($myArray, 'qty')"
  expectedResult:
    - { code: "X1", qty: 10 }
    - { code: "X4", qty: 0 }

- description: "11) Subfield and matchVal are numbers"
  context:
    myArray:
      - { id: 1, foo: "a" }
      - { id: 2, foo: "b" }
      - { id: 3, foo: "a" }
      - { id: 2, foo: "c" }
  expression: "array.filter($myArray, 'id', 2)"
  expectedResult:
    - { id: 2, foo: "b" }
    - { id: 2, foo: "c" }

- description: "12) Subfield with numeric matchVal that doesn't exist"
  context:
    myArray:
      - { id: 10, foo: "x" }
      - { id: 20, foo: "y" }
      - { id: 30, foo: "z" }
  expression: "array.filter($myArray, 'id', 999)"
  expectedResult: []

- description: "13) Mixed array (int, object, null, etc) no subfield"
  context:
    myArray: [null, { name: "Alice" }, 42, { name: "Bob" }, null]
  expression: "array.filter($myArray)"
  expectedResult:
    - { name: "Alice" }
    - 42
    - { name: "Bob" }

- description: "14) Mixed array of objects, some subfield present, but not all"
  context:
    myArray:
      - { color: "blue" }
      - { color: null }
      - {}
      - { color: "red" }
  expression: "array.filter($myArray, 'color')"
  expectedResult:
    - { color: "blue" }
    - { color: "red" }

- description: "15) Subfield = 'active', matchVal = true"
  context:
    myArray:
      - { user: "Alice", active: true }
      - { user: "Bob", active: false }
      - { user: "Charlie", active: true }
      - { user: "Diana" }
  expression: "array.filter($myArray, 'active', true)"
  expectedResult:
    - { user: "Alice", active: true }
    - { user: "Charlie", active: true }

- description: "16) Subfield = 'active', matchVal = false"
  context:
    myArray:
      - { user: "Alice", active: true }
      - { user: "Bob", active: false }
      - { user: "Charlie", active: true }
      - { user: "Diana", active: false }
  expression: "array.filter($myArray, 'active', false)"
  expectedResult:
    - { user: "Bob", active: false }
    - { user: "Diana", active: false }

- description: "17) Large array with no subfield -> filters null only"
  context:
    myArray:
      - 1
      - null
      - 2
      - null
      - 3
      - null
      - 4
      - null
      - 5
      - 6
      - null
  expression: "array.filter($myArray)"
  expectedResult:
    - 1
    - 2
    - 3
    - 4
    - 5
    - 6

- description: "18) Subfield matchVal is a string that appears multiple times"
  context:
    myArray:
      - { make: "Honda", model: "Civic" }
      - { make: "Toyota", model: "Corolla" }
      - { make: "Honda", model: "Accord" }
      - { make: "Ford", model: "Focus" }
      - { make: "Honda", model: "HR-V" }
  expression: "array.filter($myArray, 'make', 'Honda')"
  expectedResult:
    - { make: "Honda", model: "Civic" }
    - { make: "Honda", model: "Accord" }
    - { make: "Honda", model: "HR-V" }

- description: "19) Subfield exists, but matchVal does not match any object"
  context:
    myArray:
      - { tag: "top" }
      - { tag: "middle" }
      - { tag: "bottom" }
  expression: "array.filter($myArray, 'tag', 'missing')"
  expectedResult: []

- description: "20) All elements are null -> no subfield"
  context:
    myArray: [null, null, null, null]
  expression: "array.filter($myArray)"
  expectedResult: []

- description: "21) Some objects have subfield = null, others have real values"
  context:
    myArray:
      - { status: null }
      - { status: "pending" }
      - { status: "done" }
      - { status: null }
  expression: "array.filter($myArray, 'status')"
  expectedResult:
    - { status: "pending" }
    - { status: "done" }

- description: "22) Subfield is a nested key (not supported directly -> no filter match except it is present at top-level?)"
  context:
    myArray:
      - { user: { name: "Alice" } }
      - { user: { name: "Bob" } }
      - { user: { } }
      - {}
  expression: "array.filter($myArray, 'user')"
  expectedResult:
    - { user: { name: "Alice" } }
    - { user: { name: "Bob" } }
    - { user: {} }

- description: "23) Single-element array, element is object that has subfield"
  context:
    myArray:
      - { key: "value" }
  expression: "array.filter($myArray, 'key')"
  expectedResult:
    - { key: "value" }

- description: "24) Single-element array, element is object that does not have subfield"
  context:
    myArray:
      - { keyA: "valA" }
  expression: "array.filter($myArray, 'keyB')"
  expectedResult: []

- description: "25) Single-element array, element is null"
  context:
    myArray: [null]
  expression: "array.filter($myArray)"
  expectedResult: []

- description: "26) Subfield matchVal is string with special characters"
  context:
    myArray:
      - { note: "Hello?" }
      - { note: "Goodbye!" }
      - { note: "Hello?" }
      - { note: "No punctuation" }
  expression: "array.filter($myArray, 'note', 'Hello?')"
  expectedResult:
    - { note: "Hello?" }
    - { note: "Hello?" }

- description: "27) Subfield matchVal is numeric type mismatch"
  context:
    myArray:
      - { score: "100" }
      - { score: 100 }
      - { score: 99 }
  expression: "array.filter($myArray, 'score', 100)"
  expectedResult:
    - { score: 100 }

- description: "28) Subfield matchVal is boolean"
  context:
    myArray:
      - { online: true, user: "User1" }
      - { online: false, user: "User2" }
      - { user: "User3" }
      - { online: true, user: "User4" }
  expression: "array.filter($myArray, 'online', true)"
  expectedResult:
    - { online: true, user: "User1" }
    - { online: true, user: "User4" }

- description: "29) Subfield present in all objects, but none match the matchVal"
  context:
    myArray:
      - { letter: "A" }
      - { letter: "B" }
      - { letter: "C" }
  expression: "array.filter($myArray, 'letter', 'Z')"
  expectedResult: []

- description: "30) Complex array with mixed data types, subfield filter for a certain string"
  context:
    myArray:
      - 123
      - { name: "Tom" }
      - null
      - { name: "Jerry" }
      - "random string"
      - { name: "Tom" }
  expression: "array.filter($myArray, 'name', 'Tom')"
  expectedResult:
    - { name: "Tom" }
    - { name: "Tom" }

- description: "Comment Test: Ignore comment line"
  context: {}
  expression: |
    # This is a comment that should be skipped
    1 + 1
  expectedResult: 2
- description: "Comment Test: Leading whitespace comment line"
  context: {}
  expression: |
    # This comment with leading spaces should be ignored
    2 * 3
  expectedResult: 6

- description: "Comment Test: Interleaved comment in multi-line expression"
  context: {}
  expression: |
    2 +
    # This comment should be ignored in the middle of the expression
    3
  expectedResult: 5

- description: "Comment Test: Multiple consecutive comment lines"
  context: {}
  expression: |
    # First comment line
    # Second comment line
    # Third comment line
    4 + 1
  expectedResult: 5

- description: "Comment Test: Trailing comment line"
  context: {}
  expression: |
    5 - 2
    # This is a trailing comment that should be ignored
  expectedResult: 3


- description: "Unicode Escape Test: Should interpret \\uXXXX correctly"
  context: {}
  expression: "\"Hello \\u0041\" == \"Hello A\""
  expectedResult: true

- description: "Short-Circuit Evaluation Test: true || (1/0) yields true"
  context: {}
  expression: "true || (1 / 0)"
  expectedResult: true


- description: "Syntax Error: Trailing comma in object literal"
  context: {}
  expression: "{ key: 1, }"
  expectedError: "SyntaxError"
  expectedErrorMessage: "Trailing comma not allowed in object literal"

- description: "Valid Object Literal: Two keys"
  context: {}
  expression: "{ a: 1, b: 2 }"
  expectedResult:
    a: 1
    b: 2

- description: "Valid Object Literal: Mixed quoted and unquoted keys"
  context: {}
  expression: "{ \"a\": 1, b: 2 }"
  expectedResult:
    a: 1
    b: 2

- description: "Valid Nested Object Literal"
  context: {}
  expression: "{ a: { b: 2 } }"
  expectedResult:
    a:
      b: 2

- description: "Valid Empty Object Literal"
  context: {}
  expression: "{}"
  expectedResult: {}

- description: "Valid Object Literal: Multiple Field Types"
  context: {}
  expression: "{ a: 1, b: \"hello\", c: true }"
  expectedResult:
    a: 1
    b: "hello"
    c: true

- description: "Valid Object Literal: Quoted key with spaces"
  context: {}
  expression: "{ \"first name\": \"Alice\" }"
  expectedResult:
    "first name": "Alice"

- description: "Syntax Error: Trailing comma with multiple fields"
  context: {}
  expression: "{ a: 1, b: 2, }"
  expectedError: "SyntaxError"
  expectedErrorMessage: "Trailing comma not allowed in object literal"
- description: "Valid Object Literal: Single key-value pair"
  context: {}
  expression: "{ key: 42 }"
  expectedResult:
    key: 42

- description: "Valid Object Literal: Multiple primitives"
  context: {}
  expression: "{ num: 100, str: \"hello\", bool: false, nothing: null }"
  expectedResult:
    num: 100
    str: "hello"
    bool: false
    nothing: null

- description: "Valid Object Literal: Nested object"
  context: {}
  expression: "{ outer: { inner: \"value\" } }"
  expectedResult:
    outer:
      inner: "value"

- description: "Valid Object Literal: Nested array"
  context: {}
  expression: "{ arr: [1, 2, 3] }"
  expectedResult:
    arr:
      - 1
      - 2
      - 3

- description: "Valid Object Literal: Arithmetic expression as value"
  context: {}
  expression: "{ calc: (2+3*4) }"
  expectedResult:
    calc: 14

- description: "Syntax Error: Missing colon between key and value"
  context: {}
  expression: "{ key 42 }"
  expectedError: "SyntaxError"
  expectedErrorMessage: "Expected ':' after object key"

- description: "Syntax Error: Missing value after colon"
  context: {}
  expression: "{ key: }"
  expectedError: "SyntaxError"
  expectedErrorMessage: "Unexpected token } at line 1, column 8"

- description: "Syntax Error: Missing comma between fields"
  context: {}
  expression: "{ a: 1 b: 2 }"
  expectedError: "SyntaxError"
  expectedErrorMessage: "Expected ',' or '}' after object field"

- description: "Syntax Error: Missing closing curly brace"
  context: {}
  expression: "{ a: 1, b: 2"
  expectedError: "SyntaxError"
  expectedErrorMessage: "Expected ',' or '}' after object field at line 1, column 13"

- description: "Valid Object Literal: Extra whitespace"
  context: {}
  expression: "{    a:   1  ,    b:   2   }"
  expectedResult:
    a: 1
    b: 2

- description: "Valid Object Literal: Quoted key with hyphen"
  context: {}
  expression: "{ \"first-name\": \"Alice\" }"
  expectedResult:
    "first-name": "Alice"

- description: "Valid Object Literal: Quoted key with special characters"
  context: {}
  expression: "{ \"@special!\": 123 }"
  expectedResult:
    "@special!": 123

- description: "Syntax Error: Unquoted key with invalid character (hyphen)"
  context: {}
  expression: "{ first-name: \"Alice\" }"
  expectedError: "SyntaxError"
  expectedErrorMessage: "Expected ':' after object key at line 1, column 8"

- description: "Valid Object Literal: Nested object with multiple fields"
  context: {}
  expression: "{ user: { name: \"Bob\", age: 30 }, active: true }"
  expectedResult:
    user:
      name: "Bob"
      age: 30
    active: true

- description: "Valid Object Literal: Value as an array literal"
  context: {}
  expression: "{ numbers: [10, 20, 30] }"
  expectedResult:
    numbers:
      - 10
      - 20
      - 30



- description: "intArray with numeric strings"
  context: {}
  expression: "type.intArray([\"1\", \"2\", \"3\"])"
  expectedResult: [1, 2, 3]

- description: "intArray with nonâ€‘numeric element"
  context: {}
  expression: "type.intArray([\"1\", \"foo\", \"3\"])"
  expectedError: "FunctionCallError"
  expectedErrorMessage: "element at index 1 (foo) is not convertible to int"

- description: "floatArray with mixed numeric types"
  context: {}
  expression: "type.floatArray([\"1.0\", 2, 3])"
  expectedResult: [1.0, 2.0, 3.0]

- description: "stringArray with mixed types"
  context: {}
  expression: "type.stringArray([1, \"two\", 3.0])"
  expectedResult: ["1", "two", "3"]

- description: "Math.sum with intArray"
  context: {}
  expression: "math.sum(type.intArray([\"1\", \"2\", \"3\"]))"
  expectedResult: 6

- description: "Math.avg with floatArray"
  context: {}
  expression: "math.avg(type.floatArray([\"1.0\", 2, \"3.0\"]))"
  expectedResult: 2.0

- description: "String.join with stringArray"
  context: {}
  expression: "string.join(type.stringArray([1, 2, 3]), \"-\")"
  expectedResult: "1-2-3"

- description: "Math.sum with intArray on mixed valid numeric types"
  context: {}
  expression: "math.sum(type.intArray([\"10\", 20, 30.0]))"
  expectedResult: 60

- description: "intArray with boolean element (should error)"
  context: {}
  expression: "type.intArray([\"5\", true, \"7\"])"
  expectedError: "FunctionCallError"
  expectedErrorMessage: "element at index 1 (true) is not convertible to int"

- description: "floatArray with nonâ€‘numeric element"
  context: {}
  expression: "type.floatArray([\"1.0\", \"bar\", 3])"
  expectedError: "FunctionCallError"
  expectedErrorMessage: "element at index 1 (bar) is not convertible to float"

- description: "stringArray with all strings"
  context: {}
  expression: "type.stringArray([\"a\", \"b\", \"c\"])"
  expectedResult: ["a", "b", "c"]

- description: "Array.sort with intArray ascending"
  context: {}
  expression: "array.sort(type.intArray([\"3\", \"1\", \"2\"]), true)"
  expectedResult: [1, 2, 3]

- description: "Array.sort with floatArray descending"
  context: {}
  expression: "array.sort(type.floatArray([\"3.0\", 1, \"2.0\"]), false)"
  expectedResult: [3.0, 2.0, 1.0]

- description: "Math.pow using intArray values"
  context: {}
  expression: "math.pow(array.first(type.intArray([\"2\", \"3\"])), array.last(type.intArray([\"2\", \"3\"])))"
  expectedResult: 8

- description: "intArray on empty array"
  context: {}
  expression: "type.intArray([])"
  expectedResult: []

- description: "floatArray on empty array"
  context: {}
  expression: "type.floatArray([])"
  expectedResult: []

- description: "stringArray on empty array"
  context: {}
  expression: "type.stringArray([])"
  expectedResult: []

- description: "stringArray with nil element"
  context: {}
  expression: "type.stringArray([null, \"foo\"])"
  expectedResult: ["null", "foo"]

- description: "Math.sum with floatArray on float strings"
  context: {}
  expression: "math.sum(type.floatArray([\"1.5\", \"2.5\", \"3.0\"]))"
  expectedResult: 7.0

- description: "Math.min with floatArray"
  context: {}
  expression: "math.min(type.floatArray([\"3.5\", 2, \"4.0\"]))"
  expectedResult: 2.0

- description: "Math.max with intArray"
  context: {}
  expression: "math.max(type.intArray([\"10\", 5, \"7\"]))"
  expectedResult: 10

- description: "stringArray with nested array element"
  context: {}
  expression: "type.stringArray([[1,2], 3])"
  expectedResult: ["[1, 2]", "3"]

- description: "Math.avg with stringArray should error (nonâ€‘numeric)"
  context: {}
  expression: "math.avg(type.stringArray([\"1\", \"2\", \"3\"]))"
  expectedError: "TypeError"
  expectedErrorMessage: "element is not numeric"

- description: "Array.first with stringArray"
  context: {}
  expression: "array.first(type.stringArray([1, 2, 3]))"
  expectedResult: "1"

- description: "Math.ceil with floatArray"
  context: {}
  expression: "math.ceil(array.first(type.floatArray([\"3.1\", \"4.2\"])))"
  expectedResult: 4

- description: "Modulo operator"
  context: {}
  expression: "7 % 5"
  expectedResult: 2


- description: "Modulo operator 2"
  context: { x: 7, y: 5}
  expression: "$x % $y"
  expectedResult: 2

